package org.npp.model.place.contact;
  
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import org.npp.model.time.OverallPeriod;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import jakarta.annotation.Generated;

/**
 * Address and contact information about some person, service or the parking site, provided in detail or via reference.
 */

@Schema(name = "Contact", description = "Address and contact information about some person, service or the parking site, provided in detail or via reference.")
@JsonIgnoreProperties(
  value = "contactType", // ignore manually set contactType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the contactType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "contactType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ContactByReference.class, name = "ContactByReference"),
  @JsonSubTypes.Type(value = ContactPoint.class, name = "ContactPoint")
})


public class Contact {

  /**
   * The contact object type
   */
  public enum ContactTypeEnum {
    CONTACTBYREFERENCE("ContactByReference"),
    
    CONTACTPOINT("ContactPoint");

    private String value;

    ContactTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ContactTypeEnum fromValue(String value) {
      for (ContactTypeEnum b : ContactTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private ContactTypeEnum contactType;

  private Boolean contactNotDefined;

  private Boolean contactUnknown;

  private Boolean shareWithPublic;

  private OverallPeriod validityOfContact;

  public Contact contactType(ContactTypeEnum contactType) {
    this.contactType = contactType;
    return this;
  }

  /**
   * The contact object type
   * @return contactType
  */
  
  @Schema(name = "contactType", description = "The contact object type", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("contactType")
  public ContactTypeEnum getContactType() {
    return contactType;
  }

  public void setContactType(ContactTypeEnum contactType) {
    this.contactType = contactType;
  }

  public Contact contactNotDefined(Boolean contactNotDefined) {
    this.contactNotDefined = contactNotDefined;
    return this;
  }

  /**
   * When [TRUE], there is currently no contact defined for the selected role and/or timeframe.  Don't use the specialisations in this case.
   * @return contactNotDefined
  */
  
  @Schema(name = "contactNotDefined", description = "When [TRUE], there is currently no contact defined for the selected role and/or timeframe.  Don't use the specialisations in this case.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("contactNotDefined")
  public Boolean getContactNotDefined() {
    return contactNotDefined;
  }

  public void setContactNotDefined(Boolean contactNotDefined) {
    this.contactNotDefined = contactNotDefined;
  }

  public Contact contactUnknown(Boolean contactUnknown) {
    this.contactUnknown = contactUnknown;
    return this;
  }

  /**
   * When [TRUE], the contact for the selected role and/or timeframe is unknown.  Don't use the specialisations in this case.
   * @return contactUnknown
  */
  
  @Schema(name = "contactUnknown", description = "When [TRUE], the contact for the selected role and/or timeframe is unknown.  Don't use the specialisations in this case.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("contactUnknown")
  public Boolean getContactUnknown() {
    return contactUnknown;
  }

  public void setContactUnknown(Boolean contactUnknown) {
    this.contactUnknown = contactUnknown;
  }

  public Contact shareWithPublic(Boolean shareWithPublic) {
    this.shareWithPublic = shareWithPublic;
    return this;
  }

  /**
   * When [TRUE], the details of this contact may be shared with the public.  If FALSE these contacts details are for internal purposes only.
   * @return shareWithPublic
  */
  
  @Schema(name = "shareWithPublic", description = "When [TRUE], the details of this contact may be shared with the public.  If FALSE these contacts details are for internal purposes only.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("shareWithPublic")
  public Boolean getShareWithPublic() {
    return shareWithPublic;
  }

  public void setShareWithPublic(Boolean shareWithPublic) {
    this.shareWithPublic = shareWithPublic;
  }

  public Contact validityOfContact(OverallPeriod validityOfContact) {
    this.validityOfContact = validityOfContact;
    return this;
  }

  /**
   * Get validityOfContact
   * @return validityOfContact
  */
  @Valid 
  @Schema(name = "validityOfContact", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("validityOfContact")
  public OverallPeriod getValidityOfContact() {
    return validityOfContact;
  }

  public void setValidityOfContact(OverallPeriod validityOfContact) {
    this.validityOfContact = validityOfContact;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Contact contact = (Contact) o;
    return Objects.equals(this.contactType, contact.contactType) &&
        Objects.equals(this.contactNotDefined, contact.contactNotDefined) &&
        Objects.equals(this.contactUnknown, contact.contactUnknown) &&
        Objects.equals(this.shareWithPublic, contact.shareWithPublic) &&
        Objects.equals(this.validityOfContact, contact.validityOfContact);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactType, contactNotDefined, contactUnknown, shareWithPublic, validityOfContact);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Contact {\n");
    sb.append("    contactType: ").append(toIndentedString(contactType)).append("\n");
    sb.append("    contactNotDefined: ").append(toIndentedString(contactNotDefined)).append("\n");
    sb.append("    contactUnknown: ").append(toIndentedString(contactUnknown)).append("\n");
    sb.append("    shareWithPublic: ").append(toIndentedString(shareWithPublic)).append("\n");
    sb.append("    validityOfContact: ").append(toIndentedString(validityOfContact)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

