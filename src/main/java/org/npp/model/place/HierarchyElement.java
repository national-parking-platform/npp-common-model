package org.npp.model.place;
  
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.npp.model.place.HierarchyElementRecord;
import org.npp.model.place.HierarchyElementReference;
import org.npp.model.place.enums.HierarchyElementTypeEnum;
import org.npp.model.occupancy.OccupancyLevel;
import org.npp.model.common.SpecificLanguageString;
import org.npp.model.common.VersionedReference;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import jakarta.annotation.Generated;

/**
 * A generalised component of a place hierarchy, that forms one element in the tree-like hierarchy.  This forms a reusable block of the hierarchy, with relations to its parent element (if one exists) and any child elements.  Each Place element in the hierarchy shall have a name, and may support a free-text description and an operator/property owner defined reference (e.g. location number/identifier)&#39;
 */

@Schema(name = "HierarchyElement", description = "A generalised component of a place hierarchy, that forms one element in the tree-like hierarchy.  This forms a reusable block of the hierarchy, with relations to its parent element (if one exists) and any child elements.  Each Place element in the hierarchy shall have a name, and may support a free-text description and an operator/property owner defined reference (e.g. location number/identifier)'")
@JsonIgnoreProperties(
  value = "hierarchyElementType", // ignore manually set hierarchyElementType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the hierarchyElementType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "hierarchyElementType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = Campus.class, name = "Campus"),
  @JsonSubTypes.Type(value = IdentifiedArea.class, name = "IdentifiedArea"),
  @JsonSubTypes.Type(value = Place.class, name = "Place"),
  @JsonSubTypes.Type(value = Space.class, name = "Space"),
  @JsonSubTypes.Type(value = SubPlaceElement.class, name = "SubPlaceElement"),
  @JsonSubTypes.Type(value = SupplementalEquipment.class, name = "SupplementalEquipment"),
  @JsonSubTypes.Type(value = SupplementalServiceFacility.class, name = "SupplementalServiceFacility"),
  @JsonSubTypes.Type(value = ElectricChargingEquipment.class, name = "ElectricChargingEquipment"),
  @JsonSubTypes.Type(value = SpecificArea.class, name = "SpecificArea"),
  @JsonSubTypes.Type(value = SupplementalFacility.class, name = "SupplementalFacility"),
  @JsonSubTypes.Type(value = VehicularAccess.class, name = "VehicularAccess")
})


public class HierarchyElement {

  private String id;

  private Integer version;

  /**
   * Discriminator for children classes
   */
  public enum HierarchyElementTypeEnum {
    CAMPUS("Campus"),
    
    IDENTIFIEDAREA("IdentifiedArea"),
    
    PLACE("Place"),
    
    SPACE("Space"),
    
    SUBPLACEELEMENT("SubPlaceElement"),
    
    SUPPLEMENTALEQUIPMENT("SupplementalEquipment"),
    
    SUPPLEMENTALSERVICEFACILITY("SupplementalServiceFacility");

    private String value;

    HierarchyElementTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HierarchyElementTypeEnum fromValue(String value) {
      for (HierarchyElementTypeEnum b : HierarchyElementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private HierarchyElementTypeEnum hierarchyElementType;

  @Valid
  private List<@Valid SpecificLanguageString> name = new ArrayList<>();

  @Valid
  private List<@Valid SpecificLanguageString> description;

  private Integer layer;

  private HierarchyElementTypeEnum type;

  @Valid
  private List<@Valid List<@Valid SpecificLanguageString>> aliases;

  private VersionedReference parentId;

  @Valid
  private List<@Valid VersionedReference> childIds;

  @Valid
  private List<@Valid SpecificLanguageString> operatorDefinedReference;

  private HierarchyElementRecord hierarchyElementRecord;

  @Valid
  private List<@Valid VersionedReference> rightSpecifications;

  private HierarchyElementReference hierarchyElementReference;

  private OccupancyLevel occupancyLevel;

  public HierarchyElement() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public HierarchyElement(String id, Integer version, HierarchyElementTypeEnum hierarchyElementType, List<@Valid SpecificLanguageString> name, Integer layer, HierarchyElementTypeEnum type, HierarchyElementRecord hierarchyElementRecord) {
    this.id = id;
    this.version = version;
    this.hierarchyElementType = hierarchyElementType;
    this.name = name;
    this.layer = layer;
    this.type = type;
    this.hierarchyElementRecord = hierarchyElementRecord;
  }

  public HierarchyElement id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for object.
   * @return id
  */
  @NotNull @Size(min = 1) 
  @Schema(name = "id", description = "Unique identifier for object.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("id")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public HierarchyElement version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Positive integer representing the object version.
   * minimum: 1
   * @return version
  */
  @NotNull @Min(1) 
  @Schema(name = "version", description = "Positive integer representing the object version.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("version")
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }

  public HierarchyElement hierarchyElementType(HierarchyElementTypeEnum hierarchyElementType) {
    this.hierarchyElementType = hierarchyElementType;
    return this;
  }

  /**
   * Discriminator for children classes
   * @return hierarchyElementType
  */
  @NotNull 
  @Schema(name = "hierarchyElementType", description = "Discriminator for children classes", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("hierarchyElementType")
  public HierarchyElementTypeEnum getHierarchyElementType() {
    return hierarchyElementType;
  }

  public void setHierarchyElementType(HierarchyElementTypeEnum hierarchyElementType) {
    this.hierarchyElementType = hierarchyElementType;
  }

  public HierarchyElement name(List<@Valid SpecificLanguageString> name) {
    this.name = name;
    return this;
  }

  public HierarchyElement addNameItem(SpecificLanguageString nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<>();
    }
    this.name.add(nameItem);
    return this;
  }

  /**
   * Multilingual string, represented as an array of SpecificLanguageString objects.
   * @return name
  */
  @NotNull @Valid 
  @Schema(name = "name", description = "Multilingual string, represented as an array of SpecificLanguageString objects.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("name")
  public List<@Valid SpecificLanguageString> getName() {
    return name;
  }

  public void setName(List<@Valid SpecificLanguageString> name) {
    this.name = name;
  }

  public HierarchyElement description(List<@Valid SpecificLanguageString> description) {
    this.description = description;
    return this;
  }

  public HierarchyElement addDescriptionItem(SpecificLanguageString descriptionItem) {
    if (this.description == null) {
      this.description = new ArrayList<>();
    }
    this.description.add(descriptionItem);
    return this;
  }

  /**
   * Multilingual string, represented as an array of SpecificLanguageString objects.
   * @return description
  */
  @Valid 
  @Schema(name = "description", description = "Multilingual string, represented as an array of SpecificLanguageString objects.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("description")
  public List<@Valid SpecificLanguageString> getDescription() {
    return description;
  }

  public void setDescription(List<@Valid SpecificLanguageString> description) {
    this.description = description;
  }

  public HierarchyElement layer(Integer layer) {
    this.layer = layer;
    return this;
  }

  /**
   * Indicator of the position of this hierarchy element in the specific hierarchy, with the top of the hierarchy numbered layer 0.
   * minimum: 0
   * @return layer
  */
  @NotNull @Min(0) 
  @Schema(name = "layer", description = "Indicator of the position of this hierarchy element in the specific hierarchy, with the top of the hierarchy numbered layer 0.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("layer")
  public Integer getLayer() {
    return layer;
  }

  public void setLayer(Integer layer) {
    this.layer = layer;
  }

  public HierarchyElement type(HierarchyElementTypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
  */
  @NotNull @Valid 
  @Schema(name = "type", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("type")
  public HierarchyElementTypeEnum getType() {
    return type;
  }

  public void setType(HierarchyElementTypeEnum type) {
    this.type = type;
  }

  public HierarchyElement aliases(List<@Valid List<@Valid SpecificLanguageString>> aliases) {
    this.aliases = aliases;
    return this;
  }

  public HierarchyElement addAliasesItem(List<@Valid SpecificLanguageString> aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

  /**
   * Alternative names for the hierarchy element.
   * @return aliases
  */
  @Valid 
  @Schema(name = "aliases", description = "Alternative names for the hierarchy element.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("aliases")
  public List<@Valid List<@Valid SpecificLanguageString>> getAliases() {
    return aliases;
  }

  public void setAliases(List<@Valid List<@Valid SpecificLanguageString>> aliases) {
    this.aliases = aliases;
  }

  public HierarchyElement parentId(VersionedReference parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Get parentId
   * @return parentId
  */
  @Valid 
  @Schema(name = "parentId", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("parentId")
  public VersionedReference getParentId() {
    return parentId;
  }

  public void setParentId(VersionedReference parentId) {
    this.parentId = parentId;
  }

  public HierarchyElement childIds(List<@Valid VersionedReference> childIds) {
    this.childIds = childIds;
    return this;
  }

  public HierarchyElement addChildIdsItem(VersionedReference childIdsItem) {
    if (this.childIds == null) {
      this.childIds = new ArrayList<>();
    }
    this.childIds.add(childIdsItem);
    return this;
  }

  /**
   * The identity of one or several child nodes directly related to this hierarchy element.
   * @return childIds
  */
  @Valid 
  @Schema(name = "childIds", description = "The identity of one or several child nodes directly related to this hierarchy element.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("childIds")
  public List<@Valid VersionedReference> getChildIds() {
    return childIds;
  }

  public void setChildIds(List<@Valid VersionedReference> childIds) {
    this.childIds = childIds;
  }

  public HierarchyElement operatorDefinedReference(List<@Valid SpecificLanguageString> operatorDefinedReference) {
    this.operatorDefinedReference = operatorDefinedReference;
    return this;
  }

  public HierarchyElement addOperatorDefinedReferenceItem(SpecificLanguageString operatorDefinedReferenceItem) {
    if (this.operatorDefinedReference == null) {
      this.operatorDefinedReference = new ArrayList<>();
    }
    this.operatorDefinedReference.add(operatorDefinedReferenceItem);
    return this;
  }

  /**
   * Multilingual string, represented as an array of SpecificLanguageString objects.
   * @return operatorDefinedReference
  */
  @Valid 
  @Schema(name = "operatorDefinedReference", description = "Multilingual string, represented as an array of SpecificLanguageString objects.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("operatorDefinedReference")
  public List<@Valid SpecificLanguageString> getOperatorDefinedReference() {
    return operatorDefinedReference;
  }

  public void setOperatorDefinedReference(List<@Valid SpecificLanguageString> operatorDefinedReference) {
    this.operatorDefinedReference = operatorDefinedReference;
  }

  public HierarchyElement hierarchyElementRecord(HierarchyElementRecord hierarchyElementRecord) {
    this.hierarchyElementRecord = hierarchyElementRecord;
    return this;
  }

  /**
   * Get hierarchyElementRecord
   * @return hierarchyElementRecord
  */
  @NotNull @Valid 
  @Schema(name = "hierarchyElementRecord", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("hierarchyElementRecord")
  public HierarchyElementRecord getHierarchyElementRecord() {
    return hierarchyElementRecord;
  }

  public void setHierarchyElementRecord(HierarchyElementRecord hierarchyElementRecord) {
    this.hierarchyElementRecord = hierarchyElementRecord;
  }

  public HierarchyElement rightSpecifications(List<@Valid VersionedReference> rightSpecifications) {
    this.rightSpecifications = rightSpecifications;
    return this;
  }

  public HierarchyElement addRightSpecificationsItem(VersionedReference rightSpecificationsItem) {
    if (this.rightSpecifications == null) {
      this.rightSpecifications = new ArrayList<>();
    }
    this.rightSpecifications.add(rightSpecificationsItem);
    return this;
  }

  /**
   * RightSpecifications associated to the element
   * @return rightSpecifications
  */
  @Valid 
  @Schema(name = "rightSpecifications", description = "RightSpecifications associated to the element", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("rightSpecifications")
  public List<@Valid VersionedReference> getRightSpecifications() {
    return rightSpecifications;
  }

  public void setRightSpecifications(List<@Valid VersionedReference> rightSpecifications) {
    this.rightSpecifications = rightSpecifications;
  }

  public HierarchyElement hierarchyElementReference(HierarchyElementReference hierarchyElementReference) {
    this.hierarchyElementReference = hierarchyElementReference;
    return this;
  }

  /**
   * Get hierarchyElementReference
   * @return hierarchyElementReference
  */
  @Valid 
  @Schema(name = "hierarchyElementReference", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("hierarchyElementReference")
  public HierarchyElementReference getHierarchyElementReference() {
    return hierarchyElementReference;
  }

  public void setHierarchyElementReference(HierarchyElementReference hierarchyElementReference) {
    this.hierarchyElementReference = hierarchyElementReference;
  }

  public HierarchyElement occupancyLevel(OccupancyLevel occupancyLevel) {
    this.occupancyLevel = occupancyLevel;
    return this;
  }

  /**
   * Get occupancyLevel
   * @return occupancyLevel
  */
  @Valid 
  @Schema(name = "occupancyLevel", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("occupancyLevel")
  public OccupancyLevel getOccupancyLevel() {
    return occupancyLevel;
  }

  public void setOccupancyLevel(OccupancyLevel occupancyLevel) {
    this.occupancyLevel = occupancyLevel;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HierarchyElement hierarchyElement = (HierarchyElement) o;
    return Objects.equals(this.id, hierarchyElement.id) &&
        Objects.equals(this.version, hierarchyElement.version) &&
        Objects.equals(this.hierarchyElementType, hierarchyElement.hierarchyElementType) &&
        Objects.equals(this.name, hierarchyElement.name) &&
        Objects.equals(this.description, hierarchyElement.description) &&
        Objects.equals(this.layer, hierarchyElement.layer) &&
        Objects.equals(this.type, hierarchyElement.type) &&
        Objects.equals(this.aliases, hierarchyElement.aliases) &&
        Objects.equals(this.parentId, hierarchyElement.parentId) &&
        Objects.equals(this.childIds, hierarchyElement.childIds) &&
        Objects.equals(this.operatorDefinedReference, hierarchyElement.operatorDefinedReference) &&
        Objects.equals(this.hierarchyElementRecord, hierarchyElement.hierarchyElementRecord) &&
        Objects.equals(this.rightSpecifications, hierarchyElement.rightSpecifications) &&
        Objects.equals(this.hierarchyElementReference, hierarchyElement.hierarchyElementReference) &&
        Objects.equals(this.occupancyLevel, hierarchyElement.occupancyLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, version, hierarchyElementType, name, description, layer, type, aliases, parentId, childIds, operatorDefinedReference, hierarchyElementRecord, rightSpecifications, hierarchyElementReference, occupancyLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HierarchyElement {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    hierarchyElementType: ").append(toIndentedString(hierarchyElementType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    layer: ").append(toIndentedString(layer)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    childIds: ").append(toIndentedString(childIds)).append("\n");
    sb.append("    operatorDefinedReference: ").append(toIndentedString(operatorDefinedReference)).append("\n");
    sb.append("    hierarchyElementRecord: ").append(toIndentedString(hierarchyElementRecord)).append("\n");
    sb.append("    rightSpecifications: ").append(toIndentedString(rightSpecifications)).append("\n");
    sb.append("    hierarchyElementReference: ").append(toIndentedString(hierarchyElementReference)).append("\n");
    sb.append("    occupancyLevel: ").append(toIndentedString(occupancyLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

