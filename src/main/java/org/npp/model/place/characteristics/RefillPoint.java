package org.npp.model.place.characteristics;
  
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.npp.model.place.enums.AuthenticationAndIdentificationEnum;
import org.npp.model.place.enums.DeliveryUnitEnum;
import org.npp.model.place.enums.ReservationTypeEnum;
import org.npp.model.place.enums.ServiceTypeEnum;
import org.npp.model.common.SpecificLanguageString;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import jakarta.annotation.Generated;

/**
 * Technical infrastructure at a specific location that facilitates an energy refilling process being connected  to max. one vehicle at a time.
 */

@Schema(name = "RefillPoint", description = "Technical infrastructure at a specific location that facilitates an energy refilling process being connected  to max. one vehicle at a time.")
@JsonIgnoreProperties(
  value = "metaType", // ignore manually set metaType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the metaType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "metaType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ElectricChargingPoint.class, name = "ElectricChargingPoint")
})


public class RefillPoint {

  /**
   * Gets or Sets metaType
   */
  public enum MetaTypeEnum {
    ELECTRICCHARGINGPOINT("ElectricChargingPoint");

    private String value;

    MetaTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MetaTypeEnum fromValue(String value) {
      for (MetaTypeEnum b : MetaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private MetaTypeEnum metaType;

  @Valid
  private List<@Valid AuthenticationAndIdentificationEnum> authenticationAndIdentificationMethods;

  @Valid
  private List<@Valid String> currencyOverride;

  private DeliveryUnitEnum deliveryUnit;

  private BigDecimal minimumDeliveryAmount;

  private BigDecimal maximumDeliveryAmount;

  @Valid
  private List<@Valid SpecificLanguageString> modelType;

  private Integer refillPointIndex;

  private ReservationTypeEnum reservationType;

  @Valid
  private List<@Valid ServiceTypeEnum> serviceType;

  @Valid
  private List<@Valid String> userInterfaceLanguage;

  public RefillPoint() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public RefillPoint(Integer refillPointIndex) {
    this.refillPointIndex = refillPointIndex;
  }

  public RefillPoint metaType(MetaTypeEnum metaType) {
    this.metaType = metaType;
    return this;
  }

  /**
   * Get metaType
   * @return metaType
  */
  
  @Schema(name = "metaType", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("metaType")
  public MetaTypeEnum getMetaType() {
    return metaType;
  }

  public void setMetaType(MetaTypeEnum metaType) {
    this.metaType = metaType;
  }

  public RefillPoint authenticationAndIdentificationMethods(List<@Valid AuthenticationAndIdentificationEnum> authenticationAndIdentificationMethods) {
    this.authenticationAndIdentificationMethods = authenticationAndIdentificationMethods;
    return this;
  }

  public RefillPoint addAuthenticationAndIdentificationMethodsItem(AuthenticationAndIdentificationEnum authenticationAndIdentificationMethodsItem) {
    if (this.authenticationAndIdentificationMethods == null) {
      this.authenticationAndIdentificationMethods = new ArrayList<>();
    }
    this.authenticationAndIdentificationMethods.add(authenticationAndIdentificationMethodsItem);
    return this;
  }

  /**
   * Information on what methods of identification and/or authentication are accepted
   * @return authenticationAndIdentificationMethods
  */
  @Valid 
  @Schema(name = "authenticationAndIdentificationMethods", description = "Information on what methods of identification and/or authentication are accepted", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("authenticationAndIdentificationMethods")
  public List<@Valid AuthenticationAndIdentificationEnum> getAuthenticationAndIdentificationMethods() {
    return authenticationAndIdentificationMethods;
  }

  public void setAuthenticationAndIdentificationMethods(List<@Valid AuthenticationAndIdentificationEnum> authenticationAndIdentificationMethods) {
    this.authenticationAndIdentificationMethods = authenticationAndIdentificationMethods;
  }

  public RefillPoint currencyOverride(List<@Valid String> currencyOverride) {
    this.currencyOverride = currencyOverride;
    return this;
  }

  public RefillPoint addCurrencyOverrideItem(String currencyOverrideItem) {
    if (this.currencyOverride == null) {
      this.currencyOverride = new ArrayList<>();
    }
    this.currencyOverride.add(currencyOverrideItem);
    return this;
  }

  /**
   * Information on which currency/currencies can be used to pay
   * @return currencyOverride
  */
  
  @Schema(name = "currencyOverride", description = "Information on which currency/currencies can be used to pay", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("currencyOverride")
  public List<@Valid String> getCurrencyOverride() {
    return currencyOverride;
  }

  public void setCurrencyOverride(List<@Valid String> currencyOverride) {
    this.currencyOverride = currencyOverride;
  }

  public RefillPoint deliveryUnit(DeliveryUnitEnum deliveryUnit) {
    this.deliveryUnit = deliveryUnit;
    return this;
  }

  /**
   * Get deliveryUnit
   * @return deliveryUnit
  */
  @Valid 
  @Schema(name = "deliveryUnit", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("deliveryUnit")
  public DeliveryUnitEnum getDeliveryUnit() {
    return deliveryUnit;
  }

  public void setDeliveryUnit(DeliveryUnitEnum deliveryUnit) {
    this.deliveryUnit = deliveryUnit;
  }

  public RefillPoint minimumDeliveryAmount(BigDecimal minimumDeliveryAmount) {
    this.minimumDeliveryAmount = minimumDeliveryAmount;
    return this;
  }

  /**
   * Amount in units,which are specified by unitTypeEnum.
   * @return minimumDeliveryAmount
  */
  @Valid 
  @Schema(name = "minimumDeliveryAmount", description = "Amount in units,which are specified by unitTypeEnum.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("minimumDeliveryAmount")
  public BigDecimal getMinimumDeliveryAmount() {
    return minimumDeliveryAmount;
  }

  public void setMinimumDeliveryAmount(BigDecimal minimumDeliveryAmount) {
    this.minimumDeliveryAmount = minimumDeliveryAmount;
  }

  public RefillPoint maximumDeliveryAmount(BigDecimal maximumDeliveryAmount) {
    this.maximumDeliveryAmount = maximumDeliveryAmount;
    return this;
  }

  /**
   * Amount in units,which are specified by unitTypeEnum.
   * @return maximumDeliveryAmount
  */
  @Valid 
  @Schema(name = "maximumDeliveryAmount", description = "Amount in units,which are specified by unitTypeEnum.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("maximumDeliveryAmount")
  public BigDecimal getMaximumDeliveryAmount() {
    return maximumDeliveryAmount;
  }

  public void setMaximumDeliveryAmount(BigDecimal maximumDeliveryAmount) {
    this.maximumDeliveryAmount = maximumDeliveryAmount;
  }

  public RefillPoint modelType(List<@Valid SpecificLanguageString> modelType) {
    this.modelType = modelType;
    return this;
  }

  public RefillPoint addModelTypeItem(SpecificLanguageString modelTypeItem) {
    if (this.modelType == null) {
      this.modelType = new ArrayList<>();
    }
    this.modelType.add(modelTypeItem);
    return this;
  }

  /**
   * Multilingual string, represented as an array of SpecificLanguageString objects.
   * @return modelType
  */
  @Valid 
  @Schema(name = "modelType", description = "Multilingual string, represented as an array of SpecificLanguageString objects.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("modelType")
  public List<@Valid SpecificLanguageString> getModelType() {
    return modelType;
  }

  public void setModelType(List<@Valid SpecificLanguageString> modelType) {
    this.modelType = modelType;
  }

  public RefillPoint refillPointIndex(Integer refillPointIndex) {
    this.refillPointIndex = refillPointIndex;
    return this;
  }

  /**
   * An index to link this element between the static and dynamic publications.
   * @return refillPointIndex
  */
  @NotNull 
  @Schema(name = "refillPointIndex", description = "An index to link this element between the static and dynamic publications.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("refillPointIndex")
  public Integer getRefillPointIndex() {
    return refillPointIndex;
  }

  public void setRefillPointIndex(Integer refillPointIndex) {
    this.refillPointIndex = refillPointIndex;
  }

  public RefillPoint reservationType(ReservationTypeEnum reservationType) {
    this.reservationType = reservationType;
    return this;
  }

  /**
   * Get reservationType
   * @return reservationType
  */
  @Valid 
  @Schema(name = "reservationType", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("reservationType")
  public ReservationTypeEnum getReservationType() {
    return reservationType;
  }

  public void setReservationType(ReservationTypeEnum reservationType) {
    this.reservationType = reservationType;
  }

  public RefillPoint serviceType(List<@Valid ServiceTypeEnum> serviceType) {
    this.serviceType = serviceType;
    return this;
  }

  public RefillPoint addServiceTypeItem(ServiceTypeEnum serviceTypeItem) {
    if (this.serviceType == null) {
      this.serviceType = new ArrayList<>();
    }
    this.serviceType.add(serviceTypeItem);
    return this;
  }

  /**
   * Information on different service types for the fuelling/charging and payment process.
   * @return serviceType
  */
  @Valid 
  @Schema(name = "serviceType", description = "Information on different service types for the fuelling/charging and payment process.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("serviceType")
  public List<@Valid ServiceTypeEnum> getServiceType() {
    return serviceType;
  }

  public void setServiceType(List<@Valid ServiceTypeEnum> serviceType) {
    this.serviceType = serviceType;
  }

  public RefillPoint userInterfaceLanguage(List<@Valid String> userInterfaceLanguage) {
    this.userInterfaceLanguage = userInterfaceLanguage;
    return this;
  }

  public RefillPoint addUserInterfaceLanguageItem(String userInterfaceLanguageItem) {
    if (this.userInterfaceLanguage == null) {
      this.userInterfaceLanguage = new ArrayList<>();
    }
    this.userInterfaceLanguage.add(userInterfaceLanguageItem);
    return this;
  }

  /**
   * Languages, in which a user interface is available, if any
   * @return userInterfaceLanguage
  */
  
  @Schema(name = "userInterfaceLanguage", description = "Languages, in which a user interface is available, if any", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("userInterfaceLanguage")
  public List<@Valid String> getUserInterfaceLanguage() {
    return userInterfaceLanguage;
  }

  public void setUserInterfaceLanguage(List<@Valid String> userInterfaceLanguage) {
    this.userInterfaceLanguage = userInterfaceLanguage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefillPoint refillPoint = (RefillPoint) o;
    return Objects.equals(this.metaType, refillPoint.metaType) &&
        Objects.equals(this.authenticationAndIdentificationMethods, refillPoint.authenticationAndIdentificationMethods) &&
        Objects.equals(this.currencyOverride, refillPoint.currencyOverride) &&
        Objects.equals(this.deliveryUnit, refillPoint.deliveryUnit) &&
        Objects.equals(this.minimumDeliveryAmount, refillPoint.minimumDeliveryAmount) &&
        Objects.equals(this.maximumDeliveryAmount, refillPoint.maximumDeliveryAmount) &&
        Objects.equals(this.modelType, refillPoint.modelType) &&
        Objects.equals(this.refillPointIndex, refillPoint.refillPointIndex) &&
        Objects.equals(this.reservationType, refillPoint.reservationType) &&
        Objects.equals(this.serviceType, refillPoint.serviceType) &&
        Objects.equals(this.userInterfaceLanguage, refillPoint.userInterfaceLanguage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metaType, authenticationAndIdentificationMethods, currencyOverride, deliveryUnit, minimumDeliveryAmount, maximumDeliveryAmount, modelType, refillPointIndex, reservationType, serviceType, userInterfaceLanguage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefillPoint {\n");
    sb.append("    metaType: ").append(toIndentedString(metaType)).append("\n");
    sb.append("    authenticationAndIdentificationMethods: ").append(toIndentedString(authenticationAndIdentificationMethods)).append("\n");
    sb.append("    currencyOverride: ").append(toIndentedString(currencyOverride)).append("\n");
    sb.append("    deliveryUnit: ").append(toIndentedString(deliveryUnit)).append("\n");
    sb.append("    minimumDeliveryAmount: ").append(toIndentedString(minimumDeliveryAmount)).append("\n");
    sb.append("    maximumDeliveryAmount: ").append(toIndentedString(maximumDeliveryAmount)).append("\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("    refillPointIndex: ").append(toIndentedString(refillPointIndex)).append("\n");
    sb.append("    reservationType: ").append(toIndentedString(reservationType)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    userInterfaceLanguage: ").append(toIndentedString(userInterfaceLanguage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

