package org.npp.model.place.location;
  
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.npp.model.common.SpecificLanguageString;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import jakarta.annotation.Generated;

/**
 * An area defined by a name and/or in terms of known boundaries, such as country or county boundaries or allocated control area of particular authority.  The attributes do not form a union; instead, the smallest intersection forms the resulting area.
 */

@Schema(name = "NamedArea", description = "An area defined by a name and/or in terms of known boundaries, such as country or county boundaries or allocated control area of particular authority.  The attributes do not form a union; instead, the smallest intersection forms the resulting area.")
@JsonIgnoreProperties(
  value = "namedAreaType", // ignore manually set namedAreaType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the namedAreaType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "namedAreaType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = IsoNamedArea.class, name = "IsoNamedArea"),
  @JsonSubTypes.Type(value = NutsNamedArea.class, name = "NutsNamedArea")
})


public class NamedArea {

  /**
   * The type of NamedArea
   */
  public enum NamedAreaTypeEnum {
    ISONAMEDAREA("IsoNamedArea"),
    
    NUTSNAMEDAREA("NutsNamedArea");

    private String value;

    NamedAreaTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NamedAreaTypeEnum fromValue(String value) {
      for (NamedAreaTypeEnum b : NamedAreaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private NamedAreaTypeEnum namedAreaType;

  @Valid
  private List<@Valid SpecificLanguageString> areaName = new ArrayList<>();

  private String country;

  public NamedArea() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public NamedArea(NamedAreaTypeEnum namedAreaType, List<@Valid SpecificLanguageString> areaName) {
    this.namedAreaType = namedAreaType;
    this.areaName = areaName;
  }

  public NamedArea namedAreaType(NamedAreaTypeEnum namedAreaType) {
    this.namedAreaType = namedAreaType;
    return this;
  }

  /**
   * The type of NamedArea
   * @return namedAreaType
  */
  @NotNull 
  @Schema(name = "namedAreaType", description = "The type of NamedArea", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("namedAreaType")
  public NamedAreaTypeEnum getNamedAreaType() {
    return namedAreaType;
  }

  public void setNamedAreaType(NamedAreaTypeEnum namedAreaType) {
    this.namedAreaType = namedAreaType;
  }

  public NamedArea areaName(List<@Valid SpecificLanguageString> areaName) {
    this.areaName = areaName;
    return this;
  }

  public NamedArea addAreaNameItem(SpecificLanguageString areaNameItem) {
    if (this.areaName == null) {
      this.areaName = new ArrayList<>();
    }
    this.areaName.add(areaNameItem);
    return this;
  }

  /**
   * Multilingual string, represented as an array of SpecificLanguageString objects.
   * @return areaName
  */
  @NotNull @Valid 
  @Schema(name = "areaName", description = "Multilingual string, represented as an array of SpecificLanguageString objects.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("areaName")
  public List<@Valid SpecificLanguageString> getAreaName() {
    return areaName;
  }

  public void setAreaName(List<@Valid SpecificLanguageString> areaName) {
    this.areaName = areaName;
  }

  public NamedArea country(String country) {
    this.country = country;
    return this;
  }

  /**
   * EN ISO 3166-1 two-character country code.
   * @return country
  */
  @Pattern(regexp = "^[a-z]{2}$") 
  @Schema(name = "country", example = "es", description = "EN ISO 3166-1 two-character country code.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("country")
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NamedArea namedArea = (NamedArea) o;
    return Objects.equals(this.namedAreaType, namedArea.namedAreaType) &&
        Objects.equals(this.areaName, namedArea.areaName) &&
        Objects.equals(this.country, namedArea.country);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namedAreaType, areaName, country);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NamedArea {\n");
    sb.append("    namedAreaType: ").append(toIndentedString(namedAreaType)).append("\n");
    sb.append("    areaName: ").append(toIndentedString(areaName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

