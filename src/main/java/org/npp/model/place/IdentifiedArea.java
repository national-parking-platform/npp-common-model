package org.npp.model.place;
  
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.npp.model.place.characteristics.Address;
import org.npp.model.place.location.AreaLocation;
import org.npp.model.place.HierarchyElement;
import org.npp.model.place.HierarchyElementRecord;
import org.npp.model.place.HierarchyElementReference;
import org.npp.model.place.enums.HierarchyElementTypeEnum;
import org.npp.model.occupancy.OccupancyLevel;
import org.npp.model.place.characteristics.OperatingRestrictions;
import org.npp.model.place.location.PointLocation;
import org.npp.model.common.SpecificLanguageString;
import org.npp.model.time.Times;
import org.npp.model.common.VersionedReference;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import jakarta.annotation.Generated;

/**
 * An identifiable discrete bounded geographic zone that shares common characteristics and that may be used for  parking related or other purposes.  Identified Areas are segmented into two types : Vehicular Access class and Specific Area class.
 */

@Schema(name = "IdentifiedArea", description = "An identifiable discrete bounded geographic zone that shares common characteristics and that may be used for  parking related or other purposes.  Identified Areas are segmented into two types : Vehicular Access class and Specific Area class.")
@JsonIgnoreProperties(
  value = "identifiedAreaType", // ignore manually set identifiedAreaType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the identifiedAreaType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "identifiedAreaType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = SpecificArea.class, name = "SpecificArea"),
  @JsonSubTypes.Type(value = SupplementalFacility.class, name = "SupplementalFacility"),
  @JsonSubTypes.Type(value = VehicularAccess.class, name = "VehicularAccess"),
  @JsonSubTypes.Type(value = ElectricChargingEquipment.class, name = "ElectricChargingEquipment"),
  @JsonSubTypes.Type(value = SupplementalEquipment.class, name = "SupplementalEquipment"),
  @JsonSubTypes.Type(value = SupplementalServiceFacility.class, name = "SupplementalServiceFacility")
})


public class IdentifiedArea extends HierarchyElement {

  /**
   * The identified area type
   */
  public enum IdentifiedAreaTypeEnum {
    SPECIFICAREA("SpecificArea"),
    
    SUPPLEMENTALFACILITY("SupplementalFacility"),
    
    VEHICULARACCESS("VehicularAccess");

    private String value;

    IdentifiedAreaTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IdentifiedAreaTypeEnum fromValue(String value) {
      for (IdentifiedAreaTypeEnum b : IdentifiedAreaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private IdentifiedAreaTypeEnum identifiedAreaType;

  @Valid
  private List<@Valid Address> streetAddress;

  @Valid
  private List<@Valid AreaLocation> areaBoundedZone;

  @Valid
  private List<@Valid PointLocation> indicativeIdentifiedAreaPointLocation;

  private Times times;

  @Valid
  private List<@Valid OperatingRestrictions> operatingRestrictions;

  public IdentifiedArea() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public IdentifiedArea(IdentifiedAreaTypeEnum identifiedAreaType, String id, Integer version, HierarchyElementTypeEnum hierarchyElementType, List<@Valid SpecificLanguageString> name, Integer layer, HierarchyElementTypeEnum type, HierarchyElementRecord hierarchyElementRecord) {
    super(id, version, hierarchyElementType, name, layer, type, hierarchyElementRecord);
    this.identifiedAreaType = identifiedAreaType;
  }

  public IdentifiedArea identifiedAreaType(IdentifiedAreaTypeEnum identifiedAreaType) {
    this.identifiedAreaType = identifiedAreaType;
    return this;
  }

  /**
   * The identified area type
   * @return identifiedAreaType
  */
  @NotNull 
  @Schema(name = "identifiedAreaType", description = "The identified area type", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("identifiedAreaType")
  public IdentifiedAreaTypeEnum getIdentifiedAreaType() {
    return identifiedAreaType;
  }

  public void setIdentifiedAreaType(IdentifiedAreaTypeEnum identifiedAreaType) {
    this.identifiedAreaType = identifiedAreaType;
  }

  public IdentifiedArea streetAddress(List<@Valid Address> streetAddress) {
    this.streetAddress = streetAddress;
    return this;
  }

  public IdentifiedArea addStreetAddressItem(Address streetAddressItem) {
    if (this.streetAddress == null) {
      this.streetAddress = new ArrayList<>();
    }
    this.streetAddress.add(streetAddressItem);
    return this;
  }

  /**
   * Identified area street address.
   * @return streetAddress
  */
  @Valid 
  @Schema(name = "streetAddress", description = "Identified area street address.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("streetAddress")
  public List<@Valid Address> getStreetAddress() {
    return streetAddress;
  }

  public void setStreetAddress(List<@Valid Address> streetAddress) {
    this.streetAddress = streetAddress;
  }

  public IdentifiedArea areaBoundedZone(List<@Valid AreaLocation> areaBoundedZone) {
    this.areaBoundedZone = areaBoundedZone;
    return this;
  }

  public IdentifiedArea addAreaBoundedZoneItem(AreaLocation areaBoundedZoneItem) {
    if (this.areaBoundedZone == null) {
      this.areaBoundedZone = new ArrayList<>();
    }
    this.areaBoundedZone.add(areaBoundedZoneItem);
    return this;
  }

  /**
   * Identified area bounded zone.
   * @return areaBoundedZone
  */
  @Valid 
  @Schema(name = "areaBoundedZone", description = "Identified area bounded zone.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("areaBoundedZone")
  public List<@Valid AreaLocation> getAreaBoundedZone() {
    return areaBoundedZone;
  }

  public void setAreaBoundedZone(List<@Valid AreaLocation> areaBoundedZone) {
    this.areaBoundedZone = areaBoundedZone;
  }

  public IdentifiedArea indicativeIdentifiedAreaPointLocation(List<@Valid PointLocation> indicativeIdentifiedAreaPointLocation) {
    this.indicativeIdentifiedAreaPointLocation = indicativeIdentifiedAreaPointLocation;
    return this;
  }

  public IdentifiedArea addIndicativeIdentifiedAreaPointLocationItem(PointLocation indicativeIdentifiedAreaPointLocationItem) {
    if (this.indicativeIdentifiedAreaPointLocation == null) {
      this.indicativeIdentifiedAreaPointLocation = new ArrayList<>();
    }
    this.indicativeIdentifiedAreaPointLocation.add(indicativeIdentifiedAreaPointLocationItem);
    return this;
  }

  /**
   * Indicative identified area point location.
   * @return indicativeIdentifiedAreaPointLocation
  */
  @Valid 
  @Schema(name = "indicativeIdentifiedAreaPointLocation", description = "Indicative identified area point location.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("indicativeIdentifiedAreaPointLocation")
  public List<@Valid PointLocation> getIndicativeIdentifiedAreaPointLocation() {
    return indicativeIdentifiedAreaPointLocation;
  }

  public void setIndicativeIdentifiedAreaPointLocation(List<@Valid PointLocation> indicativeIdentifiedAreaPointLocation) {
    this.indicativeIdentifiedAreaPointLocation = indicativeIdentifiedAreaPointLocation;
  }

  public IdentifiedArea times(Times times) {
    this.times = times;
    return this;
  }

  /**
   * Get times
   * @return times
  */
  @Valid 
  @Schema(name = "times", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("times")
  public Times getTimes() {
    return times;
  }

  public void setTimes(Times times) {
    this.times = times;
  }

  public IdentifiedArea operatingRestrictions(List<@Valid OperatingRestrictions> operatingRestrictions) {
    this.operatingRestrictions = operatingRestrictions;
    return this;
  }

  public IdentifiedArea addOperatingRestrictionsItem(OperatingRestrictions operatingRestrictionsItem) {
    if (this.operatingRestrictions == null) {
      this.operatingRestrictions = new ArrayList<>();
    }
    this.operatingRestrictions.add(operatingRestrictionsItem);
    return this;
  }

  /**
   * Operating restrictions
   * @return operatingRestrictions
  */
  @Valid 
  @Schema(name = "operatingRestrictions", description = "Operating restrictions", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("operatingRestrictions")
  public List<@Valid OperatingRestrictions> getOperatingRestrictions() {
    return operatingRestrictions;
  }

  public void setOperatingRestrictions(List<@Valid OperatingRestrictions> operatingRestrictions) {
    this.operatingRestrictions = operatingRestrictions;
  }


  public IdentifiedArea id(String id) {
    super.id(id);
    return this;
  }

  public IdentifiedArea version(Integer version) {
    super.version(version);
    return this;
  }

  public IdentifiedArea hierarchyElementType(HierarchyElementTypeEnum hierarchyElementType) {
    super.hierarchyElementType(hierarchyElementType);
    return this;
  }

  public IdentifiedArea name(List<@Valid SpecificLanguageString> name) {
    super.name(name);
    return this;
  }

  public IdentifiedArea addNameItem(SpecificLanguageString nameItem) {
    super.addNameItem(nameItem);
    return this;
  }

  public IdentifiedArea description(List<@Valid SpecificLanguageString> description) {
    super.description(description);
    return this;
  }

  public IdentifiedArea addDescriptionItem(SpecificLanguageString descriptionItem) {
    super.addDescriptionItem(descriptionItem);
    return this;
  }

  public IdentifiedArea layer(Integer layer) {
    super.layer(layer);
    return this;
  }

  public IdentifiedArea type(HierarchyElementTypeEnum type) {
    super.type(type);
    return this;
  }

  public IdentifiedArea aliases(List<@Valid List<@Valid SpecificLanguageString>> aliases) {
    super.aliases(aliases);
    return this;
  }

  public IdentifiedArea addAliasesItem(List<@Valid SpecificLanguageString> aliasesItem) {
    super.addAliasesItem(aliasesItem);
    return this;
  }

  public IdentifiedArea parentId(VersionedReference parentId) {
    super.parentId(parentId);
    return this;
  }

  public IdentifiedArea childIds(List<@Valid VersionedReference> childIds) {
    super.childIds(childIds);
    return this;
  }

  public IdentifiedArea addChildIdsItem(VersionedReference childIdsItem) {
    super.addChildIdsItem(childIdsItem);
    return this;
  }

  public IdentifiedArea operatorDefinedReference(List<@Valid SpecificLanguageString> operatorDefinedReference) {
    super.operatorDefinedReference(operatorDefinedReference);
    return this;
  }

  public IdentifiedArea addOperatorDefinedReferenceItem(SpecificLanguageString operatorDefinedReferenceItem) {
    super.addOperatorDefinedReferenceItem(operatorDefinedReferenceItem);
    return this;
  }

  public IdentifiedArea hierarchyElementRecord(HierarchyElementRecord hierarchyElementRecord) {
    super.hierarchyElementRecord(hierarchyElementRecord);
    return this;
  }

  public IdentifiedArea rightSpecifications(List<@Valid VersionedReference> rightSpecifications) {
    super.rightSpecifications(rightSpecifications);
    return this;
  }

  public IdentifiedArea addRightSpecificationsItem(VersionedReference rightSpecificationsItem) {
    super.addRightSpecificationsItem(rightSpecificationsItem);
    return this;
  }

  public IdentifiedArea hierarchyElementReference(HierarchyElementReference hierarchyElementReference) {
    super.hierarchyElementReference(hierarchyElementReference);
    return this;
  }

  public IdentifiedArea occupancyLevel(OccupancyLevel occupancyLevel) {
    super.occupancyLevel(occupancyLevel);
    return this;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentifiedArea identifiedArea = (IdentifiedArea) o;
    return Objects.equals(this.identifiedAreaType, identifiedArea.identifiedAreaType) &&
        Objects.equals(this.streetAddress, identifiedArea.streetAddress) &&
        Objects.equals(this.areaBoundedZone, identifiedArea.areaBoundedZone) &&
        Objects.equals(this.indicativeIdentifiedAreaPointLocation, identifiedArea.indicativeIdentifiedAreaPointLocation) &&
        Objects.equals(this.times, identifiedArea.times) &&
        Objects.equals(this.operatingRestrictions, identifiedArea.operatingRestrictions) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifiedAreaType, streetAddress, areaBoundedZone, indicativeIdentifiedAreaPointLocation, times, operatingRestrictions, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentifiedArea {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    identifiedAreaType: ").append(toIndentedString(identifiedAreaType)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("    areaBoundedZone: ").append(toIndentedString(areaBoundedZone)).append("\n");
    sb.append("    indicativeIdentifiedAreaPointLocation: ").append(toIndentedString(indicativeIdentifiedAreaPointLocation)).append("\n");
    sb.append("    times: ").append(toIndentedString(times)).append("\n");
    sb.append("    operatingRestrictions: ").append(toIndentedString(operatingRestrictions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

