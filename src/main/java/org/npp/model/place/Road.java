package org.npp.model.place;
  
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.npp.model.place.characteristics.LinearDimension;
import org.npp.model.place.enums.RoadTypeEnum;
import org.npp.model.common.SpecificLanguageString;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import jakarta.annotation.Generated;

/**
 * Identification of a road by its name, identifier, type...
 */

@Schema(name = "Road", description = "Identification of a road by its name, identifier, type...")
@JsonIgnoreProperties(
  value = "roadType", // ignore manually set roadType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the roadType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "roadType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = RoadNode.class, name = "RoadNode")
})


public class Road {

  /**
   * The road type
   */
  public enum RoadTypeEnum {
    ROADNODE("RoadNode");

    private String value;

    RoadTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RoadTypeEnum fromValue(String value) {
      for (RoadTypeEnum b : RoadTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private RoadTypeEnum roadType;

  private LinearDimension distanceToThisRoad;

  @Valid
  private List<@Valid SpecificLanguageString> nameOfRoad;

  @Valid
  private List<@Valid List<@Valid SpecificLanguageString>> roadDestination;

  @Valid
  private List<@Valid SpecificLanguageString> roadIdentifier;

  @Valid
  private List<@Valid List<@Valid SpecificLanguageString>> roadOrigination;

  private RoadTypeEnum typeOfRoad;

  public Road roadType(RoadTypeEnum roadType) {
    this.roadType = roadType;
    return this;
  }

  /**
   * The road type
   * @return roadType
  */
  
  @Schema(name = "roadType", description = "The road type", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("roadType")
  public RoadTypeEnum getRoadType() {
    return roadType;
  }

  public void setRoadType(RoadTypeEnum roadType) {
    this.roadType = roadType;
  }

  public Road distanceToThisRoad(LinearDimension distanceToThisRoad) {
    this.distanceToThisRoad = distanceToThisRoad;
    return this;
  }

  /**
   * Get distanceToThisRoad
   * @return distanceToThisRoad
  */
  @Valid 
  @Schema(name = "distanceToThisRoad", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("distanceToThisRoad")
  public LinearDimension getDistanceToThisRoad() {
    return distanceToThisRoad;
  }

  public void setDistanceToThisRoad(LinearDimension distanceToThisRoad) {
    this.distanceToThisRoad = distanceToThisRoad;
  }

  public Road nameOfRoad(List<@Valid SpecificLanguageString> nameOfRoad) {
    this.nameOfRoad = nameOfRoad;
    return this;
  }

  public Road addNameOfRoadItem(SpecificLanguageString nameOfRoadItem) {
    if (this.nameOfRoad == null) {
      this.nameOfRoad = new ArrayList<>();
    }
    this.nameOfRoad.add(nameOfRoadItem);
    return this;
  }

  /**
   * Multilingual string, represented as an array of SpecificLanguageString objects.
   * @return nameOfRoad
  */
  @Valid 
  @Schema(name = "nameOfRoad", description = "Multilingual string, represented as an array of SpecificLanguageString objects.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("nameOfRoad")
  public List<@Valid SpecificLanguageString> getNameOfRoad() {
    return nameOfRoad;
  }

  public void setNameOfRoad(List<@Valid SpecificLanguageString> nameOfRoad) {
    this.nameOfRoad = nameOfRoad;
  }

  public Road roadDestination(List<@Valid List<@Valid SpecificLanguageString>> roadDestination) {
    this.roadDestination = roadDestination;
    return this;
  }

  public Road addRoadDestinationItem(List<@Valid SpecificLanguageString> roadDestinationItem) {
    if (this.roadDestination == null) {
      this.roadDestination = new ArrayList<>();
    }
    this.roadDestination.add(roadDestinationItem);
    return this;
  }

  /**
   * Name of some city, area, compass direction or other identification the road is leading to (to determine the direction in question).
   * @return roadDestination
  */
  @Valid 
  @Schema(name = "roadDestination", description = "Name of some city, area, compass direction or other identification the road is leading to (to determine the direction in question).", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("roadDestination")
  public List<@Valid List<@Valid SpecificLanguageString>> getRoadDestination() {
    return roadDestination;
  }

  public void setRoadDestination(List<@Valid List<@Valid SpecificLanguageString>> roadDestination) {
    this.roadDestination = roadDestination;
  }

  public Road roadIdentifier(List<@Valid SpecificLanguageString> roadIdentifier) {
    this.roadIdentifier = roadIdentifier;
    return this;
  }

  public Road addRoadIdentifierItem(SpecificLanguageString roadIdentifierItem) {
    if (this.roadIdentifier == null) {
      this.roadIdentifier = new ArrayList<>();
    }
    this.roadIdentifier.add(roadIdentifierItem);
    return this;
  }

  /**
   * Multilingual string, represented as an array of SpecificLanguageString objects.
   * @return roadIdentifier
  */
  @Valid 
  @Schema(name = "roadIdentifier", description = "Multilingual string, represented as an array of SpecificLanguageString objects.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("roadIdentifier")
  public List<@Valid SpecificLanguageString> getRoadIdentifier() {
    return roadIdentifier;
  }

  public void setRoadIdentifier(List<@Valid SpecificLanguageString> roadIdentifier) {
    this.roadIdentifier = roadIdentifier;
  }

  public Road roadOrigination(List<@Valid List<@Valid SpecificLanguageString>> roadOrigination) {
    this.roadOrigination = roadOrigination;
    return this;
  }

  public Road addRoadOriginationItem(List<@Valid SpecificLanguageString> roadOriginationItem) {
    if (this.roadOrigination == null) {
      this.roadOrigination = new ArrayList<>();
    }
    this.roadOrigination.add(roadOriginationItem);
    return this;
  }

  /**
   * Name of some city, area, compass direction or other identification this road comes from.
   * @return roadOrigination
  */
  @Valid 
  @Schema(name = "roadOrigination", description = "Name of some city, area, compass direction or other identification this road comes from.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("roadOrigination")
  public List<@Valid List<@Valid SpecificLanguageString>> getRoadOrigination() {
    return roadOrigination;
  }

  public void setRoadOrigination(List<@Valid List<@Valid SpecificLanguageString>> roadOrigination) {
    this.roadOrigination = roadOrigination;
  }

  public Road typeOfRoad(RoadTypeEnum typeOfRoad) {
    this.typeOfRoad = typeOfRoad;
    return this;
  }

  /**
   * Get typeOfRoad
   * @return typeOfRoad
  */
  @Valid 
  @Schema(name = "typeOfRoad", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("typeOfRoad")
  public RoadTypeEnum getTypeOfRoad() {
    return typeOfRoad;
  }

  public void setTypeOfRoad(RoadTypeEnum typeOfRoad) {
    this.typeOfRoad = typeOfRoad;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Road road = (Road) o;
    return Objects.equals(this.roadType, road.roadType) &&
        Objects.equals(this.distanceToThisRoad, road.distanceToThisRoad) &&
        Objects.equals(this.nameOfRoad, road.nameOfRoad) &&
        Objects.equals(this.roadDestination, road.roadDestination) &&
        Objects.equals(this.roadIdentifier, road.roadIdentifier) &&
        Objects.equals(this.roadOrigination, road.roadOrigination) &&
        Objects.equals(this.typeOfRoad, road.typeOfRoad);
  }

  @Override
  public int hashCode() {
    return Objects.hash(roadType, distanceToThisRoad, nameOfRoad, roadDestination, roadIdentifier, roadOrigination, typeOfRoad);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Road {\n");
    sb.append("    roadType: ").append(toIndentedString(roadType)).append("\n");
    sb.append("    distanceToThisRoad: ").append(toIndentedString(distanceToThisRoad)).append("\n");
    sb.append("    nameOfRoad: ").append(toIndentedString(nameOfRoad)).append("\n");
    sb.append("    roadDestination: ").append(toIndentedString(roadDestination)).append("\n");
    sb.append("    roadIdentifier: ").append(toIndentedString(roadIdentifier)).append("\n");
    sb.append("    roadOrigination: ").append(toIndentedString(roadOrigination)).append("\n");
    sb.append("    typeOfRoad: ").append(toIndentedString(typeOfRoad)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

