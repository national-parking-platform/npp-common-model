package org.npp.model.place;
  
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.npp.model.place.enums.AccessibilityEnum;
import org.npp.model.place.characteristics.Address;
import org.npp.model.place.location.AreaLocation;
import org.npp.model.place.HierarchyElementRecord;
import org.npp.model.place.HierarchyElementReference;
import org.npp.model.place.enums.HierarchyElementTypeEnum;
import org.npp.model.place.IdentifiedArea;
import org.npp.model.occupancy.OccupancyLevel;
import org.npp.model.place.characteristics.OperatingRestrictions;
import org.npp.model.place.location.PointLocation;
import org.npp.model.common.SpecificLanguageString;
import org.npp.model.time.Times;
import org.npp.model.place.enums.UserTypeEnum;
import org.npp.model.common.VersionedReference;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import jakarta.annotation.Generated;

/**
 * One type of supplemental facility which can be supplemental equipment or a supplemental service facility.
 */

@Schema(name = "SupplementalFacility", description = "One type of supplemental facility which can be supplemental equipment or a supplemental service facility.")
@JsonIgnoreProperties(
  value = "supplementalFacilityType", // ignore manually set supplementalFacilityType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the supplementalFacilityType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "supplementalFacilityType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = ElectricChargingEquipment.class, name = "ElectricChargingEquipment"),
  @JsonSubTypes.Type(value = SupplementalEquipment.class, name = "SupplementalEquipment"),
  @JsonSubTypes.Type(value = SupplementalServiceFacility.class, name = "SupplementalServiceFacility")
})


public class SupplementalFacility extends IdentifiedArea {

  /**
   * The supplemental facility type
   */
  public enum SupplementalFacilityTypeEnum {
    ELECTRICCHARGINGEQUIPMENT("ElectricChargingEquipment"),
    
    SUPPLEMENTALEQUIPMENT("SupplementalEquipment"),
    
    SUPPLEMENTALSERVICEFACILITY("SupplementalServiceFacility");

    private String value;

    SupplementalFacilityTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SupplementalFacilityTypeEnum fromValue(String value) {
      for (SupplementalFacilityTypeEnum b : SupplementalFacilityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private SupplementalFacilityTypeEnum supplementalFacilityType;

  @Valid
  private List<@Valid AccessibilityEnum> accessibility;

  @Valid
  private List<@Valid SpecificLanguageString> additionalDescription;

  @Valid
  private List<@Valid UserTypeEnum> applicableForUsers;

  @Valid
  private List<@Valid SpecificLanguageString> comment;

  @Valid
  private List<String> externalIdentifiers;

  @Valid
  private List<@Valid SpecificLanguageString> nameOrBrand;

  @Valid
  private List<@Valid List<@Valid SpecificLanguageString>> otherSupplementalFacility;

  private String photoUrl;

  private Integer quantity;

  private Boolean regularlyCleaned;

  @Valid
  private List<@Valid VersionedReference> rightSpecificationIds;

  private Integer supplementalFacilityIndex;

  public SupplementalFacility() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public SupplementalFacility(Integer supplementalFacilityIndex, String id, Integer version, HierarchyElementTypeEnum hierarchyElementType, List<@Valid SpecificLanguageString> name, Integer layer, HierarchyElementTypeEnum type, HierarchyElementRecord hierarchyElementRecord, IdentifiedAreaTypeEnum identifiedAreaType) {
    super(identifiedAreaType, id, version, hierarchyElementType, name, layer, type, hierarchyElementRecord);
    this.supplementalFacilityIndex = supplementalFacilityIndex;
  }

  public SupplementalFacility supplementalFacilityType(SupplementalFacilityTypeEnum supplementalFacilityType) {
    this.supplementalFacilityType = supplementalFacilityType;
    return this;
  }

  /**
   * The supplemental facility type
   * @return supplementalFacilityType
  */
  
  @Schema(name = "supplementalFacilityType", description = "The supplemental facility type", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("supplementalFacilityType")
  public SupplementalFacilityTypeEnum getSupplementalFacilityType() {
    return supplementalFacilityType;
  }

  public void setSupplementalFacilityType(SupplementalFacilityTypeEnum supplementalFacilityType) {
    this.supplementalFacilityType = supplementalFacilityType;
  }

  public SupplementalFacility accessibility(List<@Valid AccessibilityEnum> accessibility) {
    this.accessibility = accessibility;
    return this;
  }

  public SupplementalFacility addAccessibilityItem(AccessibilityEnum accessibilityItem) {
    if (this.accessibility == null) {
      this.accessibility = new ArrayList<>();
    }
    this.accessibility.add(accessibilityItem);
    return this;
  }

  /**
   * Information on accessibility, easements and marking for handicapped people.
   * @return accessibility
  */
  @Valid 
  @Schema(name = "accessibility", description = "Information on accessibility, easements and marking for handicapped people.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("accessibility")
  public List<@Valid AccessibilityEnum> getAccessibility() {
    return accessibility;
  }

  public void setAccessibility(List<@Valid AccessibilityEnum> accessibility) {
    this.accessibility = accessibility;
  }

  public SupplementalFacility additionalDescription(List<@Valid SpecificLanguageString> additionalDescription) {
    this.additionalDescription = additionalDescription;
    return this;
  }

  public SupplementalFacility addAdditionalDescriptionItem(SpecificLanguageString additionalDescriptionItem) {
    if (this.additionalDescription == null) {
      this.additionalDescription = new ArrayList<>();
    }
    this.additionalDescription.add(additionalDescriptionItem);
    return this;
  }

  /**
   * Multilingual string, represented as an array of SpecificLanguageString objects.
   * @return additionalDescription
  */
  @Valid 
  @Schema(name = "additionalDescription", description = "Multilingual string, represented as an array of SpecificLanguageString objects.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("additionalDescription")
  public List<@Valid SpecificLanguageString> getAdditionalDescription() {
    return additionalDescription;
  }

  public void setAdditionalDescription(List<@Valid SpecificLanguageString> additionalDescription) {
    this.additionalDescription = additionalDescription;
  }

  public SupplementalFacility applicableForUsers(List<@Valid UserTypeEnum> applicableForUsers) {
    this.applicableForUsers = applicableForUsers;
    return this;
  }

  public SupplementalFacility addApplicableForUsersItem(UserTypeEnum applicableForUsersItem) {
    if (this.applicableForUsers == null) {
      this.applicableForUsers = new ArrayList<>();
    }
    this.applicableForUsers.add(applicableForUsersItem);
    return this;
  }

  /**
   * Limitation to a set of special users.
   * @return applicableForUsers
  */
  @Valid 
  @Schema(name = "applicableForUsers", description = "Limitation to a set of special users.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("applicableForUsers")
  public List<@Valid UserTypeEnum> getApplicableForUsers() {
    return applicableForUsers;
  }

  public void setApplicableForUsers(List<@Valid UserTypeEnum> applicableForUsers) {
    this.applicableForUsers = applicableForUsers;
  }

  public SupplementalFacility comment(List<@Valid SpecificLanguageString> comment) {
    this.comment = comment;
    return this;
  }

  public SupplementalFacility addCommentItem(SpecificLanguageString commentItem) {
    if (this.comment == null) {
      this.comment = new ArrayList<>();
    }
    this.comment.add(commentItem);
    return this;
  }

  /**
   * Multilingual string, represented as an array of SpecificLanguageString objects.
   * @return comment
  */
  @Valid 
  @Schema(name = "comment", description = "Multilingual string, represented as an array of SpecificLanguageString objects.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("comment")
  public List<@Valid SpecificLanguageString> getComment() {
    return comment;
  }

  public void setComment(List<@Valid SpecificLanguageString> comment) {
    this.comment = comment;
  }

  public SupplementalFacility externalIdentifiers(List<String> externalIdentifiers) {
    this.externalIdentifiers = externalIdentifiers;
    return this;
  }

  public SupplementalFacility addExternalIdentifiersItem(String externalIdentifiersItem) {
    if (this.externalIdentifiers == null) {
      this.externalIdentifiers = new ArrayList<>();
    }
    this.externalIdentifiers.add(externalIdentifiersItem);
    return this;
  }

  /**
   * An external identifier for the supplemental facility, e.g. an inventory number.  This attribute has an unbounded multiplicity to support identifiers for multiple occurrences of this element.'
   * @return externalIdentifiers
  */
  
  @Schema(name = "externalIdentifiers", description = "An external identifier for the supplemental facility, e.g. an inventory number.  This attribute has an unbounded multiplicity to support identifiers for multiple occurrences of this element.'", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("externalIdentifiers")
  public List<String> getExternalIdentifiers() {
    return externalIdentifiers;
  }

  public void setExternalIdentifiers(List<String> externalIdentifiers) {
    this.externalIdentifiers = externalIdentifiers;
  }

  public SupplementalFacility nameOrBrand(List<@Valid SpecificLanguageString> nameOrBrand) {
    this.nameOrBrand = nameOrBrand;
    return this;
  }

  public SupplementalFacility addNameOrBrandItem(SpecificLanguageString nameOrBrandItem) {
    if (this.nameOrBrand == null) {
      this.nameOrBrand = new ArrayList<>();
    }
    this.nameOrBrand.add(nameOrBrandItem);
    return this;
  }

  /**
   * Multilingual string, represented as an array of SpecificLanguageString objects.
   * @return nameOrBrand
  */
  @Valid 
  @Schema(name = "nameOrBrand", description = "Multilingual string, represented as an array of SpecificLanguageString objects.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("nameOrBrand")
  public List<@Valid SpecificLanguageString> getNameOrBrand() {
    return nameOrBrand;
  }

  public void setNameOrBrand(List<@Valid SpecificLanguageString> nameOrBrand) {
    this.nameOrBrand = nameOrBrand;
  }

  public SupplementalFacility otherSupplementalFacility(List<@Valid List<@Valid SpecificLanguageString>> otherSupplementalFacility) {
    this.otherSupplementalFacility = otherSupplementalFacility;
    return this;
  }

  public SupplementalFacility addOtherSupplementalFacilityItem(List<@Valid SpecificLanguageString> otherSupplementalFacilityItem) {
    if (this.otherSupplementalFacility == null) {
      this.otherSupplementalFacility = new ArrayList<>();
    }
    this.otherSupplementalFacility.add(otherSupplementalFacilityItem);
    return this;
  }

  /**
   * Get otherSupplementalFacility
   * @return otherSupplementalFacility
  */
  @Valid 
  @Schema(name = "otherSupplementalFacility", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("otherSupplementalFacility")
  public List<@Valid List<@Valid SpecificLanguageString>> getOtherSupplementalFacility() {
    return otherSupplementalFacility;
  }

  public void setOtherSupplementalFacility(List<@Valid List<@Valid SpecificLanguageString>> otherSupplementalFacility) {
    this.otherSupplementalFacility = otherSupplementalFacility;
  }

  public SupplementalFacility photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * Represents a Url for an internet accessible resource.
   * @return photoUrl
  */
  
  @Schema(name = "photoUrl", description = "Represents a Url for an internet accessible resource.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("photoUrl")
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }

  public SupplementalFacility quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Number of the supplemental facility (e.g. number of toilets, restaurants, park & ride places, etc.) with respect to given restrictions.  Dynamic overridable.
   * minimum: 0
   * @return quantity
  */
  @Min(0) 
  @Schema(name = "quantity", description = "Number of the supplemental facility (e.g. number of toilets, restaurants, park & ride places, etc.) with respect to given restrictions.  Dynamic overridable.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("quantity")
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public SupplementalFacility regularlyCleaned(Boolean regularlyCleaned) {
    this.regularlyCleaned = regularlyCleaned;
    return this;
  }

  /**
   * Indication, if the supplemental facility is cleaned on a regular basis.
   * @return regularlyCleaned
  */
  
  @Schema(name = "regularlyCleaned", description = "Indication, if the supplemental facility is cleaned on a regular basis.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("regularlyCleaned")
  public Boolean getRegularlyCleaned() {
    return regularlyCleaned;
  }

  public void setRegularlyCleaned(Boolean regularlyCleaned) {
    this.regularlyCleaned = regularlyCleaned;
  }

  public SupplementalFacility rightSpecificationIds(List<@Valid VersionedReference> rightSpecificationIds) {
    this.rightSpecificationIds = rightSpecificationIds;
    return this;
  }

  public SupplementalFacility addRightSpecificationIdsItem(VersionedReference rightSpecificationIdsItem) {
    if (this.rightSpecificationIds == null) {
      this.rightSpecificationIds = new ArrayList<>();
    }
    this.rightSpecificationIds.add(rightSpecificationIdsItem);
    return this;
  }

  /**
   * List of applicable right specifications
   * @return rightSpecificationIds
  */
  @Valid 
  @Schema(name = "rightSpecificationIds", description = "List of applicable right specifications", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("rightSpecificationIds")
  public List<@Valid VersionedReference> getRightSpecificationIds() {
    return rightSpecificationIds;
  }

  public void setRightSpecificationIds(List<@Valid VersionedReference> rightSpecificationIds) {
    this.rightSpecificationIds = rightSpecificationIds;
  }

  public SupplementalFacility supplementalFacilityIndex(Integer supplementalFacilityIndex) {
    this.supplementalFacilityIndex = supplementalFacilityIndex;
    return this;
  }

  /**
   * An index to link this supplemental facility between the static and dynamic publications.
   * @return supplementalFacilityIndex
  */
  @NotNull 
  @Schema(name = "supplementalFacilityIndex", description = "An index to link this supplemental facility between the static and dynamic publications.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("supplementalFacilityIndex")
  public Integer getSupplementalFacilityIndex() {
    return supplementalFacilityIndex;
  }

  public void setSupplementalFacilityIndex(Integer supplementalFacilityIndex) {
    this.supplementalFacilityIndex = supplementalFacilityIndex;
  }


  public SupplementalFacility identifiedAreaType(IdentifiedAreaTypeEnum identifiedAreaType) {
    super.identifiedAreaType(identifiedAreaType);
    return this;
  }

  public SupplementalFacility streetAddress(List<@Valid Address> streetAddress) {
    super.streetAddress(streetAddress);
    return this;
  }

  public SupplementalFacility addStreetAddressItem(Address streetAddressItem) {
    super.addStreetAddressItem(streetAddressItem);
    return this;
  }

  public SupplementalFacility areaBoundedZone(List<@Valid AreaLocation> areaBoundedZone) {
    super.areaBoundedZone(areaBoundedZone);
    return this;
  }

  public SupplementalFacility addAreaBoundedZoneItem(AreaLocation areaBoundedZoneItem) {
    super.addAreaBoundedZoneItem(areaBoundedZoneItem);
    return this;
  }

  public SupplementalFacility indicativeIdentifiedAreaPointLocation(List<@Valid PointLocation> indicativeIdentifiedAreaPointLocation) {
    super.indicativeIdentifiedAreaPointLocation(indicativeIdentifiedAreaPointLocation);
    return this;
  }

  public SupplementalFacility addIndicativeIdentifiedAreaPointLocationItem(PointLocation indicativeIdentifiedAreaPointLocationItem) {
    super.addIndicativeIdentifiedAreaPointLocationItem(indicativeIdentifiedAreaPointLocationItem);
    return this;
  }

  public SupplementalFacility times(Times times) {
    super.times(times);
    return this;
  }

  public SupplementalFacility operatingRestrictions(List<@Valid OperatingRestrictions> operatingRestrictions) {
    super.operatingRestrictions(operatingRestrictions);
    return this;
  }

  public SupplementalFacility addOperatingRestrictionsItem(OperatingRestrictions operatingRestrictionsItem) {
    super.addOperatingRestrictionsItem(operatingRestrictionsItem);
    return this;
  }

  public SupplementalFacility id(String id) {
    super.id(id);
    return this;
  }

  public SupplementalFacility version(Integer version) {
    super.version(version);
    return this;
  }

  public SupplementalFacility hierarchyElementType(HierarchyElementTypeEnum hierarchyElementType) {
    super.hierarchyElementType(hierarchyElementType);
    return this;
  }

  public SupplementalFacility name(List<@Valid SpecificLanguageString> name) {
    super.name(name);
    return this;
  }

  public SupplementalFacility addNameItem(SpecificLanguageString nameItem) {
    super.addNameItem(nameItem);
    return this;
  }

  public SupplementalFacility description(List<@Valid SpecificLanguageString> description) {
    super.description(description);
    return this;
  }

  public SupplementalFacility addDescriptionItem(SpecificLanguageString descriptionItem) {
    super.addDescriptionItem(descriptionItem);
    return this;
  }

  public SupplementalFacility layer(Integer layer) {
    super.layer(layer);
    return this;
  }

  public SupplementalFacility type(HierarchyElementTypeEnum type) {
    super.type(type);
    return this;
  }

  public SupplementalFacility aliases(List<@Valid List<@Valid SpecificLanguageString>> aliases) {
    super.aliases(aliases);
    return this;
  }

  public SupplementalFacility addAliasesItem(List<@Valid SpecificLanguageString> aliasesItem) {
    super.addAliasesItem(aliasesItem);
    return this;
  }

  public SupplementalFacility parentId(VersionedReference parentId) {
    super.parentId(parentId);
    return this;
  }

  public SupplementalFacility childIds(List<@Valid VersionedReference> childIds) {
    super.childIds(childIds);
    return this;
  }

  public SupplementalFacility addChildIdsItem(VersionedReference childIdsItem) {
    super.addChildIdsItem(childIdsItem);
    return this;
  }

  public SupplementalFacility operatorDefinedReference(List<@Valid SpecificLanguageString> operatorDefinedReference) {
    super.operatorDefinedReference(operatorDefinedReference);
    return this;
  }

  public SupplementalFacility addOperatorDefinedReferenceItem(SpecificLanguageString operatorDefinedReferenceItem) {
    super.addOperatorDefinedReferenceItem(operatorDefinedReferenceItem);
    return this;
  }

  public SupplementalFacility hierarchyElementRecord(HierarchyElementRecord hierarchyElementRecord) {
    super.hierarchyElementRecord(hierarchyElementRecord);
    return this;
  }

  public SupplementalFacility rightSpecifications(List<@Valid VersionedReference> rightSpecifications) {
    super.rightSpecifications(rightSpecifications);
    return this;
  }

  public SupplementalFacility addRightSpecificationsItem(VersionedReference rightSpecificationsItem) {
    super.addRightSpecificationsItem(rightSpecificationsItem);
    return this;
  }

  public SupplementalFacility hierarchyElementReference(HierarchyElementReference hierarchyElementReference) {
    super.hierarchyElementReference(hierarchyElementReference);
    return this;
  }

  public SupplementalFacility occupancyLevel(OccupancyLevel occupancyLevel) {
    super.occupancyLevel(occupancyLevel);
    return this;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupplementalFacility supplementalFacility = (SupplementalFacility) o;
    return Objects.equals(this.supplementalFacilityType, supplementalFacility.supplementalFacilityType) &&
        Objects.equals(this.accessibility, supplementalFacility.accessibility) &&
        Objects.equals(this.additionalDescription, supplementalFacility.additionalDescription) &&
        Objects.equals(this.applicableForUsers, supplementalFacility.applicableForUsers) &&
        Objects.equals(this.comment, supplementalFacility.comment) &&
        Objects.equals(this.externalIdentifiers, supplementalFacility.externalIdentifiers) &&
        Objects.equals(this.nameOrBrand, supplementalFacility.nameOrBrand) &&
        Objects.equals(this.otherSupplementalFacility, supplementalFacility.otherSupplementalFacility) &&
        Objects.equals(this.photoUrl, supplementalFacility.photoUrl) &&
        Objects.equals(this.quantity, supplementalFacility.quantity) &&
        Objects.equals(this.regularlyCleaned, supplementalFacility.regularlyCleaned) &&
        Objects.equals(this.rightSpecificationIds, supplementalFacility.rightSpecificationIds) &&
        Objects.equals(this.supplementalFacilityIndex, supplementalFacility.supplementalFacilityIndex) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(supplementalFacilityType, accessibility, additionalDescription, applicableForUsers, comment, externalIdentifiers, nameOrBrand, otherSupplementalFacility, photoUrl, quantity, regularlyCleaned, rightSpecificationIds, supplementalFacilityIndex, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupplementalFacility {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    supplementalFacilityType: ").append(toIndentedString(supplementalFacilityType)).append("\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    additionalDescription: ").append(toIndentedString(additionalDescription)).append("\n");
    sb.append("    applicableForUsers: ").append(toIndentedString(applicableForUsers)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    externalIdentifiers: ").append(toIndentedString(externalIdentifiers)).append("\n");
    sb.append("    nameOrBrand: ").append(toIndentedString(nameOrBrand)).append("\n");
    sb.append("    otherSupplementalFacility: ").append(toIndentedString(otherSupplementalFacility)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    regularlyCleaned: ").append(toIndentedString(regularlyCleaned)).append("\n");
    sb.append("    rightSpecificationIds: ").append(toIndentedString(rightSpecificationIds)).append("\n");
    sb.append("    supplementalFacilityIndex: ").append(toIndentedString(supplementalFacilityIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

