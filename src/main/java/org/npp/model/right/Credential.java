package org.npp.model.right;
  
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import org.npp.model.common.enums.CredentialTypeEnum;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import jakarta.annotation.Generated;

/**
 * Information relating to a form of credential that are applicable for a specific RightSpecification.
 */

@Schema(name = "Credential", description = "Information relating to a form of credential that are applicable for a specific RightSpecification.")
@JsonIgnoreProperties(
  value = "credentialType", // ignore manually set credentialType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the credentialType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "credentialType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = CredentialAssigned.class, name = "CredentialAssigned"),
  @JsonSubTypes.Type(value = CustomerCredential.class, name = "CustomerCredential"),
  @JsonSubTypes.Type(value = OtherCredential.class, name = "OtherCredential"),
  @JsonSubTypes.Type(value = VehicleCredential.class, name = "VehicleCredential")
})


public class Credential {

  /**
   * Gets or Sets credentialType
   */
  public enum CredentialTypeEnum {
    CREDENTIALASSIGNED("CredentialAssigned");

    private String value;

    CredentialTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CredentialTypeEnum fromValue(String value) {
      for (CredentialTypeEnum b : CredentialTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private CredentialTypeEnum credentialType;

  private CredentialTypeEnum type;

  public Credential() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public Credential(CredentialTypeEnum credentialType, CredentialTypeEnum type) {
    this.credentialType = credentialType;
    this.type = type;
  }

  public Credential credentialType(CredentialTypeEnum credentialType) {
    this.credentialType = credentialType;
    return this;
  }

  /**
   * Get credentialType
   * @return credentialType
  */
  @NotNull 
  @Schema(name = "credentialType", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("credentialType")
  public CredentialTypeEnum getCredentialType() {
    return credentialType;
  }

  public void setCredentialType(CredentialTypeEnum credentialType) {
    this.credentialType = credentialType;
  }

  public Credential type(CredentialTypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
  */
  @NotNull @Valid 
  @Schema(name = "type", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("type")
  public CredentialTypeEnum getType() {
    return type;
  }

  public void setType(CredentialTypeEnum type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Credential credential = (Credential) o;
    return Objects.equals(this.credentialType, credential.credentialType) &&
        Objects.equals(this.type, credential.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credentialType, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Credential {\n");
    sb.append("    credentialType: ").append(toIndentedString(credentialType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

