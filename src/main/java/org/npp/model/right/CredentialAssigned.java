package org.npp.model.right;
  
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.npp.model.right.Credential;
import org.npp.model.common.enums.CredentialTypeEnum;
import org.npp.model.common.Reference;
import org.npp.model.common.SpecificLanguageString;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import jakarta.annotation.Generated;

/**
 * Information concerning a specific credential that is used for verification for one AssignedRight. Specialisation of a general credential.
 */

@Schema(name = "CredentialAssigned", description = "Information concerning a specific credential that is used for verification for one AssignedRight. Specialisation of a general credential.")
@JsonIgnoreProperties(
  value = "credentialType", // ignore manually set credentialType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the credentialType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "credentialType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = CredentialAssigned.class, name = "CredentialAssigned"),
  @JsonSubTypes.Type(value = CustomerCredential.class, name = "CustomerCredential"),
  @JsonSubTypes.Type(value = OtherCredential.class, name = "OtherCredential"),
  @JsonSubTypes.Type(value = VehicleCredential.class, name = "VehicleCredential")
})


public class CredentialAssigned extends Credential {

  private Reference identifier;

  @Valid
  private List<@Valid SpecificLanguageString> issuer = new ArrayList<>();

  public CredentialAssigned() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public CredentialAssigned(Reference identifier, List<@Valid SpecificLanguageString> issuer, CredentialTypeEnum credentialType, CredentialTypeEnum type) {
    super(credentialType, type);
    this.identifier = identifier;
    this.issuer = issuer;
  }

  public CredentialAssigned identifier(Reference identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * Get identifier
   * @return identifier
  */
  @NotNull @Valid 
  @Schema(name = "identifier", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("identifier")
  public Reference getIdentifier() {
    return identifier;
  }

  public void setIdentifier(Reference identifier) {
    this.identifier = identifier;
  }

  public CredentialAssigned issuer(List<@Valid SpecificLanguageString> issuer) {
    this.issuer = issuer;
    return this;
  }

  public CredentialAssigned addIssuerItem(SpecificLanguageString issuerItem) {
    if (this.issuer == null) {
      this.issuer = new ArrayList<>();
    }
    this.issuer.add(issuerItem);
    return this;
  }

  /**
   * Multilingual string, represented as an array of SpecificLanguageString objects.
   * @return issuer
  */
  @NotNull @Valid 
  @Schema(name = "issuer", description = "Multilingual string, represented as an array of SpecificLanguageString objects.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("issuer")
  public List<@Valid SpecificLanguageString> getIssuer() {
    return issuer;
  }

  public void setIssuer(List<@Valid SpecificLanguageString> issuer) {
    this.issuer = issuer;
  }


  public CredentialAssigned credentialType(CredentialTypeEnum credentialType) {
    super.credentialType(credentialType);
    return this;
  }

  public CredentialAssigned type(CredentialTypeEnum type) {
    super.type(type);
    return this;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CredentialAssigned credentialAssigned = (CredentialAssigned) o;
    return Objects.equals(this.identifier, credentialAssigned.identifier) &&
        Objects.equals(this.issuer, credentialAssigned.issuer) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifier, issuer, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CredentialAssigned {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

