package org.npp.model.time;
  
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.npp.model.time.EntranceOpenTime;
import org.npp.model.time.ExitOpenTime;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import jakarta.annotation.Generated;

/**
 * Time periods specified for access to or from a parking facility.
 */

@Schema(name = "AccessAndEgress", description = "Time periods specified for access to or from a parking facility.")
@JsonIgnoreProperties(
  value = "metaType", // ignore manually set metaType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the metaType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "metaType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AccessAndEgressPeriods.class, name = "AccessAndEgressPeriods"),
  @JsonSubTypes.Type(value = AccessAndEgressValidity.class, name = "AccessAndEgressValidity")
})


public class AccessAndEgress {

  /**
   * Gets or Sets metaType
   */
  public enum MetaTypeEnum {
    ACCESSANDEGRESSPERIODS("AccessAndEgressPeriods"),
    
    ACCESSANDEGRESSVALIDITY("AccessAndEgressValidity");

    private String value;

    MetaTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MetaTypeEnum fromValue(String value) {
      for (MetaTypeEnum b : MetaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private MetaTypeEnum metaType;

  private Boolean exitPossibleAtAnyTime;

  @Valid
  private List<@Valid EntranceOpenTime> entranceOpenTimeArea;

  @Valid
  private List<@Valid ExitOpenTime> exitOpenTimeArea;

  public AccessAndEgress metaType(MetaTypeEnum metaType) {
    this.metaType = metaType;
    return this;
  }

  /**
   * Get metaType
   * @return metaType
  */
  
  @Schema(name = "metaType", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("metaType")
  public MetaTypeEnum getMetaType() {
    return metaType;
  }

  public void setMetaType(MetaTypeEnum metaType) {
    this.metaType = metaType;
  }

  public AccessAndEgress exitPossibleAtAnyTime(Boolean exitPossibleAtAnyTime) {
    this.exitPossibleAtAnyTime = exitPossibleAtAnyTime;
    return this;
  }

  /**
   * If true, specifies that the specified access is available for exit at all times.
   * @return exitPossibleAtAnyTime
  */
  
  @Schema(name = "exitPossibleAtAnyTime", description = "If true, specifies that the specified access is available for exit at all times.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("exitPossibleAtAnyTime")
  public Boolean getExitPossibleAtAnyTime() {
    return exitPossibleAtAnyTime;
  }

  public void setExitPossibleAtAnyTime(Boolean exitPossibleAtAnyTime) {
    this.exitPossibleAtAnyTime = exitPossibleAtAnyTime;
  }

  public AccessAndEgress entranceOpenTimeArea(List<@Valid EntranceOpenTime> entranceOpenTimeArea) {
    this.entranceOpenTimeArea = entranceOpenTimeArea;
    return this;
  }

  public AccessAndEgress addEntranceOpenTimeAreaItem(EntranceOpenTime entranceOpenTimeAreaItem) {
    if (this.entranceOpenTimeArea == null) {
      this.entranceOpenTimeArea = new ArrayList<>();
    }
    this.entranceOpenTimeArea.add(entranceOpenTimeAreaItem);
    return this;
  }

  /**
   * Entrance open time area
   * @return entranceOpenTimeArea
  */
  @Valid 
  @Schema(name = "entranceOpenTimeArea", description = "Entrance open time area", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("entranceOpenTimeArea")
  public List<@Valid EntranceOpenTime> getEntranceOpenTimeArea() {
    return entranceOpenTimeArea;
  }

  public void setEntranceOpenTimeArea(List<@Valid EntranceOpenTime> entranceOpenTimeArea) {
    this.entranceOpenTimeArea = entranceOpenTimeArea;
  }

  public AccessAndEgress exitOpenTimeArea(List<@Valid ExitOpenTime> exitOpenTimeArea) {
    this.exitOpenTimeArea = exitOpenTimeArea;
    return this;
  }

  public AccessAndEgress addExitOpenTimeAreaItem(ExitOpenTime exitOpenTimeAreaItem) {
    if (this.exitOpenTimeArea == null) {
      this.exitOpenTimeArea = new ArrayList<>();
    }
    this.exitOpenTimeArea.add(exitOpenTimeAreaItem);
    return this;
  }

  /**
   * Exit open time area
   * @return exitOpenTimeArea
  */
  @Valid 
  @Schema(name = "exitOpenTimeArea", description = "Exit open time area", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("exitOpenTimeArea")
  public List<@Valid ExitOpenTime> getExitOpenTimeArea() {
    return exitOpenTimeArea;
  }

  public void setExitOpenTimeArea(List<@Valid ExitOpenTime> exitOpenTimeArea) {
    this.exitOpenTimeArea = exitOpenTimeArea;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessAndEgress accessAndEgress = (AccessAndEgress) o;
    return Objects.equals(this.metaType, accessAndEgress.metaType) &&
        Objects.equals(this.exitPossibleAtAnyTime, accessAndEgress.exitPossibleAtAnyTime) &&
        Objects.equals(this.entranceOpenTimeArea, accessAndEgress.entranceOpenTimeArea) &&
        Objects.equals(this.exitOpenTimeArea, accessAndEgress.exitOpenTimeArea);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metaType, exitPossibleAtAnyTime, entranceOpenTimeArea, exitOpenTimeArea);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessAndEgress {\n");
    sb.append("    metaType: ").append(toIndentedString(metaType)).append("\n");
    sb.append("    exitPossibleAtAnyTime: ").append(toIndentedString(exitPossibleAtAnyTime)).append("\n");
    sb.append("    entranceOpenTimeArea: ").append(toIndentedString(entranceOpenTimeArea)).append("\n");
    sb.append("    exitOpenTimeArea: ").append(toIndentedString(exitOpenTimeArea)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

