package org.npp.model.time;
  
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import org.npp.model.time.enums.SpecialDayTypeEnum;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import jakarta.annotation.Generated;

/**
 * Specification of a special type of day, possibly also a public holiday. Can be country or region specific.
 */

@Schema(name = "SpecialDay", description = "Specification of a special type of day, possibly also a public holiday. Can be country or region specific.")
@JsonIgnoreProperties(
  value = "metaType", // ignore manually set metaType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the metaType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "metaType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = PublicHoliday.class, name = "PublicHoliday"),
  @JsonSubTypes.Type(value = SpecialDay.class, name = "SpecialDay")
})


public class SpecialDay {

  /**
   * Gets or Sets metaType
   */
  public enum MetaTypeEnum {
    SPECIALDAY("SpecialDay"),
    
    PUBLICHOLIDAY("PublicHoliday");

    private String value;

    MetaTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MetaTypeEnum fromValue(String value) {
      for (MetaTypeEnum b : MetaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private MetaTypeEnum metaType;

  private Boolean intersectWithApplicableDays;

  private SpecialDayTypeEnum specialDayType;

  public SpecialDay() {
    super();
  }

  /**
   * Constructor with only required parameters
   */
  public SpecialDay(Boolean intersectWithApplicableDays, SpecialDayTypeEnum specialDayType) {
    this.intersectWithApplicableDays = intersectWithApplicableDays;
    this.specialDayType = specialDayType;
  }

  public SpecialDay metaType(MetaTypeEnum metaType) {
    this.metaType = metaType;
    return this;
  }

  /**
   * Get metaType
   * @return metaType
  */
  
  @Schema(name = "metaType", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("metaType")
  public MetaTypeEnum getMetaType() {
    return metaType;
  }

  public void setMetaType(MetaTypeEnum metaType) {
    this.metaType = metaType;
  }

  public SpecialDay intersectWithApplicableDays(Boolean intersectWithApplicableDays) {
    this.intersectWithApplicableDays = intersectWithApplicableDays;
    return this;
  }

  /**
   * When [TRUE], the period is the intersection of applicable days and this special day.  When [FALSE], the period is the union of applicable days and this special day.
   * @return intersectWithApplicableDays
  */
  @NotNull 
  @Schema(name = "intersectWithApplicableDays", description = "When [TRUE], the period is the intersection of applicable days and this special day.  When [FALSE], the period is the union of applicable days and this special day.", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("intersectWithApplicableDays")
  public Boolean getIntersectWithApplicableDays() {
    return intersectWithApplicableDays;
  }

  public void setIntersectWithApplicableDays(Boolean intersectWithApplicableDays) {
    this.intersectWithApplicableDays = intersectWithApplicableDays;
  }

  public SpecialDay specialDayType(SpecialDayTypeEnum specialDayType) {
    this.specialDayType = specialDayType;
    return this;
  }

  /**
   * Get specialDayType
   * @return specialDayType
  */
  @NotNull @Valid 
  @Schema(name = "specialDayType", requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty("specialDayType")
  public SpecialDayTypeEnum getSpecialDayType() {
    return specialDayType;
  }

  public void setSpecialDayType(SpecialDayTypeEnum specialDayType) {
    this.specialDayType = specialDayType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpecialDay specialDay = (SpecialDay) o;
    return Objects.equals(this.metaType, specialDay.metaType) &&
        Objects.equals(this.intersectWithApplicableDays, specialDay.intersectWithApplicableDays) &&
        Objects.equals(this.specialDayType, specialDay.specialDayType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metaType, intersectWithApplicableDays, specialDayType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpecialDay {\n");
    sb.append("    metaType: ").append(toIndentedString(metaType)).append("\n");
    sb.append("    intersectWithApplicableDays: ").append(toIndentedString(intersectWithApplicableDays)).append("\n");
    sb.append("    specialDayType: ").append(toIndentedString(specialDayType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

