package org.npp.model.time;
  
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.LinkedHashSet;
import java.util.Set;
import org.npp.model.time.enums.DayEnum;
import org.npp.model.time.enums.MonthEnum;
import org.npp.model.time.enums.WeekOfMonthEnum;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import jakarta.annotation.Generated;

/**
 * Specification of periods defined by the intersection of days, weeks and months.
 */

@Schema(name = "DayWeekMonth", description = "Specification of periods defined by the intersection of days, weeks and months.")
@JsonIgnoreProperties(
  value = "metaType", // ignore manually set metaType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the metaType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "metaType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = DayInMonth.class, name = "DayInMonth"),
  @JsonSubTypes.Type(value = WeekInMonth.class, name = "WeekInMonth")
})


public class DayWeekMonth {

  /**
   * Gets or Sets metaType
   */
  public enum MetaTypeEnum {
    DAYINMONTH("DayInMonth"),
    
    WEEKINMONTH("WeekInMonth");

    private String value;

    MetaTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MetaTypeEnum fromValue(String value) {
      for (MetaTypeEnum b : MetaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private MetaTypeEnum metaType;

  @Valid
  private Set<@Valid DayEnum> applicableDay;

  @Valid
  private Set<@Valid MonthEnum> applicableMonth;

  @Valid
  private Set<@Valid WeekOfMonthEnum> applicableWeek;

  public DayWeekMonth metaType(MetaTypeEnum metaType) {
    this.metaType = metaType;
    return this;
  }

  /**
   * Get metaType
   * @return metaType
  */
  
  @Schema(name = "metaType", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("metaType")
  public MetaTypeEnum getMetaType() {
    return metaType;
  }

  public void setMetaType(MetaTypeEnum metaType) {
    this.metaType = metaType;
  }

  public DayWeekMonth applicableDay(Set<@Valid DayEnum> applicableDay) {
    this.applicableDay = applicableDay;
    return this;
  }

  public DayWeekMonth addApplicableDayItem(DayEnum applicableDayItem) {
    if (this.applicableDay == null) {
      this.applicableDay = new LinkedHashSet<>();
    }
    this.applicableDay.add(applicableDayItem);
    return this;
  }

  /**
   * Applicable day of the week.  \"All days of the week\" is expressed by non-inclusion of this attribute.
   * @return applicableDay
  */
  @Valid @Size(max = 7) 
  @Schema(name = "applicableDay", description = "Applicable day of the week.  \"All days of the week\" is expressed by non-inclusion of this attribute.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("applicableDay")
  public Set<@Valid DayEnum> getApplicableDay() {
    return applicableDay;
  }

  @JsonDeserialize(as = LinkedHashSet.class)
  public void setApplicableDay(Set<@Valid DayEnum> applicableDay) {
    this.applicableDay = applicableDay;
  }

  public DayWeekMonth applicableMonth(Set<@Valid MonthEnum> applicableMonth) {
    this.applicableMonth = applicableMonth;
    return this;
  }

  public DayWeekMonth addApplicableMonthItem(MonthEnum applicableMonthItem) {
    if (this.applicableMonth == null) {
      this.applicableMonth = new LinkedHashSet<>();
    }
    this.applicableMonth.add(applicableMonthItem);
    return this;
  }

  /**
   * Applicable month of the year.  \"All months of the year\" is expressed by non-inclusion of this attribute.
   * @return applicableMonth
  */
  @Valid @Size(max = 12) 
  @Schema(name = "applicableMonth", description = "Applicable month of the year.  \"All months of the year\" is expressed by non-inclusion of this attribute.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("applicableMonth")
  public Set<@Valid MonthEnum> getApplicableMonth() {
    return applicableMonth;
  }

  @JsonDeserialize(as = LinkedHashSet.class)
  public void setApplicableMonth(Set<@Valid MonthEnum> applicableMonth) {
    this.applicableMonth = applicableMonth;
  }

  public DayWeekMonth applicableWeek(Set<@Valid WeekOfMonthEnum> applicableWeek) {
    this.applicableWeek = applicableWeek;
    return this;
  }

  public DayWeekMonth addApplicableWeekItem(WeekOfMonthEnum applicableWeekItem) {
    if (this.applicableWeek == null) {
      this.applicableWeek = new LinkedHashSet<>();
    }
    this.applicableWeek.add(applicableWeekItem);
    return this;
  }

  /**
   * Applicable week of the month (1 to 5).  \"All  weeks of the month\" is expressed by non-inclusion of this attribute.
   * @return applicableWeek
  */
  @Valid @Size(max = 5) 
  @Schema(name = "applicableWeek", description = "Applicable week of the month (1 to 5).  \"All  weeks of the month\" is expressed by non-inclusion of this attribute.", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("applicableWeek")
  public Set<@Valid WeekOfMonthEnum> getApplicableWeek() {
    return applicableWeek;
  }

  @JsonDeserialize(as = LinkedHashSet.class)
  public void setApplicableWeek(Set<@Valid WeekOfMonthEnum> applicableWeek) {
    this.applicableWeek = applicableWeek;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DayWeekMonth dayWeekMonth = (DayWeekMonth) o;
    return Objects.equals(this.metaType, dayWeekMonth.metaType) &&
        Objects.equals(this.applicableDay, dayWeekMonth.applicableDay) &&
        Objects.equals(this.applicableMonth, dayWeekMonth.applicableMonth) &&
        Objects.equals(this.applicableWeek, dayWeekMonth.applicableWeek);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metaType, applicableDay, applicableMonth, applicableWeek);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DayWeekMonth {\n");
    sb.append("    metaType: ").append(toIndentedString(metaType)).append("\n");
    sb.append("    applicableDay: ").append(toIndentedString(applicableDay)).append("\n");
    sb.append("    applicableMonth: ").append(toIndentedString(applicableMonth)).append("\n");
    sb.append("    applicableWeek: ").append(toIndentedString(applicableWeek)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

