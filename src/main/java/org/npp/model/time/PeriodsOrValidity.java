package org.npp.model.time;
  
import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.npp.model.time.Period;
import org.npp.model.time.Validity;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.*;
import jakarta.annotation.Generated;

/**
 * Describes the mutually exclusive use of one Validity or one or more Periods
 */

@Schema(name = "PeriodsOrValidity", description = "Describes the mutually exclusive use of one Validity or one or more Periods")
@JsonIgnoreProperties(
  value = "metaType", // ignore manually set metaType, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the metaType to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "metaType", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = EntranceOpenTime.class, name = "EntranceOpenTime"),
  @JsonSubTypes.Type(value = ExitOpenTime.class, name = "ExitOpenTime"),
  @JsonSubTypes.Type(value = OperatingTime.class, name = "OperatingTime")
})


public class PeriodsOrValidity {

  /**
   * Gets or Sets metaType
   */
  public enum MetaTypeEnum {
    ENTRANCEOPENTIME("EntranceOpenTime"),
    
    EXITOPENTIME("ExitOpenTime"),
    
    OPERATINGTIME("OperatingTime");

    private String value;

    MetaTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MetaTypeEnum fromValue(String value) {
      for (MetaTypeEnum b : MetaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private MetaTypeEnum metaType;

  @Valid
  private List<@Valid Period> periods;

  private Validity validity;

  public PeriodsOrValidity metaType(MetaTypeEnum metaType) {
    this.metaType = metaType;
    return this;
  }

  /**
   * Get metaType
   * @return metaType
  */
  
  @Schema(name = "metaType", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("metaType")
  public MetaTypeEnum getMetaType() {
    return metaType;
  }

  public void setMetaType(MetaTypeEnum metaType) {
    this.metaType = metaType;
  }

  public PeriodsOrValidity periods(List<@Valid Period> periods) {
    this.periods = periods;
    return this;
  }

  public PeriodsOrValidity addPeriodsItem(Period periodsItem) {
    if (this.periods == null) {
      this.periods = new ArrayList<>();
    }
    this.periods.add(periodsItem);
    return this;
  }

  /**
   * Get periods
   * @return periods
  */
  @Valid @Size(min = 1) 
  @Schema(name = "periods", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("periods")
  public List<@Valid Period> getPeriods() {
    return periods;
  }

  public void setPeriods(List<@Valid Period> periods) {
    this.periods = periods;
  }

  public PeriodsOrValidity validity(Validity validity) {
    this.validity = validity;
    return this;
  }

  /**
   * Get validity
   * @return validity
  */
  @Valid 
  @Schema(name = "validity", requiredMode = Schema.RequiredMode.NOT_REQUIRED)
  @JsonProperty("validity")
  public Validity getValidity() {
    return validity;
  }

  public void setValidity(Validity validity) {
    this.validity = validity;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PeriodsOrValidity periodsOrValidity = (PeriodsOrValidity) o;
    return Objects.equals(this.metaType, periodsOrValidity.metaType) &&
        Objects.equals(this.periods, periodsOrValidity.periods) &&
        Objects.equals(this.validity, periodsOrValidity.validity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metaType, periods, validity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PeriodsOrValidity {\n");
    sb.append("    metaType: ").append(toIndentedString(metaType)).append("\n");
    sb.append("    periods: ").append(toIndentedString(periods)).append("\n");
    sb.append("    validity: ").append(toIndentedString(validity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

