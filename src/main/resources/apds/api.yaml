openapi: 3.0.2

info:
  title: NPP APDS Specifications
  version: '1.0'
  description: |-
    Allows the standard CRUD operations, as well as listing/search of:

    * `Places` (and their `Occupancy`)
    * `Rates`
    * `RightSpecifications`
    * `AssignedRights`
    * `Sessions`
    * `Observations`

  contact: {}

servers:
  - url: '/'

tags:
  - name: Create
    description: Create a resource
  - name: Get
    description: Read a resource
  - name: Update
    description: Update a resource
  - name: Delete
    description: Delete a resource
  - name: List
    description: Search and list resources
  - name: Example
    description: An example endpoint that data consumers should implement

paths:

  ################# SESSIONS #################

  /sessions:

    get:
      summary: List Sessions
      description: |-
        Lists `Sessions` and allows searching/filtering by a combination of :        
        * latitude, longitude, radius: to check for `Sessions` occurring in a geographic area (via the associated Place hierarchy element)
        * a list of `Places`, to retrieve all sessions connected to the given elements in the place hierarchy
        * a list of `RightSpecifications`, to retrieve all sessions with segments using any of the given rights
        * one or more `HolderCredentials` to get sessions linked to the given credentials
        * startBefore: to get sessions starting before a given instant
        * endBefore: to get sessions ending before a given instant
        * startAfter: to get sessions starting after a given instant
        * endAfter: to get sessions ending after a given instant
        * a modification instant: to only display changed resources from that point onwards
        Additionally, supports providing a comma-separated list of optional object attributes associated to a `Session` or `Segment` that should be included in the result set. If unused or left blank, `none` will be assumed.
      operationId: get-sessions
      tags:
        - List
      parameters:
        - $ref: '#/components/parameters/right_specs_list'
        - $ref: '#/components/parameters/cred_type'
        - $ref: '#/components/parameters/cred_class_list'
        - $ref: '#/components/parameters/cred_id_list'
        - $ref: '#/components/parameters/place_list'
        - $ref: '#/components/parameters/sessions_expand'
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/long'
        - $ref: '#/components/parameters/radius'
        - $ref: '#/components/parameters/mod'
        - $ref: '#/components/parameters/start_before'
        - $ref: '#/components/parameters/end_before'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/end_after'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionList'

    post:
      summary: Create Session
      description: |-
        Allows the creation of a new Session, along with one or more Segments. 
        It also allows the creation of an AssignedRight, for scenarios in which the Session and the AssignedRight are created simultaneously (e.g. off-street and on-street short stays)
      operationId: post-sessions
      tags:
        - Create
      requestBody:
        description: The Session, Segments (and potentially AssignedRight) to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

  /sessions/{id}:

    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Identifier for the `Session`

    get:
      summary: Get Session
      description: Get latest version of a given `Session` by its identifier (or a particular previous version when provided as a query parameter)
      operationId: get-sessions-id
      tags:
        - Get
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/sessions_expand'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

    put:
      summary: Update Session
      description: |-
        Update an existing Session (or Segment). 
        Segments may also be deleted using this method, by removing them from the list of segments under the Session. 
        Session may also be updated by referencing a `Quote` through a `ReferenceQuoteExtension`
      operationId: put-sessions-id
      tags:
        - Update
      requestBody:
        description: The `Session` (and `Segments`) to update, including only their changed attributes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSession'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided

    delete:
      summary: Delete Session
      description: |-
        Delete an existing `Session`. 
        `Segments` should be deleted by using the `PUT` operation, and removing them from the list of segments under the session
      operationId: delete-sessions-id
      tags:
        - Delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided

  ################# RIGHTS ASSIGNED #################

  /rights/assigned:

    get:
      summary: List AssignedRights
      description: |-
        Lists AssignedRights and allows searching/filtering by :
        * one or more `HolderCredentials` and `RightSpecifications`, to check if given credentials have any of the given rights to park
        * latitude, longitude, radius: to check for `AssignedRights` within a geographic area
        * a list of `Places`, to retrieve all assigned rights within a set of parking locations
        * start_before: to get sessions starting before a given instant
        * end_before: to get sessions ending before a given instant
        * start_after: to get sessions starting after a given instant
        * end_after: to get sessions ending after a given instant
        * a modification instant: to only display changed resources from that point onwards
        Additionally, supports providing a comma-separated list of optional object attributes associated to an `AssignedRight` that should be included in the result set. If unused or left blank, `none` will be assumed.
      operationId: list-assigned_rights
      tags:
        - List
      parameters:
        - $ref: '#/components/parameters/right_specs_list'
        - $ref: '#/components/parameters/cred_type'
        - $ref: '#/components/parameters/cred_class_list'
        - $ref: '#/components/parameters/cred_id_list'
        - $ref: '#/components/parameters/place_list'
        - $ref: '#/components/parameters/assigned_expand'
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/long'
        - $ref: '#/components/parameters/radius'
        - $ref: '#/components/parameters/mod'
        - $ref: '#/components/parameters/start_before'
        - $ref: '#/components/parameters/end_before'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/end_after'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignedRightList'

    post:
      summary: Create AssignedRight
      description: Create a new AssignedRight based on a given object or referencing a Quote
      operationId: create-assigned_right
      tags:
        - Create
      requestBody:
        description: This method allows an issuer to assign a parking right to a holder
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssignedRight'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                created:
                  value:
                    status: ok
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes

  /rights/assigned/{id}:

    parameters:
      - schema:
          type: string
        name: id
        in: path
        description: Identifier for the AssignedRight
        required: true

    get:
      summary: Get AssignedRight
      description: Get latest version of a given `AssignedRight` by its identifier (or a particular previous version when provided as a query parameter)
      operationId: read-assigned_right
      tags:
        - Get
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/assigned_expand'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignedRight'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

    put:
      summary: Update AssignedRight
      description: |-
        Update an existing `AssignedRight` based on its object or with reference to a `Quote`. 
        If the Quote refers to a Session Extension, this request shall also update the referenced Session'
      operationId: update-assigned_right
      tags:
        - Update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutAssignedRight'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided

    delete:
      summary: Delete AssignedRight
      description: Delete an existing Assigned Right using its id
      operationId: delete-assigned_right
      tags:
        - Delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                bad-request:
                  value:
                    status: error
                    code: 400
                    message: Did not provide version number
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided

  ################# RIGHT SPECIFICATIONS #################

  /rights/specs:

    get:
      summary: List RightSpecifications
      description: |-
        Lists `RightSpecifications` and allows filtering by :
        * latitude, longitude, radius: to check for `RightSpecifications` within a geographic area
        * a `Place`, to retrieve all assigned rights within a parking location
        * a modification instant: to only display changed resources from that point onwards
        Additionally, supports providing a comma-separated list of optional object attributes associated to an `RightSpecification` that should be included in the result set. If unused or left blank, `none` will be assumed.
      operationId: list-rights-specs
      tags:
        - List
      parameters:
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/long'
        - $ref: '#/components/parameters/radius'
        - $ref: '#/components/parameters/specs_expand'
        - $ref: '#/components/parameters/mod'
        - $ref: '#/components/parameters/cred_type'
        - $ref: '#/components/parameters/place_list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RightSpecificationList'

    post:
      summary: Create RightSpecification
      description: Create a new `RightSpecification`.
      operationId: post-rights-specs
      tags:
        - Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RightSpecification'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

  /rights/specs/{id}:

    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Identifier for the `RightSpecification`

    get:
      summary: Get RightSpecification
      description: Get latest version of a given `RightSpecification` by its identifier (or a particular previous version when provided as a query parameter)
      operationId: get-rights-specs-id
      tags:
        - Get
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/specs_expand'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RightSpecification'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

    put:
      summary: Update RightSpecification
      description: Update an existing `RightSpecification`
      operationId: put-rights-specs-id
      tags:
        - Update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RightSpecification'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided

    delete:
      summary: Delete RightSpecification
      description: Delete a `RightSpecification`
      operationId: delete-rights-specs-id
      tags:
        - Delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                bad-request:
                  value:
                    status: error
                    code: 400
                    message: Did not provide version number
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided

  ################# RATES #################

  /rates:

    get:
      summary: List RateTables
      description: |-
        Lists `RateTables` and allows searching/filtering by :
        * latitude, longitude, radius: to check for `AssignedRights` within a geographic area
        * a list of `Places`, to retrieve all rates connected to `AssignedRights` that belong to any of the given places
        * a list of `RightSpecifications`, to retrieve all the connected 
        * a modification instant: to only display changed resources from that point onwards
        Additionally, supports providing a comma-separated list of optional object attributes associated to a `RateTable` that should be included in the result set. If unused or left blank, `none` will be assumed.
      operationId: get-rates
      tags:
        - List
      parameters:
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/long'
        - $ref: '#/components/parameters/radius'
        - $ref: '#/components/parameters/rates_expand'
        - $ref: '#/components/parameters/mod'
        - $ref: '#/components/parameters/place_list'
        - $ref: '#/components/parameters/right_specs_list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateTableList'

    post:
      summary: Create RateTable
      description: Create a `RateTable`
      operationId: post-rates
      tags:
        - Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateTable'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

  /rates/{id}:

    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Identifier for the `RateTable`

    get:
      summary: Get RateTable
      description: Get latest version of a given `RateTable` by its identifier
      operationId: get-rates-id
      tags:
        - Get
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/rates_expand'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateTable'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

    put:
      summary: Update RateTable
      description: Update an existing `RateTable`
      operationId: put-rates-id
      tags:
        - Update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateTable'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided

    delete:
      summary: Delete RateTable
      description: Delete an existing `RateTable`
      operationId: delete-rates-id
      tags:
        - Delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                bad-request:
                  value:
                    status: error
                    code: 400
                    message: Did not provide version number
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided

  ################# PLACES #################

  /places:

    get:
      summary: List Place Hierarchy
      description: |-
        Lists `Places` and allows searching/filtering by :
        * `latitude`, `longitude`, `radius`: to check for elements in the `Place` hierarchy within a geographic area
        * a modification instant (`modified_since`): to only display changed resources from that point onwards
        * `layer`: maximum hierarchy element layer desired
        * `type`: types of hierarchy elements
        * `right_type`: types of `RightSpecifications` associated with Place hierarchy elements
        * `structure_type`: types of structure
        * `structure_grade`: grades of structures
        * `name`: name of facilities
        Additionally, supports providing a comma-separated list of optional object attributes associated to a `Place` hierarchy element that should be included in the result set. (see `expand` attribute). If unused or left blank, `none` will be assumed.
      operationId: get-places
      tags:
        - List
      parameters:
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/long'
        - $ref: '#/components/parameters/radius'
        - $ref: '#/components/parameters/places_expand'
        - schema:
            type: integer
          in: query
          name: layer
          description: 'Most detailed (lower-level) layer of data desired. 0 (zero) being the first level (and higher numbers correspond to lower-levels of information). If left empty, the entire Place hierarchy that matches the remaining parameters will be returned'
        - $ref: '#/components/parameters/place_type'
        - $ref: '#/components/parameters/right_type'
        - $ref: '#/components/parameters/structure_type'
        - $ref: '#/components/parameters/structure_grade'
        - schema:
            type: string
          in: query
          name: name
          description: Name of place hierarchy element (in any of its supported languages)
        - $ref: '#/components/parameters/mod'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HierarchyElementList'

    post:
      summary: Create Place Hierarchy
      description: Create a new element in the `Place` hierarchy
      operationId: post-places
      tags:
        - Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HierarchyElement'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

  /places/{id}:

    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Unique identifier for place hierarchy element

    get:
      summary: Get Place Hierarchy
      operationId: get-places-id
      description: Get latest version of a given place hierarchy element by its identifier (or a particular previous version when provided as a query parameter)
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/places_expand'
      tags:
        - Get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HierarchyElement'

    put:
      summary: Update Place Hierarchy
      description: Update an element in the `Place` hierarchy (or one of its associated attributes like `Occupancy`)
      operationId: put-places-id
      tags:
        - Update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HierarchyElement'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

    delete:
      summary: Delete Place hierarchy element
      description: Delete Place hierarchy element
      operationId: delete-places-id
      tags:
        - Delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

  ################# OBSERVATIONS #################

  /observations:

    get:
      summary: List Observations
      description: |-
        Lists `Observations` and allows searching/filtering by :
        * latitude, longitude, radius: to check for `Observations` within a geographic area
        * a list of `Places`, to retrieve all Observations within a set of parking locations
        * start_before: to get observations starting before a given instant
        * end_before: to get observations ending before a given instant
        * start_after: to get observations starting after a given instant
        * end_after: to get observations ending after a given instant
        * a modification instant: to only display changed resources from that point onwards
        Additionally, supports providing a comma-separated list of optional object attributes associated to an `Observation` that should be included in the result set. If unused or left blank, `none` will be assumed.
      operationId: get-observations
      tags:
        - List
      parameters:
        - $ref: '#/components/parameters/place_list'
        - $ref: '#/components/parameters/observations_expand'
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/long'
        - $ref: '#/components/parameters/radius'
        - $ref: '#/components/parameters/mod'
        - $ref: '#/components/parameters/start_before'
        - $ref: '#/components/parameters/end_before'
        - $ref: '#/components/parameters/start_after'
        - $ref: '#/components/parameters/end_after'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationElementList'

    post:
      summary: Create Observation or Observation Set
      description: Create a singular `Observation` or an `Observation Set`
      operationId: post-observations
      tags:
        - Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateObservation'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

  /observations/{id}:

    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Unique identifier for place hierarchy element

    get:
      summary: Get Observation
      description: Get latest version of a given `Observation` by its identifier (or a particular previous version when provided as a query parameter)
      operationId: get-observations-id
      tags:
        - Get
      parameters:
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/observations_expand'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObservationElement'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

    put:
      summary: Update Observation
      description: Update an existing `Observation`
      operationId: put-observations-id
      tags:
        - Update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObservationElement'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided

    delete:
      summary: Delete an `Observation`
      description: Delete an existing `Observation`
      operationId: delete-observations-id
      tags:
        - Delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                missing-data:
                  value:
                    status: error
                    code: 400
                    message: Missing required attributes
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                not-found:
                  value:
                    status: error
                    code: 404
                    message: Not found
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
              examples:
                conflict:
                  value:
                    status: error
                    code: 409
                    message: Outdated version number provided

  ################ QUOTES #################

  /quotes:

    get:
      summary: List QuoteRequests or QuoteResponses
      description: Lists recorded quote requests and/or responses
      operationId: get-quotes
      tags:
        - List
      parameters:
        - $ref: '#/components/parameters/lat'
        - $ref: '#/components/parameters/long'
        - $ref: '#/components/parameters/radius'
        - $ref: '#/components/parameters/quotes_expand'
        - $ref: '#/components/parameters/mod'
        - $ref: '#/components/parameters/place_list'
        - $ref: '#/components/parameters/right_specs_list'
        - $ref: '#/components/parameters/quote_type'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequestAndResponseList'

    post:
      summary: Create a Quote Request
      description: Creates a Quote Request for any eligible RightSpecifications (via `QuoteRightRequest`) or to extend an existing session (via `QuoteSessionExtensionRequest`)
      operationId: post-quotes
      tags:
        - Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuote'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponseList'

  /quotes/{id}:

    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: the unique id of the quote

    get:
      summary: Get QuoteRequest or QuoteResponse
      description: Retrieves a specific QuoteRequest or QuoteResponse. The `type` element is mandatory
      operationId: get-quotes-id
      tags:
        - Get
      parameters:
        - $ref: '#/components/parameters/quotes_expand'
        - $ref: '#/components/parameters/quote_filter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteRequestAndResponse'

  ################ WEBHOOKS #################

  /webhooks:

    post:
      summary: Subscribe to event topics
      description: Allows an entity with an accessible API endpoint to subscribe to a set of event topics
      operationId: post-webhooks
      tags:
        - Create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSubscription'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSubscriptionConfirmation'

      callbacks:
        placeEvent:
          '{$request.body#/endpoint}':
            post:
              summary: The endpoint for webhook subscribers
              responses:
                '200':
                  description: ok
              description: |-
                This endpoint describes the payloads that webhook subscribers should expect to receive
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/EventData'

  /webhooks/{id}:

    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The unique identifier for the event subscription

    get:
      summary: Get Event Subscription
      description: Get current configuration for an event subscription
      operationId: get-webhooks-id
      tags:
        - Get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSubscriptionInformation'

    put:

      summary: Update Event Subscription
      description: Update an existing event subscription to a different set of settings
      operationId: put-webhooks-id
      tags:
        - Update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSubscription'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

    delete:
      summary: Delete Event Subscription
      description: Delete an event subscription
      operationId: delete-webhooks-id
      tags:
        - Delete
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStatus'

components:

  schemas:

    # ===== Interfaces ===== #

    PutSession:
      title: PutSession
      description: Interface for the update of a Session
      type: object
      x-package: session
      discriminator:
        propertyName: metaType
        mapping:
          Session: '#/components/schemas/Session'
          ReferenceQuoteExtension: '#/components/schemas/ReferenceQuoteExtension'
      properties:
        metaType:
          type: string
          enum:
            - Session
            - ReferenceQuoteExtension

    PutAssignedRight:
      title: PutAssignedRight
      description: Interface for the update of an AssignedRight
      type: object
      discriminator:
        propertyName: metaType
        mapping:
          AssignedRight: '#/components/schemas/AssignedRight'
          ReferenceToQuote: '#/components/schemas/ReferenceToQuote'
      properties:
        metaType:
          type: string
          enum:
            - AssignedRight
            - ReferenceToQuote

    CreateAssignedRight:
      title: CreateAssignedRight
      description: Interface for the creation of an AssignedRight
      type: object
      x-package: quote
      discriminator:
        propertyName: metaType
        mapping:
          AssignedRight: '#/components/schemas/AssignedRight'
          ReferenceToQuote: '#/components/schemas/ReferenceToQuote'
      properties:
        metaType:
          type: string
          enum:
            - AssignedRight
            - ReferenceToQuote

    CreateObservation:
      title: CreateObservation
      description: Interface for the creation of an Observation or ObservationSet
      type: object
      x-package: observation
      discriminator:
        propertyName: metaType
        mapping:
          Observation: '#/components/schemas/ObservationElement'
          ObservationSet: '#/components/schemas/ObservationSet'
      properties:
        metaType:
          type: string
          enum:
            - Observation
            - ObservationSet

    CreateQuote:
      title: CreateQuote
      description: Interface for the creation of a Quote
      type: object
      x-package: quote
      discriminator:
        propertyName: metaType
        mapping:
          QuoteRightRequest: '#/components/schemas/QuoteRightRequest'
          QuoteSessionExtensionRequest: '#/components/schemas/QuoteSessionExtensionRequest'
      properties:
        metaType:
          type: string
          enum:
            - QuoteRightRequest
            - QuoteSessionExtensionRequest

    EventSubscriptionConfirmation:
      title: EventSubscriptionConfirmation
      description: Interface for the response to a event subscription
      type: object
      x-package: event
      allOf:
        - $ref: '#/components/schemas/ResponseStatus'
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the event subscription
          required:
            - id

    EventSubscriptionInformation:
      title: EventSubscriptionInformation
      description: Interface for the response to a get event subscription
      type: object
      x-package: event
      allOf:
        - $ref: '#/components/schemas/EventSubscription'
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier for the event
            lastModified:
              type: string
              description: Last modified timestamp
              format: date-time
          required:
            - id
            - lastModified


    # ===== Places ===== #

    HierarchyElementRecord:
      title: HierarchyElementRecord
      description: A collection of information concerning the creation of a hierarchy element.
      type: object
      x-package: place
      properties:
        creator:
          $ref: '#/components/schemas/VersionedReference'
        creatorEmail:
          type: string
          format: email
        creationTime:
          type: string
          description: Date/time that this version of the place facility record was created.
          format: date-time
      required:
        - creationTime

    HierarchyElementReference:
      title: HierarchyElementReference
      description: |-
        Class providing a unique reference identifier for a discrete part of the parking place hierarchy. 
        This can indicate a campus, parking place, hierarchy element, identifiable area or space.'
      type: object
      x-package: place
      properties:
        elementId:
          $ref: '#/components/schemas/VersionedReference'
        demandTable:
          type: array
          items:
            $ref: '#/components/schemas/DemandTable'
        supply:
          type: array
          items:
            $ref: '#/components/schemas/Supply'
      required:
        - elementId

    HierarchyElementList:
      title: HierarchyElementList
      description: Paginated list of HierarchyElements
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/PaginatedListMeta'
        - type: object
          properties:
            data:
              type: array
              description: List of HierarchyElements
              items:
                $ref: '#/components/schemas/HierarchyElement'

    HierarchyElement:
      title: HierarchyElement
      description: |-
        A generalised component of a place hierarchy, that forms one element in the tree-like hierarchy. 
        This forms a reusable block of the hierarchy, with relations to its parent element (if one exists) and any child elements. 
        Each Place element in the hierarchy shall have a name, and may support a free-text description and an operator/property owner defined reference (e.g. location number/identifier)'
      type: object
      x-package: place
      discriminator:
        propertyName: hierarchyElementType
        mapping:
          Campus: '#/components/schemas/Campus'
          IdentifiedArea: '#/components/schemas/IdentifiedArea'
          Place: '#/components/schemas/Place'
          Space: '#/components/schemas/Space'
          SubPlaceElement: '#/components/schemas/SubPlaceElement'
          SupplementalEquipment: '#/components/schemas/SupplementalEquipment'
          SupplementalServiceFacility: '#/components/schemas/SupplementalServiceFacility'
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            hierarchyElementType:
              type: string
              description: Discriminator for children classes
              enum:
                - Campus
                - IdentifiedArea
                - Place
                - Space
                - SubPlaceElement
                - SupplementalEquipment
                - SupplementalServiceFacility
            name:
              $ref: '#/components/schemas/MultilingualString'
            description:
              $ref: '#/components/schemas/MultilingualString'
            layer:
              type: integer
              minimum: 0
              description: |-
                Indicator of the position of this hierarchy element in the specific hierarchy, with the
                top of the hierarchy numbered layer 0.
            type:
              $ref: '#/components/schemas/HierarchyElementTypeEnum'
            aliases:
              type: array
              description: Alternative names for the hierarchy element.
              items:
                $ref: '#/components/schemas/MultilingualString'
            parentId:
              $ref: '#/components/schemas/VersionedReference'
            childIds:
              type: array
              description: The identity of one or several child nodes directly related to this hierarchy element.
              items:
                $ref: '#/components/schemas/VersionedReference'
            operatorDefinedReference:
              $ref: '#/components/schemas/MultilingualString'
            hierarchyElementRecord:
              $ref: '#/components/schemas/HierarchyElementRecord'
            rightSpecifications:
              type: array
              description: RightSpecifications associated to the element
              items:
                $ref: '#/components/schemas/VersionedReference'
            hierarchyElementReference:
              $ref: '#/components/schemas/HierarchyElementReference'
            occupancyLevel:
              $ref: '#/components/schemas/OccupancyLevel'
          required:
            - hierarchyElementType
            - name
            - layer
            - type
            - hierarchyElementRecord

    Campus:
      title: Campus
      description: |-
        The highest level in the hierarchy, it typically defines a large facility (such as a university campus, or an airport), 
        or a large geographic zone (such as a city or a town), which may contain numerous Places. 
        A Campus combines and encompasses a number of Places that can be logically reported together.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/HierarchyElement'

    IdentifiedArea:
      title: IdentifiedArea
      description: |-
        An identifiable discrete bounded geographic zone that shares common characteristics and that may be used for 
        parking related or other purposes. 
        Identified Areas are segmented into two types : Vehicular Access class and Specific Area class.
      type: object
      x-package: place
      discriminator:
        propertyName: identifiedAreaType
        mapping:
          SpecificArea: '#/components/schemas/SpecificArea'
          SupplementalFacility: '#/components/schemas/SupplementalFacility'
          VehicularAccess: '#/components/schemas/VehicularAccess'
      allOf:
        - $ref: '#/components/schemas/HierarchyElement'
        - type: object
          properties:
            identifiedAreaType:
              type: string
              description: The identified area type
              enum:
                - SpecificArea
                - SupplementalFacility
                - VehicularAccess
            streetAddress:
              type: array
              description: Identified area street address.
              items:
                $ref: '#/components/schemas/Address'
            areaBoundedZone:
              type: array
              description: Identified area bounded zone.
              items:
                $ref: '#/components/schemas/AreaLocation'
            indicativeIdentifiedAreaPointLocation:
              type: array
              description: Indicative identified area point location.
              items:
                $ref: '#/components/schemas/PointLocation'
            times:
              $ref: '#/components/schemas/Times'
            operatingRestrictions:
              type: array
              description: Operating restrictions
              items:
                $ref: '#/components/schemas/OperatingRestrictions'
          required:
            - identifiedAreaType

    SpecificArea:
      title: SpecificArea
      description: |-
        Specific Area class is a type of Identified Area data element that denotes a specific geographic area in a Place that has a common physical infrastructure purpose and common characteristics. 
        Examples of common infrastructure purpose include parking area, electric charging infrastructure, bike storage. The Specific Area class describes the physical components of a Place.
        Specific Area type Identified Area is used to assign Rights.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/IdentifiedArea'
        - type: object
          properties:
            characteristics:
              $ref: '#/components/schemas/Characteristics'

    VehicularAccess:
      title: VehicularAccess
      description: |-
        A specialisation of an identifiedArea defining a VehicularAccess areas.
        Note: This model only supports the modelling of vehicular accesses at the present time. 
        Other forms of access (e.g. pedestrian access, rental vehicle return, bicycle access, etc) may be introduced during a later Release if a stakeholder requirement is identified.
        AccessType enumerations for the Vehicular Access type support the definition of characteristics for access into, from and both to and from a parking facility or part thereof respectively (denoted by the type attribute, using the AccessType enumerations). Each of the AccessLaneType enumerations may support the definition of characteristics for each lane within the specific Identified Area. Preferred practice gives a sequence number to each lane left to right when entering the facility.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/IdentifiedArea'
        - type: object
          properties:
            accessLaneSpecifics:
              type: array
              description: Access lane specific
              items:
                $ref: '#/components/schemas/AccessLaneSpecific'
            accessAndEgress:
              type: array
              description: Access and egress
              items:
                $ref: '#/components/schemas/AccessAndEgress'
            accessType:
              $ref: '#/components/schemas/AccessTypeEnum'
            primaryRoads:
              type: array
              description: Primary road
              items:
                $ref: '#/components/schemas/Road'
          required:
            - accessType

    SupplementalFacility:
      title: SupplementalFacility
      description: One type of supplemental facility which can be supplemental equipment or a supplemental service facility.
      type: object
      x-package: place
      discriminator:
        propertyName: supplementalFacilityType
        mapping:
          ElectricChargingEquipment: '#/components/schemas/ElectricChargingEquipment'
          SupplementalEquipment: '#/components/schemas/SupplementalEquipment'
          SupplementalServiceFacility: '#/components/schemas/SupplementalServiceFacility'
      allOf:
        - $ref: '#/components/schemas/IdentifiedArea'
        - type: object
          properties:
            supplementalFacilityType:
              type: string
              description: The supplemental facility type
              enum:
                - ElectricChargingEquipment
                - SupplementalEquipment
                - SupplementalServiceFacility
            accessibility:
              type: array
              description: Information on accessibility, easements and marking for handicapped people.
              items:
                $ref: '#/components/schemas/AccessibilityEnum'
            additionalDescription:
              $ref: '#/components/schemas/MultilingualString'
            applicableForUsers:
              type: array
              description: Limitation to a set of special users.
              items:
                $ref: '#/components/schemas/UserTypeEnum'
            comment:
              $ref: '#/components/schemas/MultilingualString'
            externalIdentifiers:
              type: array
              description: |-
                An external identifier for the supplemental facility, e.g. an inventory number. 
                This attribute has an unbounded multiplicity to support identifiers for multiple occurrences of this element.'
              items:
                type: string
            nameOrBrand:
              $ref: '#/components/schemas/MultilingualString'
            otherSupplementalFacility:
              type: array
              items:
                $ref: '#/components/schemas/MultilingualString'
            photoUrl:
              $ref: '#/components/schemas/Url'
            quantity:
              type: integer
              minimum: 0
              description: |-
                Number of the supplemental facility (e.g. number of toilets, restaurants, park & ride places, etc.) with respect to given restrictions. 
                Dynamic overridable.
            regularlyCleaned:
              type: boolean
              description: Indication, if the supplemental facility is cleaned on a regular basis.
            rightSpecificationIds:
              type: array
              description: List of applicable right specifications
              items:
                $ref: '#/components/schemas/VersionedReference'
            supplementalFacilityIndex:
              type: integer
              description: An index to link this supplemental facility between the static and dynamic publications.
          required:
            - supplementalFacilityIndex

    ElectricChargingEquipment:
      title: ElectricChargingEquipment
      description: A specialisation to the SupplementalFacility class adding an ElectricChargingPoint.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/SupplementalFacility'
        - type: object
          properties:
            electricChargingPoint:
              $ref: '#/components/schemas/ElectricChargingPoint'
          required:
            - electricChargingPoint

    SupplementalEquipment:
      title: SupplementalEquipment
      description: |-
        One type of supplemental equipment, which is available on some site, for example on a rest area.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/SupplementalFacility'
        - type: object
          properties:
            equipmentType:
              $ref: '#/components/schemas/EquipmentTypeEnum'
            refillPoints:
              type: array
              items:
                $ref: '#/components/schemas/RefillPoint'
          required:
            - equipmentType

    SupplementalServiceFacility:
      title: SupplementalServiceFacility
      description: |-
        One type of supplemental service facility. 
        You can specify the number of this service facility type (e.g. 5 restaurants) as well as the number of sub-items (e.g. 200 restaurant places).
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/SupplementalFacility'
        - type: object
          properties:
            distanceFromOriginFacility:
              type: integer
              description: |-
                Approximate distance (given in metres) between this supplemental facility and some origin facility to 
                which it is clearly related (typically a larger facility, e.g. a parking site).
              minimum: 0
            numberOfSubItems:
              type: integer
              description: |-
                The quantity of sub items to this service facility type, e.g. the total number of restaurant places or fuel dispensers etc.'
              minimum: 0
            serviceFacilityType:
              $ref: '#/components/schemas/ServiceFacilityTypeEnum'
          required:
            - serviceFacilityType

    Space:
      title: Space
      description: |-
        A single space for parking, usually designed for one vehicle, which may, but not necessarily, be denoted by painted or other road surface marker.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/HierarchyElement'
        - type: object
          properties:
            spaceId:
              $ref: '#/components/schemas/Reference'
            detection:
              $ref: '#/components/schemas/ParkingSpaceOccupancyDetectionEnum'
            indicativePointLocation:
              $ref: '#/components/schemas/PointLocation'
            spaceBoundedZone:
              $ref: '#/components/schemas/AreaLocation'
            spaceDimension:
              $ref: '#/components/schemas/SpaceDimension'
            spaceMaximumDims:
              $ref: '#/components/schemas/MaximumDimensions'
            operatingRestrictions:
              type: array
              description: Operating restrictions for space
              items:
                $ref: '#/components/schemas/OperatingRestrictions'
          required:
            - spaceId

    Place:
      title: Place
      description: |-
        A place or location used for parking, loading, unloading, standing, or some other mobility or transport related activity. 
        Place typically identifies a parking structure, surface lot or on street parking zone
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/HierarchyElement'
        - $ref: '#/components/schemas/CommonComponents'
        - type: object
          properties:
            timeZone:
              type: string
              description: 'IANA time-zone (see http://www.iana.org/time-zones)'
            placeStreetAddress:
              type: array
              description: Place street address
              items:
                $ref: '#/components/schemas/Address'
            placeBoundedZone:
              type: array
              description: Place bounded zone
              items:
                $ref: '#/components/schemas/AreaLocation'
            indicativePlacePointLocation:
              type: array
              description: Indicative place point location
              items:
                $ref: '#/components/schemas/PointLocation'
          required:
            - timeZone

    SubPlaceElement:
      title: SubPlaceElement
      description: |-
        A sub-division of a Place for the convenience of the operator that may be used for parking related or other purposes. 
        Examples of HierarchyElement include a floor or level, specific street or row of a car parking facility
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/HierarchyElement'
        - $ref: '#/components/schemas/CommonComponents'
        - type: object
          properties:
            elementDescriptor:
              $ref: '#/components/schemas/ElementDescriptorEnum'
            elementStreetAddress:
              type: array
              description: Place street address
              items:
                $ref: '#/components/schemas/Address'
            elementAreaLocation:
              type: array
              description: Place bounded zone
              items:
                $ref: '#/components/schemas/AreaLocation'
            notionalElementLocation:
              type: array
              description: Indicative place point location
              items:
                $ref: '#/components/schemas/PointLocation'

    Road:
      title: Road
      description: |-
        Identification of a road by its name, identifier, type...
      type: object
      x-package: place
      discriminator:
        propertyName: roadType
        mapping:
          RoadNode: '#/components/schemas/RoadNode'
      properties:
        roadType:
          type: string
          description: The road type
          enum:
            - RoadNode
        distanceToThisRoad:
          $ref: '#/components/schemas/LinearDimension'
        nameOfRoad:
          $ref: '#/components/schemas/MultilingualString'
        roadDestination:
          type: array
          description: |-
            Name of some city, area, compass direction or other identification the road is leading to (to determine the direction in question).
          items:
            $ref: '#/components/schemas/MultilingualString'
        roadIdentifier:
          $ref: '#/components/schemas/MultilingualString'
        roadOrigination:
          type: array
          description: |-
            Name of some city, area, compass direction or other identification this road comes from.
          items:
            $ref: '#/components/schemas/MultilingualString'
        typeOfRoad:
          $ref: '#/components/schemas/RoadTypeEnum'

    RoadNode:
      title: RoadNode
      description: |-
        A road node as part of the specialised road identified by the name of a junction on this road.
      type: object
      x-package: place
      allOf:
        - $ref: '#/components/schemas/Road'
        - type: object
          properties:
            junctionName:
              $ref: '#/components/schemas/MultilingualString'
          required:
            - junctionName

    # ===== Places - GeoJson ===== #

    GeoJsonGeometryTypeEnum:
      title: GeoJsonGeometryTypeEnum
      description: GeoJson geometry type
      type: object
      x-package: place.geojson.enums
      enum:
        - Point
        - LineString
        - Polygon
        - MultiPoint
        - MultiLineString
        - MultiPolygon

    GeoJsonGeometry:
      title: GeoJsonGeometry
      description: GeoJson geometry object
      type: object
      x-package: place.geojson
      discriminator:
        propertyName: geoJsonGeometryType
        mapping:
          GeoJsonPoint: '#/components/schemas/GeoJsonPoint'
          GeoJsonLineString: '#/components/schemas/GeoJsonLineString'
          GeoJsonMultiPolygon: '#/components/schemas/GeoJsonMultiPolygon'
      properties:
        geoJsonGeometryType:
          type: string
          description: The GeoJson object type
          enum:
            - GeoJsonPoint
            - GeoJsonLineString
            - GeoJsonMultiPolygon
        type:
          $ref: '#/components/schemas/GeoJsonGeometryTypeEnum'
      required:
        - geoJsonGeometryType
        - type

    GeoJsonPoint:
      title: GeoJsonPoint
      description: GeoJson Point
      type: object
      x-package: place.geojson
      allOf:
        - $ref: '#/components/schemas/GeoJsonGeometry'
        - type: object
          properties:
            coordinates:
              $ref: '#/components/schemas/GeoJson2DPoint'

    GeoJsonLineString:
      title: GeoJsonLineString
      description: GeoJson Line String
      type: object
      x-package: place.geojson
      allOf:
        - $ref: '#/components/schemas/GeoJsonGeometry'
        - type: object
          properties:
            coordinates:
              type: array
              minItems: 2
              items:
                $ref: '#/components/schemas/GeoJson2DPoint'

    GeoJsonMultiPolygon:
      title: GeoJsonMultiPolygon
      description: GeoJson MultiPolygon
      type: object
      x-package: place.geojson
      allOf:
        - $ref: '#/components/schemas/GeoJsonGeometry'
        - type: object
          properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/GeoJson2DPoint'

    GeoJson2DPoint:
      title: GeoJson2DPoint
      description: GeoJson 2D Point
      type: array
      x-package: place.geojson
      maxItems: 2
      minItems: 2
      items:
        type: number

    # ===== Places - Location ===== #

    NamedArea:
      title: NamedArea
      description: |-
        An area defined by a name and/or in terms of known boundaries, such as country or county boundaries or allocated control area of particular authority. 
        The attributes do not form a union; instead, the smallest intersection forms the resulting area.
      type: object
      x-package: place.location
      discriminator:
        propertyName: namedAreaType
        mapping:
          IsoNamedArea: '#/components/schemas/IsoNamedArea'
          NutsNamedArea: '#/components/schemas/NutsNamedArea'
      properties:
        namedAreaType:
          type: string
          description: The type of NamedArea
          enum:
            - IsoNamedArea
            - NutsNamedArea
        areaName:
          $ref: '#/components/schemas/MultilingualString'
        country:
          $ref: '#/components/schemas/CountryCode'
      required:
        - namedAreaType
        - areaName

    IsoNamedArea:
      title: IsoNamedArea
      description: The ISO 3166-2 representation for the named area.
      type: object
      x-package: place.location
      allOf:
        - $ref: '#/components/schemas/NamedArea'
        - type: object
          properties:
            subdivisionCode:
              type: string
              description: ISO 3166-2 country sub-division code (up to 3 characters).
              minLength: 0
              maxLength: 3
            subdivisionType:
              $ref: '#/components/schemas/SubdivisionTypeEnum'
          required:
            - subdivisionCode
            - subdivisionType

    NutsNamedArea:
      title: NutsNamedArea
      description: |-
        The NUTS-Code representation for the named area (Nomenclature of territorial units for statistics) or 
        its LAU code representation (Local Administrative Unit).
      type: object
      x-package: place.location
      allOf:
        - $ref: '#/components/schemas/NamedArea'
        - type: object
          properties:
            nutsCode:
              $ref: '#/components/schemas/MultilingualString'
            nutsCodeType:
              $ref: '#/components/schemas/NutsCodeTypeEnum'
          required:
            - nutsCode
            - nutsCodeType

    HeightCoordinate:
      title: HeightCoordinate
      description: Third coordinate for points defined geodesically
      type: object
      x-package: place.location
      properties:
        heightType:
          $ref: '#/components/schemas/HeightTypeEnum'
        heightValue:
          type: string
          description: |-
            Value in defined unit (metres) for the height measured vertically at to the planar coordinates the point corresponding. 
            Note alteration from DATEXII definition.
      required:
        - heightValue

    PointCoordinates:
      title: PointCoordinates
      description: |-
        A pair of planar coordinates defining the geodetic position of a single
        point using a defined Coordinate Reference System.
      type: object
      x-package: place.location
      properties:
        epsgCode:
          type: string
          description: Code referencing a specific Coordinate Reference System in the EPSG (European Petroleum Survey Group) register
          pattern: "^EPSG:\\d{4}$"
          example: 'EPSG:3857'
        x:
          type: number
          description: X coordinate in the defined Coordinate Referencing System indicated by the EPSG code
          format: float
        y:
          type: number
          description: Y coordinate in the defined Coordinate Referencing System indicated by the EPSG code
          format: float
        heightCoordinates:
          type: array
          description: Height coordinate
          maxItems: 3
          items:
            $ref: '#/components/schemas/HeightCoordinate'
      required:
        - epsgCode
        - x
        - y

    PointByCoordinates:
      title: PointByCoordinates
      description: A single point defined only by a coordinate set with an optional bearing direction
      type: object
      x-package: place.location
      properties:
        pointCoordinates:
          $ref: '#/components/schemas/PointCoordinates'
        bearing:
          type: integer
          description: A bearing at the point measured in degrees (0 - 359). Unless otherwise specified the reference direction corresponding to 0 degrees is North.
          minimum: 0
          maximum: 359
      required:
        - pointCoordinates

    PointLocation:
      title: PointLocation
      description: Location representing a single geospatial point using GeoJSON or the standard APDS model.
      type: object
      x-package: place.location
      properties:
        geoJson:
          $ref: '#/components/schemas/GeoJsonPoint'
        pointCoordinates:
          $ref: '#/components/schemas/PointByCoordinates'

    LinearLocation:
      title: LinearLocation
      description: |-
        Describes linear locations (eg. stretches of road). Only GeoJSON supported in this document, 
        but should be extended to support OpenLr and GML, as per the APDS documentation.
      type: object
      x-package: place.location
      properties:
        geoJson:
          $ref: '#/components/schemas/GeoJsonLineString'

    AreaLocation:
      title: AreaLocation
      description: Location representing a geographic or geometric defined area (using GeoJSON)
      type: object
      x-package: place.location
      properties:
        geoJson:
          $ref: '#/components/schemas/GeoJsonMultiPolygon'
        namedArea:
          $ref: '#/components/schemas/NamedArea'

    # ===== Places - Contact ===== #

    ContactTypeEnum:
      title: ContactTypeEnum
      description: |-
        Defines the supported lists of types of contact.
        * `customerService`: Contact details for parking customer support for a facility or specific entity
        * `emergencyContact`: Contact details for emergency assistance or support for a facility or specific entity specifically related to parking operations
        * `operator`: Contact details for the parking operator for a facility or specific entity
        * `owner`: Contact details for the owner of a facility or specific entity.
        * `propertyManager`: Contact details for the property manager of a facility or related facility.
        * `securityService`: Contact details for security services for a facility or specific entity
      type: string
      x-package: place.contact.enums
      enum:
        - customerService
        - emergencyContact
        - operator
        - owner
        - propertyManager
        - securityService

    EmailTypeEnum:
      title: EmailTypeEnum
      description: |-
        Defines the supported lists of different email contact types
        * `customerService`: The email contact is for customer service.
        * `general`: The email contact is general in nature.
        * `helpdesk`: The email contact is a helpdesk.
        * `individual`: The email contact is for a specified individual.
      type: string
      x-package: place.contact.enums
      enum:
        - customerService
        - general
        - helpdesk
        - individual

    EMailCommonData:
      title: EMailCommonData
      description: A class defining information concerning an email point of contact.
      type: object
      x-package: place.contact
      properties:
        primaryFlag:
          description: |-
            If [TRUE], this indicates that this is the primary point of contact
          type: boolean
        typeCode:
          $ref: '#/components/schemas/EmailTypeEnum'

    TelephoneContact:
      title: TelephoneContact
      description: A class defining information relating to a specific telephone point of contact.
      type: object
      x-package: place.contact
      properties:
        areaCode:
          type: string
          description: The area code element of a telephone number.
        extensionNumbers:
          type: array
          description: Any extension number typically within a larger organisation's telephone exchange system.
          items:
            type: string
        ituCountryCode:
          type: string
          description: |-
            Country calling codes or country dial in codes are telephone dialing prefixes for the member countries or 
            regions of the International Telecommunication Union (ITU). 
            They are defined by the ITU-T in standards E.123 and E.164.
        localNumbers:
          type: array
          description: The local code element of a telephone number.
          items:
            type: string

    Contact:
      title: Contact
      description: Address and contact information about some person, service or the parking site, provided in detail or via reference.
      type: object
      x-package: place.contact
      discriminator:
        propertyName: contactType
        mapping:
          ContactByReference: '#/components/schemas/ContactByReference'
          ContactPoint: '#/components/schemas/ContactPoint'
      properties:
        contactType:
          type: string
          description: The contact object type
          enum:
            - ContactByReference
            - ContactPoint
        contactNotDefined:
          type: boolean
          description: |-
            When [TRUE], there is currently no contact defined for the selected role and/or timeframe. 
            Don't use the specialisations in this case.
        contactUnknown:
          type: boolean
          description: |-
            When [TRUE], the contact for the selected role and/or timeframe is unknown. 
            Don't use the specialisations in this case.
        shareWithPublic:
          type: boolean
          description: |-
            When [TRUE], the details of this contact may be shared with the public. 
            If FALSE these contacts details are for internal purposes only.
        validityOfContact:
          $ref: '#/components/schemas/OverallPeriod'

    ContactByReference:
      title: ContactByReference
      description: Contact information that is addressed via a reference.
      type: object
      x-package: place.contact
      allOf:
        - $ref: '#/components/schemas/Contact'
        - type: object
          properties:
            contactReference:
              $ref: '#/components/schemas/VersionedReference'
          required:
            - contactReference

    ContactDetails:
      title: ContactDetails
      description: |-
        Details for some person, service or the parking site itself, especially address information.
      type: object
      x-package: place.contact
      properties:
        available24hours:
          type: boolean
          description: |-
            Specifies if the availability is 24 hours a day. If [TRUE] available 24 hours. 
            If omitted, this information is unknown or heterogeneous.
        contactDetailsFax:
          type: string
          description: Fax of the contact.
        contactDetailsLanguage:
          type: array
          description: Language(s) this contact is able to speak resp. understand.
          items:
            $ref: '#/components/schemas/LanguageCode'
        contactDetailsLogoUrl:
          $ref: '#/components/schemas/Url'
        contactDetailsMoreInfo:
          $ref: '#/components/schemas/MultilingualString'
        contactDetailsResponsibility:
          $ref: '#/components/schemas/MultilingualString'
        contactPersonFirstName:
          type: string
          description: First name of the contact person.
        contactPersonName:
          type: string
          description: Name of the contact person.
        contactPersonPosition:
          $ref: '#/components/schemas/MultilingualString'
        publishingAgreement:
          type: boolean
          description: Indication, whether the contact accepted publishing its contact information [TRUE] = accepted.
        urlLinkAddress:
          $ref: '#/components/schemas/Url'

    ContactPoint:
      title: ContactPoint
      description: |-
        Defines contact details for specified role. 
        Organisation name attribute should not be used in combination with role `parkingSiteAddress`.
      type: object
      x-package: place.contact
      allOf:
        - $ref: '#/components/schemas/Contact'
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            organisationName:
              $ref: '#/components/schemas/MultilingualString'
            type:
              $ref: '#/components/schemas/ContactTypeEnum'
            address:
              type: array
              description: Addresses.
              items:
                $ref: '#/components/schemas/Address'
            contactDetails:
              type: array
              description: Contact details.
              items:
                $ref: '#/components/schemas/ContactDetails'
            eMailCommonData:
              type: array
              description: Email common data.
              items:
                $ref: '#/components/schemas/EMailCommonData'
            telephoneContacts:
              type: array
              description: Telephone contact.
              items:
                $ref: '#/components/schemas/TelephoneContact'
            pointLocations:
              type: array
              description: Contact point location.
              items:
                $ref: '#/components/schemas/PointLocation'
          required:
            - type

    Organisation:
      title: Organisation
      description: A legally incorporated body (e.g. company, business, government entity)
      type: object
      x-package: place.contact
      properties:
        linkToGeneralInformation:
          $ref: '#/components/schemas/Url'
        linkToLogo:
          $ref: '#/components/schemas/Url'
        name:
          type: string
          description: Name of the organisation or service.
        shortName:
          type: string
          description: Supplier-defined short abbreviated name for the organisation or service.
        tradingName:
          type: string
          description: Trading or brand name for organisation or service
        validFromDate:
          type: string
          description: Date from which this organisation instance is considered to be valid
          format: date
        validToDate:
          type: string
          description: Date to which this organisation instance is considered to be valid
          format: date
      required:
        - name

    ResponsibilityRoleAssignment:
      title: ResponsibilityRoleAssignment
      description: |-
        The assignment of one or more roles to an ORGANISATION regarding the responsibility it will have 
        regarding the identified Place (e.g. owner, operators, etc.)'
      type: object
      x-package: place.contact
      properties:
        type:
          $ref: '#/components/schemas/ContactTypeEnum'
        contactPoints:
          type: array
          items:
            $ref: '#/components/schemas/ContactPoint'
      required:
        - type

    # ===== Places - Characteristics ===== #

    AddressLine:
      title: AddressLine
      description: |-
        A class defining information concerning one line of a postal address.
      type: object
      x-package: place.characteristics
      properties:
        order:
          type: integer
          minimum: 0
          description: The sequence order that the address line element should be displayed in
        text:
          $ref: '#/components/schemas/MultilingualString'
        type:
          $ref: '#/components/schemas/AddressLineTypeEnum'
      required:
        - order
        - text
        - type

    Address:
      title: Address
      description: |-
        A street oriented addressing structure supporting delivery
      type: object
      x-package: place.characteristics
      properties:
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        city:
          $ref: '#/components/schemas/MultilingualString'
        postCode:
          type: string
          description: Postcode or postal code for the address.
        addressLines:
          type: array
          description: Address lines
          items:
            $ref: '#/components/schemas/AddressLine'

    Characteristics:
      title: Characteristics
      description: A class defining information concerning characteristics relating to a parking facility.
      type: object
      x-package: place.characteristics
      properties:
        accessControlled:
          type: boolean
          description: |-
            Indicates facility has physical access control (e.g. barriers, gates) [TRUE] or no access control [FALSE]
        coveredType:
          $ref: '#/components/schemas/CoveredEnum'
        disabledAccess:
          type: boolean
          description: If [TRUE], there is provision of facilities for disable access available.
        disabledAccessTypes:
          type: array
          description: Defines the type of provision of facilities for disable access available.
          items:
            $ref: '#/components/schemas/AccessibilityEnum'
        evChargingPoints:
          type: integer
          description: Total number of electric vehicle charging points.
          minimum: 0
        openToPublic:
          description: Identifies if this facility is accessible to public use [TRUE] or private use only [FALSE].
          type: boolean
        operatingModes:
          type: array
          description: Defines the mode of parking operation in use.
          items:
            $ref: '#/components/schemas/ParkingOperatingModeEnum'
        robotic:
          type: boolean
          description: |-
            Indicates existence of a robotic parking system - a parking structure where customer leaves vehicle at 
            drop off area and robots move the vehicle to parking location in structure. 
            Default or absence of value indicates [FALSE] = no robotic parking system.
        spacesNonDedicated:
          type: integer
          description: Number of parking spaces that are not assigned for a particular purpose.
          minimum: 0
        spacesTotal:
          type: integer
          description: Total number of parking spaces
          minimum: 0
        staffed:
          $ref: '#/components/schemas/StaffEnum'
        structureGrade:
          $ref: '#/components/schemas/StructureGradeEnum'
        structureType:
          $ref: '#/components/schemas/StructureTypeEnum'

    OperatingRestrictions:
      title: OperatingRestrictions
      description: A class defining operating restrictions.
      type: object
      x-package: place.characteristics
      properties:
        operatingRestriction:
          $ref: '#/components/schemas/OperatingRestrictionsEnum'
        operatingRestrictionContext:
          $ref: '#/components/schemas/MultilingualString'
      required:
        - operatingRestriction

    Marketing:
      title: Marketing
      description: Universal resource locator (URI) that points towards a web site carrying marketing material supplied.
      type: object
      x-package: place.characteristics
      properties:
        imageAlbums:
          type: array
          description: Image albums associated
          items:
            $ref: '#/components/schemas/ImageAlbum'
        webURLs:
          type: array
          items:
            $ref: '#/components/schemas/Url'

    LinearDimension:
      title: LinearDimension
      description: A class defining information concerning a linear measure (distance) with unit.
      type: object
      x-package: place.characteristics
      properties:
        measure:
          type: number
          format: float
          description: 'Quantity in the defined unit of measure.'
        unitOfMeasure:
          $ref: '#/components/schemas/UnitOfMeasureDistanceEnum'
      required:
        - measure
        - unitOfMeasure

    AreaDimension:
      title: AreaDimension
      type: object
      description: A class defining information concerning an area measurement with unit.
      x-package: place.characteristics
      properties:
        measure:
          type: number
          format: float
          description: 'Quantity in the defined unit of measure.'
        unitOfMeasure:
          $ref: '#/components/schemas/UnitOfMeasureAreaEnum'
      required:
        - measure
        - unitOfMeasure

    WeightDimension:
      title: WeightDimension
      description: A class defining information concerning a weight quantity with unit.
      type: object
      x-package: place.characteristics
      properties:
        measure:
          type: number
          description: 'Quantity in the defined unit of measure.'
          format: float
        unitOfMeasure:
          $ref: '#/components/schemas/UnitOfMeasureWeightEnum'
      required:
        - measure
        - unitOfMeasure

    MaximumDimensions:
      title: MaximumDimensions
      description: A class defining information relating to the maximum physical dimensions for the defined purpose
      type: object
      x-package: place.characteristics
      properties:
        maximumHeight:
          $ref: '#/components/schemas/LinearDimension'
        maximumLength:
          $ref: '#/components/schemas/LinearDimension'
        maximumWidth:
          $ref: '#/components/schemas/LinearDimension'

    SpaceDimension:
      title: SpaceDimension
      description: |-
        A component that provides dimension information. 
        The product of width and height must not be necessarily be the square footage (e.g. in multi-storey buildings or when some zones are not part of the square footage).
      type: object
      x-package: place.characteristics
      properties:
        dimensionHeight:
          $ref: '#/components/schemas/LinearDimension'
        dimensionLength:
          $ref: '#/components/schemas/LinearDimension'
        dimensionWidth:
          $ref: '#/components/schemas/LinearDimension'
        dimensionUsableArea:
          $ref: '#/components/schemas/AreaDimension'
        weightLimit:
          $ref: '#/components/schemas/WeightDimension'

    AccessLaneSpecific:
      title: AccessLaneSpecific
      description: |-
        A specialisation of an `identifiedArea` defining `VehicularAccess` areas. 
        Defines the sequence and nature of a specific entrance or exit lane.
      type: object
      x-package: place.characteristics
      properties:
        laneType:
          $ref: '#/components/schemas/AccessLaneTypeEnum'
        sequenceNumber:
          type: integer
          description: |-
            Defines a unique sequence number for this specific lane within the identifiedArea.
            No specific method of numbering is defined. 
            Preferred practice numbers lanes from right to left as seen in-bound into the parking facility.
          minimum: 0
        entranceOpenTimeLaneSpecific:
          $ref: '#/components/schemas/EntranceOpenTime'
        exitOpenTimeLaneSpecific:
          $ref: '#/components/schemas/ExitOpenTime'
        maxDimForSpecificLane:
          $ref: '#/components/schemas/MaximumDimensions'
      required:
        - laneType
        - sequenceNumber

    RGBColour:
      title: RGBColour
      description: A RGB colour described by values for red, green and blue (0..255) as well as an optional name.
      type: object
      x-package: place.characteristics
      properties:
        colourName:
          $ref: '#/components/schemas/MultilingualString'
        rgbBlueValue:
          type: integer
          description: The blue value of the RGB colour (0..255).
          minimum: 0
          maximum: 255
        rgbGreenValue:
          type: integer
          description: The green value of the RGB colour (0..255).
          minimum: 0
          maximum: 255
        rgbRedValue:
          type: integer
          description: The red value of the RGB colour (0..255).
          minimum: 0
          maximum: 255
      required:
        - rgbBlueValue
        - rgbGreenValue
        - rgbRedValue

    CommonComponents:
      title: CommonComponents
      description: A class defining information concerning multiple features relating to parking hierarchy elements.
      type: object
      x-package: place.characteristics
      properties:
        characteristics:
          type: array
          description: Characteristics for hierarchy element.
          items:
            $ref: '#/components/schemas/Characteristics'
        contacts:
          type: array
          description: Contact info for hierarchy element.
          items:
            $ref: '#/components/schemas/Contact'
        marketing:
          $ref: '#/components/schemas/Marketing'
        operatingRestrictions:
          type: array
          description: Operating restrictions for hierarchy element.
          items:
            $ref: '#/components/schemas/OperatingRestrictions'
        rgbColours:
          type: array
          description: Colours associated with hierarchy element.
          items:
            $ref: '#/components/schemas/RGBColour'
        times:
          $ref: '#/components/schemas/Times'
        paymentMethods:
          type: array
          description: Accepted payment methods at hierarchy element.
          items:
            $ref: '#/components/schemas/PaymentMethod'
        safetyStandardClassifications:
          type: array
          description: Safety standard classifications.
          items:
            $ref: '#/components/schemas/SafetyStandardClassification'

    Connector:
      title: Connector
      description: Parameters and description of an interface that is available at the given electric charging point to connect vehicles
      type: object
      x-package: place.characteristics
      properties:
        chargingMode:
          $ref: '#/components/schemas/ChargingModeEnum'
        connectorFormat:
          $ref: '#/components/schemas/ConnectorFormatTypeEnum'
        connectorType:
          $ref: '#/components/schemas/ConnectorTypeEnum'
        countryOfDomesticSocket:
          type: array
          description: Countries for which the domestic socket is applicable. Only needed if explicit type of a domestic socket is not specified.
          items:
            $ref: '#/components/schemas/CountryCode'
        maximumCurrent:
          $ref: '#/components/schemas/Ampere'
        voltage:
          $ref: '#/components/schemas/Volt'
        maxPowerAtSocket:
          $ref: '#/components/schemas/Watt'
        otherConnector:
          type: string
          description: Some other connector / charging interface
      required:
        - connectorType
        - maxPowerAtSocket

    RefillPoint:
      title: RefillPoint
      description: |-
        Technical infrastructure at a specific location that facilitates an energy refilling process being connected 
        to max. one vehicle at a time.
      type: object
      x-package: place.characteristics
      discriminator:
        propertyName: metaType
        mapping:
          ElectricChargingPoint: '#/components/schemas/ElectricChargingPoint'
      properties:
        metaType:
          type: string
          enum:
            - ElectricChargingPoint
        authenticationAndIdentificationMethods:
          type: array
          description: Information on what methods of identification and/or authentication are accepted
          items:
            $ref: '#/components/schemas/AuthenticationAndIdentificationEnum'
        currencyOverride:
          type: array
          description: Information on which currency/currencies can be used to pay
          items:
            $ref: '#/components/schemas/CurrencyCode'
        deliveryUnit:
          $ref: '#/components/schemas/DeliveryUnitEnum'
        minimumDeliveryAmount:
          $ref: '#/components/schemas/Units'
        maximumDeliveryAmount:
          $ref: '#/components/schemas/Units'
        modelType:
          $ref: '#/components/schemas/MultilingualString'
        refillPointIndex:
          type: integer
          description: An index to link this element between the static and dynamic publications.
        reservationType:
          $ref: '#/components/schemas/ReservationTypeEnum'
        serviceType:
          type: array
          description: Information on different service types for the fuelling/charging and payment process.
          items:
            $ref: '#/components/schemas/ServiceTypeEnum'
        userInterfaceLanguage:
          type: array
          description: 'Languages, in which a user interface is available, if any'
          items:
            $ref: '#/components/schemas/LanguageCode'
      required:
        - refillPointIndex

    ElectricChargingPoint:
      title: ElectricChargingPoint
      description: A charging point for electric vehicles (EV).
      type: object
      x-package: place.characteristics
      allOf:
        - $ref: '#/components/schemas/RefillPoint'
        - type: object
          properties:
            availableChargingPower:
              type: array
              description: Possible degrees of charging power in Watts.
              items:
                $ref: '#/components/schemas/Watt'
            externalIdentifier:
              type: string
              description: A unique string to identify the charging point.
            usageType:
              type: array
              description: Usage type of the electric charging point.
              items:
                $ref: '#/components/schemas/ChargingPointUsageTypeEnum'
            vehicleToGridCommunicationType:
              type: array
              description: Type of vehicle to grid communication used
              items:
                $ref: '#/components/schemas/VehicleToGridCommunicationTypeEnum'
            availableVoltage:
              type: array
              description: Possible degrees of voltage
              items:
                $ref: '#/components/schemas/Volt'
            connectors:
              type: array
              minItems: 1
              description: Specify the connector(s).
              items:
                $ref: '#/components/schemas/Connector'
          required:
            - connectors

    # ===== Places - Enums ===== #

    AccessLaneTypeEnum:
      title: AccessLaneTypeEnum
      description: |-
        A list of the supported access lane characteristic types :
        * `entryOnly`: Entry only Lane used for entry to facility only.
        * `exitOnly`: Exit only Lane used for exit from facility only.
        * `reversibleLane`: Reversible lane Lane used for both entry and exit to/from facility, depending on operational conditions.
        * `serviceVehicleLane`: Service vehicle lane Lane used by parking operator service vehicle, not for public use.
      type: string
      x-package: place.enums
      enum:
        - entryOnly
        - exitOnly
        - reversibleLane
        - serviceVehicleLane

    AccessTypeEnum:
      title: AccessTypeEnum
      description: |-
        A list of the supported access area types :
        * `entry`: a zone or area that is a place for access into a facility
        * `exit`: a zone or area that is a place for access from a facility
        * `reversible`: a zone or area that is a place for access to or egress from a facility. Conditions may be changed by operation circumstances, such as time of day.
      type: string
      x-package: place.enums
      enum:
        - entry
        - exit
        - reversible

    AccessibilityEnum:
      title: AccessibilityEnum
      description: |-
        Special forms of accessibility, easements and marking for disabled people.
        * `barrierFreeAccessible`: Accessible without any steps or other barriers. Does not ensure the same access as `disabledAccessible`.
        * `disabledAccessible`: Accessible for disabled people. `wheelChairAccessible` is a special form of it.
        * `disabledEasements`: There are special easements for disabled people, like handrails or disabled-friendly furniture.
        * `disabledMarkedThere`: is a visible mark to support access by disabled people (e.g. a wheelchair symbol).
        * `none`: No form of special accessibility, i.e. usually not convenient for disabled people, e.g. because of steps or barriers.
        * `orientationSystemForBlindPeople`: There is some orientation system, which helps blind or visually impaired people. Examples might be some acoustic system or tactile paving.
        * `other`: Other.
        * `unknown`: It is unknown, whether there is a special form of accessibility.
        * `wheelChairAccessible`: Accessible by people in a wheelchair.
      type: string
      x-package: place.enums
      enum:
        - barrierFreeAccessible
        - disabledAccessible
        - disabledEasements
        - disabledMarkedThere
        - none
        - orientationSystemForBlindPeople
        - other
        - unknown
        - wheelChairAccessible

    AddressLineTypeEnum:
      title: AddressLineTypeEnum
      description: |-
        A table of types of address lines
         * `apartment`: Element indicating a discrete element of a building forming the address
         * `building`: Element identifying the number or name and type of the edifice or construction relevant for the address [derived from ISO19160-4]
         * `districtTerritory`: Element specifying the geographic or administrative area of the country for the address [Source: 19160-4]
         * `floor`: Element indicating the floor or level on which a delivery point is located in a multi-storey building [Source:ISO19160-4]
         * `poBox`: A postal delivery location identifier, not necessarily a physical location.
         * `region`: Element indicating the name of the area within or adjacent to the town in which delivery address is.
         * `street`: Element indicating road or street identifier or name 
         * `town`: Element indicating the name of the populated place in which a delivery point is located, or near to or via which the delivery point is accessed. [Source: ISO19160-4]
         * `unit`: An element representing a section of a building or organisation.Free-text description of the condition that leads to a surcharge beingapplied
      type: string
      x-package: place.enums
      enum:
        - apartment
        - building
        - districtTerritory
        - floor
        - poBox
        - region
        - street
        - town
        - unit

    AreaFacilityPointLocationEnum:
      title: AreaFacilityPointLocationEnum
      description: |-
        * `assistanceLocation`: indicating the nature of the location point where assistance is available
        * `entranceAndExitLocation`: indicating the nature of the location is both an entrance and an exit from the Facility
        * `entranceLocation`: indicating the nature of the location is an entrance to the Facility
        * `exitLocation`: indicating the nature of the location is an exit from the Facility
        * `sellingPointLocation`: indicating the nature of the location is a position for the access to ticket machines, or similar vending facilities'
      type: string
      x-package: place.enums
      enum:
        - assistanceLocation
        - entranceAndExitLocation
        - entranceLocation
        - exitLocation
        - sellingPointLocation

    AuthenticationAndIdentificationEnum:
      title: AuthenticationAndIdentificationEnum
      description: |-
        A table of authentication and/or identification methods: 
        * `activeRFIDChip`: Phone (active RFID chip)
        * `apps`: Apps
        * `calypso`: RFID Calypso
        * `cashPayment`: No specific authentication by using cash
        * `creditCard`: Credit card
        * `debitCard`: Debit card
        * `mifareClassic`: RFID Card / Phone NFC - Mifare Classic
        * `mifareDesfire`: RFID Card / Phone NFC - Mifare Desfire
        * `nfc`: Nearfield communication
        * `noAccess`: No access granted
        * `overTheAir`: Over the air according to ISO 15118
        * `phoneDialog`: phone (dialog with platform)
        * `phoneSMS`: Phone (SMS)
        * `pinpad`: PINPAD
        * `plc`: PLC according to ISO 15118
        * `prepaidCard`: Pre-Paid card
        * `rfid`: RFID
        * `unlimitedAccess`: No authentication/identification required.
        * `website`: Using a website
      type: string
      x-package: place.enums
      enum:
        - activeRFIDChip
        - apps
        - calypso
        - cashPayment
        - creditCard
        - debitCard
        - mifareClassic
        - mifareDesfire
        - nfc
        - noAccess
        - overTheAir
        - phoneDialog
        - phoneSMS
        - pinpad
        - plc
        - prepaidCard
        - rfid
        - unlimitedAccess
        - website

    ChargingModeEnum:
      title: ChargingModeEnum
      description: |-
        Charging mode according to IEC-61851 terminology
        * `ccs`: Charging with a combined charging solution (CCS). AC and DC are used simultaneously.
        * `legacyInductive`: Legacy-Inductive
        * `mode1AC1p`: Mode 1, AC 1 phase
        * `mode1AC3p`: Mode 1, AC 3 phases
        * `mode2AC1p`: Mode 2, AC 1 phase
        * `mode2AC3p`: Mode 2, AC 3 phases
        * `mode3AC3p`: Mode 3, AC 3 phases
        * `mode4DC`: Mode 4, DC
        * `other`: Some other charging mode
        * `unknown`: The type of the charging mode is unknown
      type: string
      x-package: place.enums
      enum:
        - ccs
        - legacyInductive
        - mode1AC1p
        - mode1AC3p
        - mode2AC1p
        - mode2AC3p
        - mode3AC3p
        - mode4DC
        - other
        - unknown

    ChargingPointUsageTypeEnum:
      title: ChargingPointUsageTypeEnum
      description: |-
        Type of usage for an electric charging point
        * `electricalDevices`: Provides a plug for electrical devices (e.g. shaver, mobile phones, hair dryer, ...)
        * `electricBike`: Charging of E-Bikes
        * `electricBoat`: Charging of electric boats
        * `electricMotorcycle`: Charging of E-Motorcycles
        * `electricVehicle`: Charging of electric vehicles
        * `lorryPowerCosumption`: Supply for lorries with power consumption, e.g. for refrigerated goods transports.
        * `motorhomeOrCaravanSupply`: Supply for motorhomes or caravans
        * `other`: Other usage for the electric charging stations.
        * `overheadLineDrivenVehicles`: The charging point supplies a overhead line, usually connected via pantographs
      type: string
      x-package: place.enums
      enum:
        - electricalDevices
        - electricBike
        - electricBoat
        - electricMotorcycle
        - electricVehicle
        - lorryPowerConsumption
        - motorhomeOrCaravanSupply
        - other
        - overheadLineDrivenVehicles

    ConnectorFormatTypeEnum:
      title: ConnectorFormatTypeEnum
      description: |
        A list of cable types used during the charging process.
        * `cableMode2`: The connector is an attached cable; the EV users car needs to have a fitting inlet for a mode 2 cable, common for most domestic sockets
        * `cableMode3`: The connector is an attached cable; the EV users car needs to have a fitting inlet for a mode 3 cable, can be used for Type 1 and Type 2 sockets.
        * `otherCable`: The connector is an attached cable; the EV users car needs to have a fitting inlet.
        * `socket`: The connector is a socket; the EV user needs to bring a fitting plug
      type: string
      x-package: place.enums
      enum:
        - cableMode2
        - cableMode3
        - otherCable
        - socket

    ConnectorTypeEnum:
      title: ConnectorTypeEnum
      description: |-
        A table of commonly used connectors / charging interfaces
        * `cee3`: CEE3, 230 V, 16 A
        * `cee5`: CEE5, 400 V, 16-63 A
        * `chademo`: CHAdeMO, 600 V DC. Used mostly in Japan.
        * `domestic`: A domestic socket of unspecified type. Applicable countries should be specified in seperate attribute.
        * `domesticA`: Domestic socket type A (mainly used in the USA, Canada, Mexico & Japan)
        * `domesticB`: Domestic socket type B (mainly used in the USA, Canada & Mexico)
        * `domesticC`: Domestic socket type C (commonly used in Europe, South America & Asia)
        * `domesticD`: Domestic socket type D (mainly used in India)
        * `domesticE`: Domestic socket type E (primarily used in France, Belgium, Poland, Slovakia & Czechia)
        * `domesticF`: Domestic socket type F (used almost everywhere in Europe & Russia, except for the UK & Ireland)
        * `domesticG`: Domestic socket type G (mainly used in the United Kingdom, Ireland, Malta, Malaysia, Singapore & the Arabian Peninsula)
        * `domesticH`: Domestic socket type H (used exclusively in Israel, the West Bank & the Gaza Strip)
        * `domesticI`: Domestic socket type I (mainly used in Australia, New Zealand, China & Argentina)
        * `domesticJ`: Domestic socket type J (used almost exclusively in Switzerland & Liechtenstein)
        * `domesticK`: Domestic socket type K (used almost exclusively in Denmark & Greenland)
        * `domesticL`: Domestic socket type L (used almost exclusively in Italy & Chile)
        * `domesticM`: Domestic socket type M (mainly used in South Africa)
        * `domesticN`: Domestic socket type N (used in Brazil and South Africa)
        * `domesticO`: Domestic socket type O (used exclusively in Thailand)
        * `iec60309x2single16`:  IEC 60309-2 Industrial Connector single phase 16 amperes (usually blue)
        * `iec60309x2three16`: IEC 60309-2 Industrial Connector three phase 16 amperes (usually red)
        * `iec60309x2three32`: IEC 60309-2 Industrial Connector three phase 32 amperes (usually red)
        * `iec60309x2three64`: IEC 60309-2 Industrial Connector three phase 64 amperes (usually red)
        * `iec62196T1`: IEC 62196 Type 1 "SAE J1772".  Mostly used in USA and Asia.
        * `iec62196T1COMBO`: Combo Type 1 based, DC
        * `iec62196T2`: IEC 62196 Type 2 "Mennekes" - 400 V, 16-63 A. Mandatory in Europe
        * `iec62196T2COMBO`: Combo Type 2 based, DC, Type 2 connector with extension for simultaneous DC-charging
        * `iec62196T3A`: IEC 62196 Type 3A
        * `iec62196T3C`: " IEC 62196 Type 3C ""Scame""  "
        * `other`: Other charging interface.
        * `pantographBottomUp`: On-board Bottom-up-Pantograph typically for bus charging
        * `pantographTopDown`: Off-board Top-down-Pantograph typically for bus charging
        * `teslaConnectorAmerica`: Tesla connector used in America (Tesla specific)
        * `teslaConnectorEurope`: Tesla Connector EU (modification of the Type 2 connector)
        * `teslaR`: Tesla Connector "Roadster"-type (round, 4 pin)
        * `teslaS`: Tesla Connector "Model-S"-type (oval, 5 pin)
        * `yazaki`: Yazaki, 400 VDC, 125 A, Asian standard.
      type: string
      x-package: place.enums
      enum:
        - cee3
        - cee5
        - chademo
        - domestic
        - domesticA
        - domesticB
        - domesticC
        - domesticD
        - domesticE
        - domesticF
        - domesticG
        - domesticH
        - domesticI
        - domesticJ
        - domesticK
        - domesticL
        - domesticM
        - domesticN
        - domesticO
        - iec60309x2single16
        - iec60309x2three16
        - iec60309x2three32
        - iec60309x2three64
        - iec62196T1
        - iec62196T1COMBO
        - iec62196T2
        - iec62196T2COMBO
        - iec62196T3A
        - iec62196T3C
        - other
        - pantographBottomUp
        - pantographTopDown
        - teslaConnectorAmerica
        - teslaConnectorEurope
        - teslaR
        - teslaS
        - yazaki

    CoveredEnum:
      title: CoveredEnum
      description: |-
        Defines the supported lists of different types describing roof coverage of the facility or entity
        * `covered`: Indicates that the facility or specific entity has a roof to provide protection from direct overhead sun or adverse weather
        * `notCovered`: Indicates that the facility or specific entity has no roof to provide protection from direct overhead sun or adverse weather
        * `partiallyCovered`: Indicates that the facility or specific entity has a roof offering partial coverage to provide protection from direct overhead sun or adverse weather
        * `topLevelNotCovered`: Indicates that in a multi-level facility or specific entity the top level(s) have no roof to provide protection from direct overhead sun or adverse weather
      type: string
      x-package: place.enums
      enum:
        - covered
        - notCovered
        - partiallyCovered
        - topLevelNotCovered

    DeliveryUnitEnum:
      title: DeliveryUnitEnum
      description: |-
        Table with different units in which the delivery is measured.
        * `gasGallonEquivalent`: The amount of alternative fuel it takes to equal the energy content of one liquid gallon of gasoline. Used mostly in the US.
        * `imperialGallon`: Imperial Gallon (4.54609 litres)
        * `kg`: kilogram
        * `kWh`: kilowatt hour
        * `litre`: Litre
        * `m3`: cubic meter
        * `usGallon`: US-Gallon (3.785411784 litres)
      type: string
      x-package: place.enums
      enum:
        - gasGallonEquivalent
        - imperialGallon
        - kg
        - kWh
        - litre
        - m3
        - usGallon

    ElementDescriptorEnum:
      title: ElementDescriptorEnum
      description: |-
        A list of the supported parking element descriptors (e.g. floor, row).
        * `floorOrLevel`: Describes a place identified as a "floor", with typical use to describe a floor or level in a multi-level structure
        * `row`: Describes a place identified as a "row", with typical use to describe a quasi-line parking or other feature of common characteristics
        * `street`: Describes a place identified as a "street", with typical use to describe a part of a road sharing a common given name.
      type: string
      x-package: place.enums
      enum:
        - floorOrLevel
        - row
        - street

    HierarchyElementTypeEnum:
      title: HierarchyElementTypeEnum
      description: |-
        Defines the supported lists of types of parking hierarchy elements permissible
        * `campus`: a data structure holding information about a large, often ill-defined area, which may contain many parking structures.
        * `identifiedArea`: a data structure holding information about a coherent feature, such as a set of parking spaces that all share the same characteristics
        * `parkingPlace`: a data structure holding information about a single identifiable facility
        * `space`: a data structure holding information about a single space for parking, usually designed for one vehicle, which may be denoted by painted or other road surface markers
        * `subPlaceElement`: a reusable data structure holding information about a collection of IdentifiableAreas
      type: string
      x-package: place.enums
      enum:
        - campus
        - identifiedArea
        - parkingPlace
        - space
        - subplaceElement

    EquipmentTypeEnum:
      title: EquipmentTypeEnum
      description: |-
        Types of equipment.
        * `bikeParking`: Bike parking.
        * `cashMachine`: Cash machine.
        * `copyMachineOrService`: A possibility to create copies of documents.
        * `defibrillator`: Medical equipment to provide first aid after heart attacks.
        * `dsrcReceiver`: A system to manage digital short range communication (radio beacon transceivers), e.g. for tolling roadside equipment.
        * `dumpingStation`: Possibility to get rid of sewerage (especially for motorhomes).
        * `electricChargingStation`: For charging vehicles, motorhome supply etc. The 'numberOf...' attribute specifies the number of charging stations.
        * `elevator`: Indication of the availability of elevators.
        * `faxMachineOrService`: A possibility to send and/or receive faxes.
        * `fireExtinguisher`: Fire extinguisher
        * `fireHose`: A hose for water transport in case of fire.
        * `fireHydrant`: Fire hydrant
        * `firstAidEquipment`: Equipment to support first aid on injured people. Note that 'defibrillator' is a separate literal.
        * `iceFreeScaffold`: A technical equipment to remove ice and snow from the roof of lorries.
        * `informationPoint`: An information point with employees.
        * `informationStele`: An unmanned information point.
        * `internetTerminal`: Public internet terminal. Charges may be specified using the TariffsAndPayment section.
        * `internetWireless`: Public wireless internet. Specifying an amount would be the number of hotspots/access points. Charges may be specified using the TariffsAndPayment section.
        * `luggageLocker`: Possibility to deposit luggage in a safe way.
        * `none`: None.
        * `other`: Some other equipment. Use 'otherSupplementalFacility' to specify it.
        * `paymentMachine`: A payment machine, for example a parking ticket machine.
        * `picnicFacilities`: Indication of whether any picnicking facilities, such as tables, chairs and shaded areas, are available.
        * `playground`: A playground for children.
        * `publicCardPhone`: Indicates, whether there's a public telephone available that can be used with a card.
        * `publicCoinPhone`: Indicates, whether there's a public telephone available that can be used with coins.
        * `publicPhone`: Indicates, whether there's a public telephone available.
        * `refuseBin`: Refuse bins for small amounts of garbage (see also 'wasteDisposal').
        * `safeDeposit`: A possibility to store valuable possession in a safe way. 
        * `shelter`: A shelter (against wind, sun, ....).
        * `shower`: Indicates, whether there are shower facilities available.
        * `snowAndIceRemovalEquipme`: Equipment to remove snow and ice.nt
        * `toilet`: Indicates, whether there are toilets available.
        * `tollTerminal`: A terminal, where toll charges can be paid manually (this does not mean a toll gate on the road)
        * `tyreAirPressureEquipment`: Equipment to measure and refill tyre air pressure.
        * `unknown`: Unknown.
        * `vendingMachine`: A vending machine for snacks, coffee etc. (without manpower).
        * `wasteDisposal`: Possibility to get rid of waste in a legal way (e.g. for truckers or motorhomes). Normal refuse bins are not intended here.
        * `waterBasin`: A water basin to wash hands, clothes or dishes.
        * `waterSupply`: Supply of fresh water, e.g. for motorhomes.
        * `waterTap`: Fresh water out of a tap.
      type: string
      x-package: place.enums
      enum:
        - bikeParking
        - cashMachine
        - copyMachineOrService
        - defibrillator
        - dsrcReceiver
        - dumpingStation
        - electricChargingStation
        - elevator
        - faxMachineOrService
        - fireExtinguisher
        - fireHose
        - fireHydrant
        - firstAidEquipment
        - iceFreeScaffold
        - informationPoint
        - informationStele
        - internetTerminal
        - internetWireless
        - luggageLocker
        - none
        - other
        - paymentMachine
        - picnicFacilities
        - playground
        - publicCardPhone
        - publicCoinPhone
        - publicPhone
        - refuseBin
        - safeDeposit
        - shelter
        - shower
        - snowAndIceRemovalEquipment
        - toilet
        - tollTerminal
        - tyreAirPressureEquipment
        - unknown
        - vendingMachine
        - wasteDisposal
        - waterBasin
        - waterSupply
        - waterTap

    HeightGradeEnum:
      title: HeightGradeEnum
      description: |-
        * `aboveGrade`: Above or over the normal road grade elevation.
        * `atGrade`: At the normal road grade elevation.
        * `belowGrade`: Below or under the normal road grade elevation.
      type: string
      x-package: place.enums
      enum:
        - aboveGrade
        - atGrade
        - belowGrade

    HeightTypeEnum:
      title: HeightTypeEnum
      description: |-
        List of coded values for height types, as defined in GML.
        * `ellipsoidalHeight`: Value measured vertically above the reference ellipsoid
        * `gravityRelatedHeight`: Height type corresponding a value measured along direction of gravity above the reference geoid i.e. equipotential surface of the Earth's gravity field which globally approximates mean sea level.
        * `relativeHeight`: Height type corresponding to value measured vertically above the ground level at this point.
      type: string
      x-package: place.enums
      enum:
        - ellipsoidalHeight
        - gravityRelatedHeight
        - relativeHeight

    NutsCodeTypeEnum:
      title: NutsCodeTypeEnum
      description: |-
        Types of NUTS codes (Nomenclature of territorial units for statistics) including LAU codes (Local Administrative Units).
        * `lau1Code`: LAU 1 code
        * `lau2Code`: LAU 2 code
        * `nuts1Code`: NUTS 1 code
        * `nuts2Code`: NUTS 2 code
        * `nuts3Code`: NUTS 3 code
      type: string
      x-package: place.enums
      enum:
        - lau1Code
        - lau2Code
        - nuts1Code
        - nuts2Code
        - nuts3Code

    OperatingRestrictionsEnum:
      title: OperatingRestrictionsEnum
      description: |-
        Defines operating restrictions to use the of a facility.
        * `busOnly`: Only buses are permitted.
        * `busStop`: This is a stopping place of bus pick-up or drop-off; not to be used for parking.
        * `carpoolOnly`: Only carpool vehicles are permitted.
        * `commercialVehicleOnly`: Only commercial vehicles are permitted.
        * `disabledPersonPermitOnly`: Only vehicles of registered disabled person permit holders permitted.
        * `electricVehicleOnly`: Only electric vehicles permitted.
        * `freeParking`: No fee for parking
        * `governmentVehicleOnly`: Only government vehicles permitted.
        * `loadingZone`: This is a loading zone; not to be used for parking.
        * `loadingZoneCommercial`: Only government vehicles permitted.
        * `media`: Only for use by the media
        * `noParking`: No parking permitted
        * `noWaiting`: No waiting or parking of vehicles is permitted
        * `parkingTimeLimit`: Time limited parking.
        * `residentialPermitOnly`: Only for use by residential permit holders only
        * `snow`: Snow clearing zone; no parking
        * `streetCleaning`: Street cleansing zone; no parking
        * `taxiOnly`: Only taxis are permitted.
        * `valetOnly`: Only valet service vehicles are permitted.
      type: string
      x-package: place.enums
      enum:
        - busOnly
        - busStop
        - carpoolOnly
        - commercialVehicleOnly
        - disabledPersonPermitOnly
        - electricVehicleOnly
        - freeParking
        - governmentVehicleOnly
        - loadingZone
        - loadingZoneCommercial
        - media
        - noParking
        - noWaiting
        - parkingTimeLimit
        - residentialPermitOnly
        - snow
        - streetCleaning
        - taxiOnly
        - valetOnly

    ParkingOperatingModeEnum:
      title: ParkingOperatingModeEnum
      description: |-
        A list of supported parking operation modes
        * `app`: App – payment is collected via an app that may also control access to the facility.
        * `payAndDisplay`: PND – pay and display. Vehicle displays a credential to show it is paid. Typically prepaid and short term.
        * `payByPlate`: PBP - pay by plate - vehicle registration or license plate is used for recording and enforcement either on street or off street. Payment is collected on a prepaid basis or at the exit.
        * `payBySpace`: PBS – pay by space. Vehicle makes a payment based on occupying a specific space. Typically prepaid.
        * `permit`: Similar to PND but for long term parking (e.g. monthly pass, quarterly, semester).
        * `ticket`: Payment is done with a ticket (e.g. with magnetic strip, barcode). Payment is collected at the exit.
      type: string
      x-package: place.enums
      enum:
        - app
        - payAndDisplay
        - payByPlate
        - payBySpace
        - permit
        - ticket

    ParkingSpaceOccupancyDetectionEnum:
      title: ParkingSpaceOccupancyDetectionEnum
      description: |-
        A list of supported methods for detection of occupancy by a vehicle in a parking space.
        * `anpr` Automated License Plate Recognition information is tracked for inbound and outbound traffic. The difference between in and out counts enables an occupancy count.
        * `imageAnalytics` Image analytics are used to evaluate a picture with known parking space geography and computer vision is used to determine occupancy at a point in time.
        * `spaceSensor` A sensor in each space detects the presence of a vehicle.
        * `userDeclaration` User self-declared, where the user enters a space identifier and/or vehicle registration number, typically at the start of a parking session.
        * `videoAnalytics` Video analytics are used to evaluate a video stream to identify objects (vehicles) and direction of travel. The difference between the inbound objects and outbound objects determines occupancy.
        * `videoSpace` Video analytics or ANPR technologies are used to evaluate a video stream with known space geometry to identify objects (vehicles or license plates) occupying specific spaces.
        * `visual` Operator/owner makes periodic visual counts of the facility.
      type: string
      x-package: place.enums
      enum:
        - anpr
        - imageAnalytics
        - spaceSensor
        - userDeclaration
        - videoAnalytics
        - videoSpace
        - visual

    RefillPointStatusEnum:
      title: RefillPointStatusEnum
      description: |-
        * `available`: The refill point is not occupied, has got enough energy resources and can be used.
        * `blocked`: The refill point is not accessible because of a physical barrier, e.g. a car.
        * `charging`: The refill point is currently in use for charging.
        * `faulted`: The refill point has got a fault.
        * `inoperative`: The refill point is not yet active or it is no longer available (deleted).
        * `occupied`: The refill point is in use, this might include vehicle charging activity.
        * `outOfOrder`: The refill point is currently out of order.
        * `outOfStock`: The refill point is out of stock, i.e. energy resources are empty.
        * `planned`: The refill point is planned, will be operating soon.
        * `removed`: The refill point was discontinued/removed.
        * `reserved`: The refill point is reserved by a customer, i.e. it is not available for other users right now.
        * `unavailable`: There is no energy available at this refill point. This could be because of a failure or damage or a longer lasting delivery failure (note that there is a literal 'outOfStock' for a short-term shortage).
        * `unknown`: The status of the refill point is unknown (can also be offline).
      type: string
      x-package: place.enums
      enum:
        - available
        - blocked
        - charging
        - faulted
        - inoperative
        - occupied
        - outOfOrder
        - outOfStock
        - planned
        - removed
        - reserved
        - unavailable
        - unknown

    ReservationTypeEnum:
      title: ReservationTypeEnum
      description: |-
        Different types of reservation.
        * `mandatory`: Reservation is mandatory.
        * `notAvailable`: Reservation is not possible.
        * `optional`: Reservation is optional.
        * `partly`: There is a specific contingent, that can be reserved.
        * `unknown`: Possibility of reservation is unknown,
        * `unspecified`: Possibility of reservation is not specified.
      type: string
      x-package: place.enums
      enum:
        - mandatory
        - notAvailable
        - optional
        - partly
        - unknown
        - unspecified

    RoadTypeEnum:
      title: RoadTypeEnum
      description: |-
        Categorisation of the  road type (motorway,main road,...).
        * `mainRoad`: Main road.
        * `motorway`: Motorway.
        * `other`: Other.
        * `trunkRoad`: Trunk road.
      type: string
      x-package: place.enums
      enum:
        - mainRoad
        - motorway
        - other
        - trunkRoad

    ServiceFacilityTypeEnum:
      title: ServiceFacilityTypeEnum
      description: |
        A service facility. In distinction to equipment, a service is usually manned.
        * `bikeGarage`: A place where bikes are repaired.
        * `bikeSharing`: Bike Sharing.
        * `cafe`: Cafe.
        * `carWash`: Car wash.
        * `docstop`: The site is part of the Docstop project, http://www.docstoponline.eu, which means medical assistance for professional drivers.
        * `foodShopping`: Food shopping.
        * `hotel`: A hotel.
        * `kiosk`: Kiosk.
        * `laundry`: A possibility for washing clothes (might also be a laundromat with coins).
        * `leisureActivities`: There are leisure activities offered on the site or in the very near surrounding. Use the additional description attribute to give details.
        * `medicalFacility`: Medical facility.
        * `motel`: Hotel located aside a motorway.
        * `motorcycleGarage`: A place where motorcycles are repaired.
        * `motorwayRestaurant`: Restaurant located on a motorway rest area.
        * `motorwayRestaurantSmall`: Smaller type of restaurant located on a motorway rest area. Might be with limited offers.
        * `other`: Some other service facility. Use 'otherEquipmentOrServiceFacility' to specify it.
        * `overnightAccommodation`: An accommodation to stay overnight.
        * `payDesk`: A manned possibility to pay.
        * `petrolStation`: Indicates whether it is possible to get petrol.
        * `pharmacy`: Pharmacy.
        * `police`: Indicates whether a police station is on site or very close.
        * `restaurant`: Restaurant.
        * `restaurantSelfService`: A restaurant where people arrange and fetch their meal themselves, this might enclose a buffet.
        * `shop`: A shop of unspecified kind.
        * `snackBar`: A snack bar.
        * `sparePartsShopping`: Spare parts shopping.
        * `touristInformation`: Tourist information with employees.
        * `truckRepair`: Truck repair.
        * `truckWash`: Truck wash.
        * `tyreRepair`: A tyre repair service.
        * `unknown`: Unknown.
        * `vehicleMaintenance`: Garage repair service.
      type: string
      x-package: place.enums
      enum:
        - bikeGarage
        - bikeSharing
        - cafe
        - carWash
        - docstop
        - foodShopping
        - hotel
        - kiosk
        - laundry
        - leisureActivities
        - medicalFacility
        - motel
        - motorcycleGarage
        - motorwayRestaurant
        - motorwayRestaurantSmall
        - other
        - overnightAccommodation
        - payDesk
        - petrolStation
        - pharmacy
        - police
        - restaurant
        - restaurantSelfService
        - shop
        - snackBar
        - sparePartsShopping
        - touristInformation
        - truckRepair
        - truckWash
        - tyreRepair
        - unknown
        - vehicleMaintenance

    ServiceTypeEnum:
      title: ServiceTypeEnum
      description: |-
        A table of different service levels to be expected for fuelling/charging and payment.
        * `fullService`: Full fuelling service carried out by an employee.
        * `selfService`: Self Service for fuelling
        * `unattended`: Unattended station, fuelling and payment to be done without assistance.
      type: string
      x-package: place.enums
      enum:
        - fullService
        - selfService
        - unattended

    StaffEnum:
      title: StaffEnum
      description: |-
        A list of supported values for staffing characteristics
        * `staffed`: Normally staffed during operating hours
        * `temporary`: Staffed on a temporary or part time basis.
        * `unstaffed`: Not normally staffed during operating hours
      type: string
      x-package: place.enums
      enum:
        - staffed
        - temporary
        - unstaffed

    StructureGradeEnum:
      title: StructureGradeEnum
      description: |-
        Types of layout of the parking site.
        * `aboveGround`: Parking is above ground level (this may include ground level parking)
        * `groundLevel`: Parking is at ground level
        * `underground`: Parking is on one or more floors below ground level
      type: string
      x-package: place.enums
      enum:
        - aboveGround
        - groundLevel
        - underground

    StructureTypeEnum:
      title: StructureTypeEnum
      description: |-
        A list of types of parking structure.
        * `offStreetStructure`: Off-street multi-tier parking structure.
        * `offStreetSurface`: Off-street ground-level at grade parking.
        * `onStreet`: On-street parking.
      type: string
      x-package: place.enums
      enum:
        - offStreetStructure
        - offStreetSurface
        - onStreet

    SubdivisionTypeEnum:
      title: SubdivisionTypeEnum
      description: |-
        ISO 3166-2 subdivison types
        * `administrativeAtoll`: Administrative atoll
        * `administrativeRegion`: Administrative region
        * `administrativeTerritory`: Administrative territory
        * `arcticRegion`: Arctic region
        * `autonomousCity`: Autonomous city
        * `autonomousCityInNorthAfrica`: Autonomous city in North Africa
        * `autonomousCommunity`: Autonomous community
        * `autonomousDistrict`: Autonomous district
        * `autonomousProvince`: Autonomous province
        * `autonomousRegion`: Autonomous region
        * `canton`: Canton
        * `capitalCity`: Capital city
        * `city`: City
        * `cityMunicipality`: City municipality
        * `cityOfCountyRight`: City of county right
        * `commune`: Commune
        * `councilArea`: Council area
        * `country`: Country
        * `county`: County
        * `department`: Department
        * `dependency`: Dependency
        * `district`: District
        * `districtMunicipality`: District municipality
        * `districtWithSpecialStatus`: District with special status
        * `entity`: Entity
        * `geographicalEntity`: Geographical entity
        * `governorate`: Governorate
        * `laender`: Länder
        * `localCouncil`: Local Council
        * `londonBorough`: London borough
        * `metropolitanArea`: Metropolitan area
        * `metropolitanDepartment`: Metropolitan department
        * `metropolitanDistrict`: Metropolitan district
        * `metropolitanRegion`: Metropolitan region
        * `municipality`: Municipality
        * `other`: Other
        * `overseasDepartment`: Overseas department
        * `overseasRegion`: Overseas region
        * `overseasTerritorialCollectivity`: Overseas territorial collectivity
        * `parish`: Parish
        * `province`: Province
        * `quarter`: Quarter
        * `region`: Region
        * `republic`: Republic
        * `republicanCity`: Republic city
        * `selfGovernedPart`: Self-governed part
        * `specialMunicipality`: Special Municipality
        * `state`: State
        * `territorialUnit`: Territorial unit
        * `territory`: Territory
        * `twoTierCounty`: Two tier country
        * `unitaryAuthority`: Unitary Authority
        * `ward`: Ward
      type: string
      x-package: place.enums
      enum:
        - administrativeAtoll
        - administrativeRegion
        - administrativeTerritory
        - arcticRegion
        - autonomousCity
        - autonomousCityInNorthAfrica
        - autonomousCommunity
        - autonomousDistrict
        - autonomousProvince
        - autonomousRegion
        - canton
        - capitalCity
        - city
        - cityMunicipality
        - cityOfCountyRight
        - commune
        - councilArea
        - country
        - county
        - department
        - dependency
        - district
        - districtMunicipality
        - districtWithSpecialStatus
        - entity
        - geographicalEntity
        - governorate
        - laender
        - localCouncil
        - londonBorough
        - metropolitanArea
        - metropolitanDepartment
        - metropolitanDistrict
        - metropolitanRegion
        - municipality
        - other
        - overseasDepartment
        - overseasRegion
        - overseasTerritorialCollectivity
        - parish
        - province
        - quarter
        - region
        - republic
        - republicanCity
        - selfGovernedPart
        - specialMunicipality
        - state
        - territorialUnit
        - territory
        - twoTierCounty
        - unitaryAuthority
        - ward

    UnitOfMeasureAreaEnum:
      title: UnitOfMeasureAreaEnum
      description: |-
        Unit used for area/surface elements.
        * `squareFeet`: Unit of Square feet.
        * `squareMetres`: Unit of Metres Square.
        * `squareYards`: Unit of Square yards.
      type: string
      x-package: place.enums
      enum:
        - squareFeet
        - squareMetres
        - squareYards

    UnitOfMeasureDistanceEnum:
      title: UnitOfMeasureDistanceEnum
      description: |-
        Unit used for length/distance elements.
        * `foot`: Imperial foot = 12 inches
        * `metres`: SI - metre
      type: string
      x-package: place.enums
      enum:
        - foot
        - metres

    UnitOfMeasureWeightEnum:
      title: UnitOfMeasureWeightEnum
      description: |-
        Unit used for weight elements.
        * `poundsWeight`: 1 lb
        * `tonnesMetric`: 1000 kilogrammes
      type: string
      x-package: place.enums
      enum:
        - poundsWeight
        - tonnesMetric

    UserGroupEnum:
      title: UserGroupEnum
      description: |-
        * `disabled`: class of user identified as disabled or handicapped travellers. Local definitions may apply
        * `employees`: class of user identified as employees associated with the Place. Local definitions may apply
        * `seniors`: class of user identified as senior citizens. Local definitions may apply
        * `students`: class of user identified as registered students. Local definitions may apply
        * `tourists`: class of user identified as tourists (non-local users) associated with the Place. Local definitions may apply
      type: string
      x-package: place.enums
      enum:
        - disabled
        - employees
        - seniors
        - students
        - tourists

    UserTypeEnum:
      title: UserTypeEnum
      description: |-
        Types of different users,for example used in the context of parking.
        * `allUsers`: All users.
        * `commuters`: Commuters.
        * `customers`: Customers.
        * `disabled`: Physically impaired people.
        * `elderlyUsers`: Elderly users.
        * `employees`: Employees.
        * `families`: Families.
        * `handicapped`: Persons with deficiencies in their daily life.
        * `hearingImpaired`: People with difficulties to hear.
        * `hotelGuests`: Hotel guests.
        * `longTermParkers`: Long-term parker.
        * `members`: Members.
        * `men`: Men.
        * `other`: Other.
        * `overnightParkers`: Overnight parker.
        * `parkAndCycleUser`: Park and cycle user.
        * `parkAndRideUsers`: Users that are exchanging into public transport at a park and ride station.
        * `parkAndWalkUser`: Park and walk user.
        * `pensioners`: Pensioners.
        * `pregnantWomen`: Pregnant women.
        * `registeredDisabledUsers`: Registered disabled persons.
        * `reservationHolders`: Those who have a valid reservation, e.g. for the duration of parking.
        * `residents`: Local residents.
        * `seasonTicketHolders`: Season ticket holders.
        * `shoppers`: Shoppers.
        * `shortTermParkers`: Short-term parker.
        * `sportEventAwaySupporters`: Sport event away supporters.
        * `sportEventHomeSupporters`: Sport event home supporters.
        * `staff`: Staff.
        * `students`: Students.
        * `subscribers`: Subscribers.
        * `unknown`: Unknown.
        * `visitors`: Visitors.
        * `visuallyImpaired`: People with difficulties to see.
        * `wheelchairUsers`: Wheelchair users.
        * `women`: Women.
      type: string
      x-package: place.enums
      enum:
        - allUsers
        - commuters
        - customers
        - disabled
        - elderlyUsers
        - employees
        - families
        - handicapped
        - hearingImpaired
        - hotelGuests
        - longTermParkers
        - members
        - men
        - other
        - overnightParkers
        - parkAndCycleUser
        - parkAndRideUsers
        - parkAndWalkUser
        - pensioners
        - pregnantWomen
        - registeredDisabledUsers
        - reservationHolders
        - residents
        - seasonTicketHolders
        - shoppers
        - shortTermParkers
        - sportEventAwaySupporters
        - sportEventHomeSupporters
        - staff
        - students
        - subscribers
        - unknown
        - visitors
        - visuallyImpaired
        - wheelchairUsers
        - women

    VehicleToGridCommunicationTypeEnum:
      title: VehicleToGridCommunicationTypeEnum
      description: |-
        * `iec619802`: Communication according to IEC 61980-2.
        * `iso15118`: Communication according to ISO15118.
        * `none`: No communication between vehicle and the grid.
        * `other`: Communication according to other guidelines/specifications.
        * `unknown`: The type of communication is unknown.
      type: string
      x-package: place.enums
      enum:
        - iec619802
        - iso15118
        - none
        - other
        - unknown

    # ===== Common ===== #

    DeletedReference:
      title: DeletedReference
      description: |-
        A reference to a deleted identifiable managed object where the identifier is unique.
        It is described by a string identifying the class of the referenced object (key name) with a unique string
        identifier as its value, and the deletion instant.
      type: object
      x-package: common
      properties:
        id:
          type: string
          description: The unique identifier within the given class.
        className:
          type: string
          description: The class name of the referenced object in PascalCase.
          pattern: '^([A-Z][a-z0-9]+)+'
        deleteTimestamp:
          type: string
          format: date-time
          description: The instant when the reference was deleted.
      required:
        - id
        - className
        - deleteTimestamp

    PaginatedList:
      title: PaginatedList
      description: 'Paginated list of results for listing APIs'
      type: object
      x-package: common
      properties:
        meta:
          $ref: '#/components/schemas/PaginatedListMeta'
        deletedReferences:
          type: array
          description: |-
            This attribute will returned when the `modified_since` query parameter is used. 
            It will contain references to deleted resources since the provided instant, that would have otherwise 
            been included in the dataset (either at the top-level or as associated objects)
          items:
            $ref: '#/components/schemas/DeletedReference'
      required:
        - meta

    PaginatedListMeta:
      title: PaginatedListMeta
      description: |-
        Metadata for paginated list of results for Listing APIs'
      type: object
      x-package: common
      properties:
        referenceInstant:
          type: integer
          description: |-
            Allows a consistent view of data across multiple paged requests. 
            Unix epoch time to be used as reference for offset > 0 (corresponds to query instant, as returned 
            by server on first call) - should be the same for all pages'
          minimum: 0
        offset:
          type: integer
          minimum: 0
          description: Index of the first item returned in the page.
        pageSize:
          type: integer
          description: Maximum number of items that can be returned per page.
          minimum: 0
        total:
          type: integer
          description: Total number of items contained in all pages.
          minimum: 0
      required:
        - referenceInstant
        - offset
        - pageSize
        - total

    Reference:
      title: Reference
      description: |-
        A reference to an identifiable managed object where the identifier is unique. 
        It is composed of a string identifying the class of the referenced object and a unique string identifier.
      type: object
      x-package: common
      additionalProperties: false
      minProperties: 1
      maxProperties: 1
      properties:
        id:
          type: string
          description: The unique identifier within the given class.
          example: 'LA51ABC'
        className:
          type: string
          description: The class name of the referenced object in PascalCase.
          example: 'UKNumberPlate'
          minLength: 1
      required:
        - id
        - className

    ReferencedCodeListEntry:
      title: ReferencedCodeListEntry
      description: Class providing structure to support reference to an entry in a previously defined user-defined code list.
      type: object
      x-package: common
      properties:
        codeListEntryId:
          $ref: '#/components/schemas/Reference'
        codeListId:
          $ref: '#/components/schemas/VersionedReference'
        entryDefinedValue:
          type: string
          description: Free-text defined text (name) for the code list entry being referenced.
      required:
        - entryDefinedValue

    ResponseStatus:
      title: ResponseStatus
      description: |-
        Codifies responses following some creation, update or delete operation.
      type: object
      x-package: common
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatusEnum'
        code:
          type: integer
          description: Same numbering and semantics as HTTP status codes.
        message:
          type: string
          description: Descriptive message for error statuses.
      required:
        - status

    SafetyStandardClassification:
      title: SafetyStandardClassification
      description: Use this class to classification type/level for security schemes for a place
      type: object
      x-package: common
      properties:
        securityFeature:
          $ref: '#/components/schemas/ReferencedCodeListEntry'
        securityLevel:
          $ref: '#/components/schemas/ReferencedCodeListEntry'

    UserDefinedCodeListEntry:
      title: UserDefinedCodeListEntry
      description: Class providing structure to support a specific entry within a user-defined code list.
      type: object
      x-package: common
      properties:
        definedValue:
          type: string
          description: Free-text defined text (name) for the code list entry being referenced.
        entryDescription:
          type: string
          description: Free-text description (explanation) for the code list entry being referenced.
        entryIndex:
          type: integer
          description: Index number (integer) for the code list entry being referenced.
      required:
        - definedValue
        - entryIndex

    UserDefinedCodeList:
      title: UserDefinedCodeList
      description: Class providing structure to support a user-defined code list.
      type: object
      x-package: common
      properties:
        creator:
          $ref: '#/components/schemas/VersionedReference'
        includeNilReasonType:
          type: boolean
          description: True indicates the NilReasonType list shall be included in this user defined code list.
        locator:
          $ref: '#/components/schemas/Url'
        userDefinedCodeListEntries:
          type: array
          minItems: 1
          description: User defined code list entries.
          items:
            $ref: '#/components/schemas/UserDefinedCodeListEntry'
      required:
        - creator
        - includeNilReasonType
        - locator
        - userDefinedCodeListEntries

    VehicleAncillaryIdentification:
      title: VehicleAncillaryIdentification
      description: Information relating to a specific vehicle.
      type: object
      x-package: common
      properties:
        country:
          $ref: '#/components/schemas/CountryCode'
        color:
          type: string
          description: The predominant colour of the vehicle.
        description:
          type: string
          description: Free-text description of other distinguishing features of the vehicle.
        make:
          type: string
          description: The branded manufacturer's name for the vehicle (e.g. Ford, Audi, BMW, Mazda).
        model:
          type: string
          description: The model name for the vehicle type (e.g. Ford "Mondeo", Citroen "C-Zero").
        stateProvince:
          type: string
          description: |-
            State, province or other administrative subdivision where a nation state permits registration of 
            vehicles on a lower administrative level basis.'
      required:
        - country

    VersionedIdentity:
      title: VersionedIdentity
      description: Represents an object with an identity and can have versions over time.
      type: object
      x-package: common
      properties:
        id:
          type: string
          description: Unique identifier for object.
          minLength: 1
        version:
          type: integer
          minimum: 1
          description: Positive integer representing the object version.
      required:
        - id
        - version

    VersionedReference:
      title: VersionedReference
      description: |-
        A reference to an identifiable version managed object where the combination of the identifier and version is unique. 
        It comprises an identifier (e.g. GUID), a version (NonNegativeInteger) and a string identifying the class of the referenced object.'
      type: object
      x-package: common
      additionalProperties: false
      properties:
        id:
          type: string
          minLength: 1
          description: Unique identifier.
        version:
          type: integer
          minimum: 1
          description: Version number.
        className:
          type: string
          description: |-
            Class name of the referenced object. 
            It's optional, as it might be implied by the attribute name using this reference
          pattern: '^([A-Z][a-z0-9]+)+'
      required:
        - id
        - version

    # ===== Common - Enums ===== #

    ComparisonOperatorEnum:
      title: ComparisonOperatorEnum
      description: |-
        Logical comparison operations
        * `equalTo`: Logical comparison operator of "equal to".
        * `greaterThan`: Logical comparison operator of "greater than".
        * `greaterThanOrEqualTo`: Logical comparison operator of "greater than or equal to".
        * `lessThan`: Logical comparison operator of "less than".
        * `lessThanOrEqualTo`: Logical comparison operator of "less than or equal to".
      type: string
      x-package: common.enums
      enum:
        - equalTo
        - greaterThan
        - greaterThanOrEqualTo
        - lessThan
        - lessThanOrEqualTo

    CredentialTypeEnum:
      title: CredentialTypeEnum
      description: |-
        * `barcode`: Barcode or QR digital print pattern, held on any physical media.
        * `bluetooth`: Specific bluetooth or BLE identification chip used to associate a BLE receiver to a specific user.  Used for both one time and permit uses.
        * `eticket`: Digital equivalent of a paper ticket, often presentable via smartphone or similar device for control.
        * `hangtag`: Visible, often removable, credential indicator, with visible markings
        * `licensePlate`: Fixed plate, in a defined format, used to identify a specific vehicle- Normally a permanent fixture.
        * `permit`: Issued credential, often in the form of an adhesive label, often placed on the windscreen, credential indicator, with visible markings
        * `qrCode`: Quick Reference (QR) code
        * `rfid`: Specific RF identification associated to an RFID-related account.  Used for permit uses.
        * `ticket`: Typically issued paper with printed details, often with magnetic strips; typically single use disposable.
        * `electronicID`: An identifier transmitted by electronic means
        * `permit`: an official document or marker giving someone authorization to do something.
        * `ticketcoupon`: A visible printed or written paper-based ticket or coupon carrying an identifiable credential.
        * `vehicleplate`: A fixed identifier (registration plate) visible and fixed to a vehicle.
      type: string
      x-package: common.enums
      enum:
        - barcode
        - bluetooth
        - eticket
        - hangtag
        - licensePlate
        - permit
        - qrCode
        - rfid
        - ticket
        - electronicID
        - ticketcoupon
        - vehicleplate

    EsporgSecurityStandardsEnum:
      title: EsporgSecurityStandardsEnum
      description: |-
        * `bronze`: class of user identified as employees associated with the Place. Local definitions may apply
        * `gold`: class of user identified as disabled or handicapped travellers. Local definitions may apply
        * `platinum`: class of user identified as registered students. Local definitions may apply
        * `silver`: class of user identified as tourists (non-local users) associated with the Place. Local definitions may apply
      type: string
      x-package: common.enums
      enum:
        - bronze
        - gold
        - platinum
        - silver

    LoadTypeEnum:
      title: LoadTypeEnum
      description: |-
        * `abnormalLoad`: A load that exceeds normal vehicle dimensions in terms of height, length, width, gross vehicle weight or axle weight or any combination of these. Generally termed an "abnormal load".
        * `ammunition`: Ammunition.
        * `chemicals`: Chemicals of unspecified type.
        * `combustibleMaterials`: Combustible materials of unspecified type.
        * `corrosiveMaterials`: Corrosive materials of unspecified type.
        * `debris`: Debris of unspecified type.
        * `empty`: No load.
        * `explosiveMaterials`: Explosive materials of unspecified type.
        * `extraHighLoad`: A load of exceptional height.
        * `extraLongLoad`: A load of exceptional length.
        * `extraWideLoad`: A load of exceptional width.
        * `fuel`: Fuel of unspecified type.
        * `glass`: Glass.
        * `goods`: Any goods of a commercial nature.
        * `hazardousMaterials`: Materials classed as being of a hazardous nature.
        * `liquid`: Liquid of an unspecified nature.
        * `livestock`: Livestock.
        * `materials`: General materials of unspecified type.
        * `materialsDangerousForPeople`: Materials classed as being of a danger to people or animals.
        * `materialsDangerousForTheEnvironment`: Materials classed as being potentially dangerous to the environment.
        * `materialsDangerousForWater`: Materials classed as being dangerous when exposed to water (e.g. materials which may react exothermically with water).
        * `oil`: Oil.
        * `ordinary`: Materials that present limited environmental or health risk. Non-combustible, non-toxic, non-corrosive.
        * `other`: Other than as defined in this enumeration.
        * `perishableProducts`: Products or produce that will significantly degrade in quality or freshness over a short period of time.
        * `petrol`: Petrol or petroleum.
        * `pharmaceuticalMaterials`: Pharmaceutical materials.
        * `radioactiveMaterials`: Materials that emit significant quantities of electro-magnetic radiation that may present a risk to people, animals or the environment.
        * `refrigeratedGoods`: Refrigerated goods.
        * `refuse`: Refuse.
        * `toxicMaterials`: Materials of a toxic nature which may damage the environment or endanger public health.
        * `vehicles`: Vehicles of any type which are being transported.
      type: string
      x-package: common.enums
      enum:
        - abnormalLoad
        - ammunition
        - chemicals
        - combustibleMaterials
        - corrosiveMaterials
        - debris
        - empty
        - explosiveMaterials
        - extraHighLoad
        - extraLongLoad
        - extraWideLoad
        - fuel
        - glass
        - goods
        - hazardousMaterials
        - liquid
        - livestock
        - materials
        - materialsDangerousForPeople
        - materialsDangerousForTheEnvironment
        - materialsDangerousForWater
        - oil
        - ordinary
        - other
        - perishableProducts
        - petrol
        - pharmaceuticalMaterials
        - radioactiveMaterials
        - refrigeratedGoods
        - refuse
        - toxicMaterials
        - vehicles

    NilReasonTypeEnum:
      title: NilReasonTypeEnum
      description: |-
        * `inapplicable`: there is no value
        * `missing`: the correct value is not readily available to the sender of this data. Furthermore, a correct value may not exist
        * `template`: the value will be available later
        * `unknown`: the correct value is not known to, and not computable by, the sender of this data. However, a correct value probably exists
        * `withheld`: the value is not divulged
      type: string
      x-package: common.enums
      enum:
        - inapplicable
        - missing
        - template
        - unknown
        - withheld

    ParkingSecurityEnum:
      title: ParkingSecurityEnum
      description: |-
        * `areaSeperatedFromSurroundings`: Site is separated from its surroundings. Can also be used to express a space for noise-producing vehicles, e.g. lorries with cooling generators.
        * `cctv`: CCTV (camera observation).
        * `dog`: Dog.
        * `externalSecurity`: External security, e.g. police or staff not directly belonging to the parking.
        * `fences`: Fences.
        * `floodLight`: Flood light (stronger than lighting).
        * `guard24hours`: 24/24 guard.
        * `lighting`: Site is illuminated in a normal way (but not as strong as 'floodLight').
        * `none`: There are no security measures.
        * `other`: None of the values in this enumeration applies. Use 'parkingAdditionalSecurity' instead.
        * `securityStaff`: Security staff.
        * `socialControl`: Social control e.g. parking situated in a neighbourhood.
        * `unknown`: Unknown.
      type: string
      x-package: common.enums
      enum:
        - areaSeperatedFromSurroundings
        - cctv
        - dog
        - externalSecurity
        - fences
        - floodLight
        - guard24hours
        - lighting
        - none
        - other
        - securityStaff
        - socialControl
        - unknown

    ResponseReasonEnum:
      title: ResponseReasonEnum
      description: |
        A list of supported reasons if a requested quote response is not provided
        * `eligibilityRequirementNotMet`: a stated eligibility requirement is not considered to be met
        * `noAvailability`: No availability for request
        * `noMatchingSpecification`: No matching rights specification found
        * `other`: other reason (reason not given)
        * `rightSpecificationNotAvailableAtRequestedTimes`: the requested specification is not available at the requested time
      type: string
      x-package: common.enums
      enum:
        - eligibilityRequirementNotMet
        - noAvailability
        - noMatchingSpecification
        - other
        - rightSpecificationNotAvailableAtRequestedTimes

    ResponseStatusEnum:
      title: ResponseStatusEnum
      description: |-
        Type of status for a Response.
        * `ok` : OK
        * `error` : An error occurred
      type: string
      x-package: common.enums
      enum:
        - ok
        - error

    TriggerTypeEnum:
      title: TriggerTypeEnum
      description: |-
        * `firstUse`: Trigger is applied on first use of the facility.
        * `withTransaction`: Trigger condition is met when the transaction is completed.
      type: string
      x-package: common.enums
      enum:
        - firstUse
        - withTransaction


    # ===== Units & Aliases ===== #

    Ampere:
      title: Ampere
      description: Unit for electric current.
      type: number
      x-package: common

    CountryCode:
      title: CountryCode
      description: EN ISO 3166-1 two-character country code.
      type: string
      x-package: common
      pattern: '^[a-z]{2}$'
      example: 'es'

    CurrencyCode:
      title: CurrencyCode
      description: Code for the specified currency as defined in ISO 4217.
      type: string
      x-package: common
      pattern: '^[A-Z]{3}$'
      example: 'EUR'

    Duration:
      title: Duration
      description: ISO8601 format definition of an interval of time in format [PnnYnnMnnDTnnHnnMnnS].
      type: string
      x-package: common
      pattern: "^P(?!$)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(?=\\d)(\\d+H)?(\\d+M)?(\\d+S)?)?$"
      example: 'P1Y2M3DT4H5M6S'

    LanguageCode:
      title: LanguageCode
      description: ISO 639-1:2002 language code.
      type: string
      x-package: common
      pattern: '^[a-z]{2}$'
      example: 'en'

    MultilingualString:
      title: MultilingualString
      description: |-
        Multilingual string, represented as an array of SpecificLanguageString objects.
      type: array
      x-package: common
      items:
        $ref: '#/components/schemas/SpecificLanguageString'

    SpecificLanguageString:
      title: SpecificLanguageString
      description: |-
        SpecificLanguageString containing a language code (using ISO 639-1:2002) and the translated string.
      type: object
      x-package: common
      properties:
        language:
          $ref: '#/components/schemas/LanguageCode'
        string:
          type: string
          description: 'Translated string'
          example: 'string'
      required:
        - language
        - string

    Time:
      title: Time
      description: ISO8601 format definition of a time - format HH:MM.
      type: string
      x-package: common
      pattern: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$"
      example: '12:15'

    Units:
      title: Units
      description: Amount in units,which are specified by unitTypeEnum.
      type: number
      x-package: common

    Url:
      title: Url
      description: Represents a Url for an internet accessible resource.
      type: string
      x-package: common
      format: url

    Volt:
      title: Volt
      description: 'Unit of measure of electric potential.'
      type: number
      x-package: common

    Watt:
      title: Watt
      description: 'Unit of measure of electric power.'
      type: number
      x-package: common



    # ===== Vehicle ===== #

    Emissions:
      title: Emissions
      description: Emission characteristics of vehicles.
      type: object
      x-package: vehicle
      properties:
        emissionClassification:
          $ref: '#/components/schemas/ReferencedCodeListEntry'
        emissionClassificationOthers:
          type: array
          description: Some other (probably locally defined) value(s) for emission classification.
          items:
            type: string
        emissionLevel:
          $ref: '#/components/schemas/LowEmissionLevelEnum'

    GrossWeightCharacteristic:
      title: GrossWeightCharacteristic
      description: Gross weight characteristic of a vehicle.
      type: object
      x-package: vehicle
      properties:
        comparisonOperator:
          $ref: '#/components/schemas/ComparisonOperatorEnum'
        grossVehicleWeight:
          type: number
          description: The gross weight of the vehicle and its load, including any trailers (in Tonnes).
          format: float
          minimum: 0
          exclusiveMinimum: true
        typeOfWeight:
          $ref: '#/components/schemas/WeightTypeEnum'
      required:
        - comparisonOperator
        - grossVehicleWeight
        - typeOfWeight

    HeightCharacteristic:
      title: HeightCharacteristic
      description: Height characteristic of a vehicle.
      type: object
      x-package: vehicle
      properties:
        comparisonOperator:
          $ref: '#/components/schemas/ComparisonOperatorEnum'
        vehicleHeight:
          type: number
          description: |-
            The height of the highest part, excluding antennae, of an individual vehicle above the road surface, in metres.
          format: float
          minimum: 0
          exclusiveMinimum: true
      required:
        - comparisonOperator
        - vehicleHeight

    LengthCharacteristic:
      title: LengthCharacteristic
      description: Length characteristic of a vehicle.
      type: object
      x-package: vehicle
      properties:
        comparisonOperator:
          $ref: '#/components/schemas/ComparisonOperatorEnum'
        vehicleLength:
          type: number
          description: |-
            The overall distance (in metres) between the front and back of an individual vehicle, including the length 
            of any trailers, couplings, embedded features.
          format: float
          minimum: 0
          exclusiveMinimum: true
      required:
        - comparisonOperator
        - vehicleLength

    VehicleLoad:
      title: VehicleLoad
      description: Class defining load types carried by vehicles.
      type: object
      x-package: vehicle
      properties:
        loadType:
          $ref: '#/components/schemas/ReferencedCodeListEntry'
      required:
        - loadType

    VehicleType:
      title: VehicleType
      description: Class supporting the definition of user group characteristics.
      type: object
      x-package: vehicle
      properties:
        vehicleType:
          $ref: '#/components/schemas/ReferencedCodeListEntry'
      required:
        - vehicleType

    WidthCharacteristic:
      title: WidthCharacteristic
      type: object
      x-package: vehicle
      description: Width characteristic of a vehicle
      properties:
        comparisonOperator:
          $ref: '#/components/schemas/ComparisonOperatorEnum'
        vehicleWidth:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: 'The maximum width of an individual vehicle, including any features embedded or fixed on it, in metres'
      required:
        - comparisonOperator
        - vehicleWidth

    # ===== Vehicle - Enums ===== #

    LowEmissionLevelEnum:
      title: LowEmissionLevelEnum
      description: |-
        The emission level of a vehicle
        * `freeOfEmission`: Only vehicles that do not produce emissions (e.g. electric driven). Hybrid driven cars are allowed, when they switch to emission free mode within the considered situation
        * `lowLevelEmission`: Vehicles with low level emission
      type: string
      x-package: vehicle.enums
      enum:
        - freeOfEmission
        - lowLevelEmission

    VehicleTypeEnum:
      title: VehicleTypeEnum
      description: |-
        * `agriculturalVehicle`: Vehicle normally used for agricultural purposes (e.g. tractor, combined harvester).
        * `anyVehicle`: Vehicle of any type.
        * `articulatedBus`: Articulated bus
        * `articulatedTrolleyBus`: Articulated trolley bus
        * `articulatedVehicle`: Articulated vehicle.
        * `bicycle`: Bicycle.
        * `bus`: Bus.
        * `car`: Vehicles designed and constructed for the carriage of passengers and comprising no more than eight seats (in addition to the driver seat), and having a maximum mass (technically permissible maximum laden mass) not exceeding 3.5 tons (M1).
        * `caravan`: Caravan.
        * `carOrLightVehicle`: Car or light vehicle.
        * `carWithCaravan`: Car towing a caravan.
        * `carWithTrailer`: Car towing a trailer.
        * `constructionOrMaintenanceVehicle`: Vehicle normally used for construction or maintenance purposes (e.g. digger, excavator, bulldozer, lorry mounted crane)
        * `fourWheelDrive`: Four wheel drive vehicle.
        * `heavyDutyTransporter`: A transporter for heavy duty (usually with abnormal dimensions).
        * `heavyGoodsVehicle`: Vehicles with a total weight above 3,500 kg (vehicle and load).
        * `heavyGoodsVehicleWithTrailer`: Heavy goods vehicle with trailer
        * `heavyVehicle`: Vehicle whose weight means it should be classed as a heavy vehicle
        * `highSidedVehicle`: High sided vehicle.
        * `largeCar`: Large car
        * `largeGoodsVehicle`: Vehicles for the carriage of goods and having a maximum mass exceeding 3.5 tonnes (belonging to class N2 when not exceeding 12 tonnes, otherwise class N3).
        * `lightCommercialVehicle`: Vehicles for the carriage of goods and having a maximum mass not exceeding 3.5 tonnes (class N1).
        * `lightCommercialVehicleWithTrailer`: Light goods vehicle with trailer
        * `longHeavyLorry`: A heavy lorry that is longer than normal.
        * `lorry`: Lorry of any type.
        * `metro`: Metro
        * `minibus`: Vehicles designed and constructed for the carriage of passengers, comprising more than eight seats (in addition to the driver seat), and having a maximum mass not exceeding 5 tonnes (class M2).
        * `moped`: Moped (a two wheeled motor vehicle characterized by a small engine typically less than 50cc and by normally having pedals).
        * `motorcycle`: Motorcycle.
        * `motorcycleWithSideCar`: Three wheeled vehicle comprising a motorcycle with an attached side car.
        * `motorhome`: Motorhome
        * `motorscooter`: Motorscooter (a two wheeled motor vehicle characterized by a step-through frame and small diameter wheels).
        * `other`: Other than as defined in this enumeration.
        * `passengerCar`: Passenger car
        * `smallCar`: Small car
        * `tanker`: Vehicle with large tank for carrying bulk liquids.
        * `threeWheeledVehicle`: Three wheeled vehicle of unspecified type.
        * `trailer`: Trailer.
        * `tram`: Tram.
        * `trolleyBus`: Trolley bus
        * `twoWheeledVehicle`: Two wheeled vehicle of unspecified type.
        * `unknown`: Unknown.
        * `van`: Van.
        * `vehicleWithCaravan`: Vehicle (of unspecified type) towing a caravan.
        * `vehicleWithCatalyticConverter`: Vehicle with catalytic converter.
        * `vehicleWithoutCatalyticConverter`: Vehicle without catalytic converter.
        * `vehicleWithTrailer`: Vehicle (of unspecified type) towing a trailer.
        * `withEvenNumberedRegistrationPlates`: Vehicle with even numbered registration plate.
        * `withOddNumberedRegistrationPlates`: Vehicle with odd numbered registration plate.
      type: string
      x-package: vehicle.enums
      enum:
        - agriculturalVehicle
        - anyVehicle
        - articulatedBus
        - articulatedTrolleyBus
        - articulatedVehicle
        - bicycle
        - bus
        - car
        - caravan
        - carOrLightVehicle
        - carWithCaravan
        - carWithTrailer
        - constructionOrMaintenanceVehicle
        - fourWheelDrive
        - heavyDutyTransporter
        - heavyGoodsVehicle
        - heavyGoodsVehicleWithTrailer
        - heavyVehicle
        - highSidedVehicle
        - largeCar
        - largeGoodsVehicle
        - lightCommercialVehicle
        - lightCommercialVehicleWithTrailer
        - longHeavyLorry
        - lorry
        - metro
        - minibus
        - moped
        - motorcycle
        - motorcycleWithSideCar
        - motorhome
        - motorscooter
        - other
        - passengerCar
        - smallCar
        - tanker
        - threeWheeledVehicle
        - trailer
        - tram
        - trolleyBus
        - twoWheeledVehicle
        - unknown
        - van
        - vehicleWithCaravan
        - vehicleWithCatalyticConverter
        - vehicleWithoutCatalyticConverter
        - vehicleWithTrailer
        - withEvenNumberedRegistrationPlates
        - withOddNumberedRegistrationPlates

    WeightTypeEnum:
      title: WeightTypeEnum
      description: |-
        Type of weight - describing the meaning of a vehicle weight value
        * `actual`: The weight is the actual weight of a specific vehicle
        * `maximumPermitted`: The weight is the maximum permitted weight for a vehicle
      type: string
      x-package: vehicle.enums
      enum:
        - actual
        - maximumPermitted



    # ===== Eligibility ===== #

    AssignRightTime:
      title: AssignRightTime
      description: |-
        Qualification criteria for eligibility based on the duration of time relative to a defined time-based qualification 
        related to an assigned right.
      type: object
      x-package: eligibility
      properties:
        assignedRightTime:
          type: string
          description: Assigned right time
          format: date-time
        comparisonOperator:
          $ref: '#/components/schemas/ComparisonOperatorEnum'
        unitOfTime:
          $ref: '#/components/schemas/UnitOfTimeEnum'
      required:
        - assignedRightTime
        - comparisonOperator
        - unitOfTime

    AssignedRightTimeRelative:
      title: AssignedRightTimeRelative
      description: |-
        Time-based constrained for a Qualification (either specific times or relative offsets)
      type: object
      x-package: eligibility
      discriminator:
        propertyName: metaType
        mapping:
          RelativeOffsets: '#/components/schemas/RelativeOffsets'
          RelativeTimes: '#/components/schemas/RelativeTimes'
          TimesOfDay: '#/components/schemas/TimesOfDay'
      properties:
        metaType:
          type: string
          enum:
            - RelativeOffsets
            - RelativeTimes
            - TimesOfDay

    Eligibility:
      title: Eligibility
      description: A class defining one or several qualifications indicating eligibility for use of a rate table or right specification.
      type: object
      x-package: eligibility
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            description:
              $ref: '#/components/schemas/MultilingualString'
            eligibilityName:
              $ref: '#/components/schemas/MultilingualString'
            qualifications:
              type: array
              description: Criteria to be eligible
              items:
                $ref: '#/components/schemas/Qualification'
            rightHolders:
              type: array
              items:
                $ref: '#/components/schemas/RightHolder'

    LinkedRightSpecification:
      title: LinkedRightSpecification
      description: Time-based constrained for a Qualification
      type: object
      x-package: eligibility
      properties:
        assignedRightTimeRelative:
          $ref: '#/components/schemas/AssignedRightTimeRelative'
        qualifyingRightSpecification:
          $ref: '#/components/schemas/VersionedReference'
      required:
        - assignedRightTimeRelative
        - qualifyingRightSpecification

    Qualification:
      title: Qualification
      description: A singular set of criteria used to test eligibility for use of a rate table.
      type: object
      x-package: eligibility
      properties:
        activeAssignedRight:
          $ref: '#/components/schemas/Reference'
        propulsionEnergyType:
          type: array
          description: Indicates eligible fuel types for applicable  vehicles
          items:
            $ref: '#/components/schemas/FuelTypeEnum'
        memberOfOtherRateTable:
          type: boolean
          description: |-
            Indicates if this qualification can be used in  combination with the use of another rate table. 
            [TRUE] = member of (i.e., used) another rate table.
        membershipNames:
          type: array
          description: Free-text description of the membership
          items:
            $ref: '#/components/schemas/MultilingualString'
        rateTableMember:
          type: array
          description: Free-text description of other rate table membership
          items:
            type: string
        withMembership:
          type: boolean
          description: 'Indicates that a membership is required. [TRUE] membership required'
        withReservation:
          type: boolean
          description: 'Indicates whether a reservation is required. [TRUE] reservation required'
        paymentMethod:
          type: array
          description: Qualifying payment methods
          items:
            $ref: '#/components/schemas/PaymentMethod'
        emissions:
          $ref: '#/components/schemas/Emissions'
        assignRightTimes:
          type: array
          description: Qualify based on min/max time duration from a right being assigned
          uniqueItems: true
          maxItems: 2
          items:
            $ref: '#/components/schemas/AssignRightTime'
        grossWeightCharacteristics:
          type: array
          description: Qualify based on the vehicle's min/max gross weight characteristics
          uniqueItems: true
          maxItems: 2
          items:
            $ref: '#/components/schemas/GrossWeightCharacteristic'
        heightCharacteristics:
          type: array
          description: Qualify based on the vehicle's min/max height characteristics
          uniqueItems: true
          maxItems: 2
          items:
            $ref: '#/components/schemas/HeightCharacteristic'
        lengthCharacteristics:
          type: array
          description: Qualify based on the vehicle's min/max gross length characteristics
          uniqueItems: true
          maxItems: 2
          items:
            $ref: '#/components/schemas/LengthCharacteristic'
        widthCharacteristics:
          type: array
          description: Qualify based on the vehicle's min/max gross width characteristics
          uniqueItems: true
          maxItems: 2
          items:
            $ref: '#/components/schemas/WidthCharacteristic'
        vehicleLoads:
          type: array
          description: The types of load carried by the vehicle
          items:
            $ref: '#/components/schemas/VehicleLoad'
        userQualifications:
          type: array
          description: User-defined user groups qualification
          items:
            $ref: '#/components/schemas/UserQualification'
        freeToPark:
          type: boolean
          description: 'specific parking is free or not. [TRUE] = free to park'
        vehicleTypes:
          type: array
          description: |
            The types of vehicles that qualify
          items:
            $ref: '#/components/schemas/VehicleType'
        linkedRightSpecification:
          $ref: '#/components/schemas/LinkedRightSpecification'

    UserGroup:
      title: UserGroup
      description: Class providing references to a specific user group with reference to enumerations available in the UserGroupEnum enumerated list.
      type: object
      x-package: eligibility
      properties:
        userType:
          $ref: '#/components/schemas/ReferencedCodeListEntry'
      required:
        - userType

    UserQualification:
      title: UserQualification
      description: Class supporting the definition of user group characteristics
      type: object
      x-package: eligibility
      properties:
        userGroup:
          $ref: '#/components/schemas/ReferencedCodeListEntry'
      required:
        - userGroup

    # ===== Eligibility - Enums ===== #

    FuelTypeEnum:
      title: FuelTypeEnum
      description: |-
        Type of fuel used by a vehicle : 
        * `all`: All sort of fuel is accepted
        * `battery`: Battery
        * `biodiesel`: Biodiesel
        * `diesel`: Fuel used for compression - ignition (CI) engines
        * `dieselBatteryHybrid`: Diesel and battery hybrid
        * `ethanol`: Ethanol\n* `hydrogen`: Hydrogen
        * `liquidGas`: Liquid gas of any type including LPG
        * `lpg`: Liquid petroleum gas\n* `methane`: Methane gas
        * `other`: Other\n* `petrol`: Fuel used for positive-ignition (PI) engines
        * `petrol95Octane`: Petrol with 95 octane\n* `petrol98Octane`: Petrol with 98 octane
        * `petrolBatteryHybrid`: Petrol and battery hybrid
        * `petrolLeaded`: Leaded petrol
        * `petrolUnleaded`: Unleaded petrol
        * `unknown`: The sort of fuel is not known"
      type: string
      x-package: eligibility.enums
      enum:
        - all
        - battery
        - biodiesel
        - diesel
        - dieselBatteryHybrid
        - ethanol
        - hydrogen
        - liquidGas
        - lpg
        - methane
        - other
        - petrol
        - petrol95Octane
        - petrol98Octane
        - petrolBatteryHybrid
        - petrolLeaded
        - petrolUnleaded
        - unknown



    # ===== Event ===== #

    EventData:
      title: EventData
      description: |-
        Describes the data payload that an event subscriber should expect to receive. 
        Event data can be grouped into a single event publication, if they share the same topic and instant of occurrence. 
        This allows both publishers and subscribers to improve their communication efficiency when mass-updates occur.
      type: object
      x-package: event
      properties:
        eventSubscriptionId:
          type: string
          description: The unique identifier for the event subscription that triggered this event.
        eventTime:
          type: string
          description: When the event occurred in the source system.
          format: date-time
        data:
          type: array
          description: The versioned reference about which this event is referring to
          minItems: 1
          items:
            $ref: '#/components/schemas/VersionedReference'
        topic:
          $ref: '#/components/schemas/EventTypeEnum'
      required:
        - data
        - eventSubscriptionId
        - eventTime
        - topic

    EventSubscription:
      title: EventSubscription
      description: |-
        Describes a subscription, which is composed of:
        * A list of event `topics` to subscribe (see list below for meaning)
        * A destination `endpoint` to be notified when that event occurs in the source system
        * A list of hierarchyElements where those events might occur. 
        * An option to choose to receive events occurring only directly at the given hierarchyElements or if those 
        occurring at any children elements as well should be included as well. Default is not to include children events
      type: object
      x-package: event
      properties:
        includeChildrenEvents:
          type: boolean
          description: |-
            An option to choose to receive events occurring only directly at the given hierarchyElements (FALSE) or 
            if those occurring at any children elements as well should be included as well (TRUE). 
            FALSE is the default, if the field is left blank
          default: 'false'
        hierarchyElements:
          type: array
          description: A list of hierarchyElements where events might occur.
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/Reference'
        endpoint:
          type: string
          description: API endpoint expecting JSON POST messages with payloads corresponding to the type of event
          format: url
          example: 'https://myapi.com/apds-events'
        topics:
          type: array
          description: The event topic (must be one of the supported enumeration options)
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/EventTypeEnum'
      required:
        - endpoint
        - topics

    # ===== Event - Enums ===== #

    EventTypeEnum:
      title: EventTypeEnum
      description: |-
        Describes the possible types of event subscriptions, with supported event types:
        - `PlaceCreated`: A child place hierarchy element was created
        - `PlaceUpdated`: A place hierarchy element was updated
        - `PlaceDeleted`: A place hierarchy element was deleted
        - `AssignedRightCreated`: An assigned right was created at any of scoped place hierarchy elements
        - `AssignedRightUpdated`: An assigned right was updated at any of scoped place hierarchy elements
        - `AssignedRightDeleted`: An assigned right was deleted at any of scoped place hierarchy elements
        - `SessionCreated`: A session was created at any of scoped place hierarchy elements
        - `SessionUpdated`: A session was updated at any of scoped place hierarchy elements
        - `SessionDeleted`: A session was deleted at any of scoped place hierarchy elements
        - `ObservationCreated`: An observation was created at any of scoped place hierarchy elements
        - `ObservationUpdated`: An observation was updated at any of scoped place hierarchy elements
        - `ObservationDeleted`: An observation was deleted at any of scoped place hierarchy elements
        - `RightSpecificationCreated`: A right specification was created and associated with any of scoped place hierarchy elements
        - `RightSpecificationUpdated`: A right specification associated with any of scoped place hierarchy elements was updated
        - `RightSpecificationDeleted`: A right specification associated with any of scoped place hierarchy elements was deleted
        - `RateTableUpdated`: A rate table associated with a right specification in turn associated with any of scoped place hierarchy elements was updated
        - `RateTableDeleted`: A rate table associated with a right specification in turn associated with any of scoped place hierarchy elements was updated
      type: string
      x-package: event.enums
      enum:
        - PlaceCreated
        - PlaceUpdated
        - PlaceDeleted
        - AssignedRightCreated
        - AssignedRightUpdated
        - AssignedRightDeleted
        - SessionCreated
        - SessionUpdated
        - SessionDeleted
        - ObservationCreated
        - ObservationUpdated
        - ObservationDeleted
        - RightSpecificationCreated
        - RightSpecificationUpdated
        - RightSpecificationDeleted
        - RateTableUpdated
        - RateTableDeleted



    # ===== Observation =====

    Image:
      title: Image
      description: |-
        Class containing information relating to still or moving image observation evidence or a reference (link) to 
        such observation evidence.'
      type: object
      x-package: observation
      properties:
        id:
          type: string
          description: 'Reference identifier to a specific image.'
        image:
          type: string
          description: 'Base64 File or binary object containing a still or moving image.'
        imageLink:
          $ref: '#/components/schemas/Url'
      required:
        - id

    ImageAlbum:
      title: ImageAlbum
      description: A class defining information relating to images for a parking facility.
      type: object
      x-package: observation
      properties:
        photo:
          $ref: '#/components/schemas/Url'
        caption:
          $ref: '#/components/schemas/MultilingualString'
        logoImage:
          type: array
          description: |-
            URL to location of logo(s) the parking operator wishes to associate with this parking facility (e.g. their logo, schemes [ParkMark])'
          items:
            $ref: '#/components/schemas/Url'

    Location:
      title: Location
      description: |-
        Positional information relating to an observation for both the observation target ('observed') and the source ('observer').
      type: object
      x-package: observation
      properties:
        observedLocation:
          $ref: '#/components/schemas/PointLocation'
        observedLocationTextual:
          $ref: '#/components/schemas/MultilingualString'
        observerLocation:
          $ref: '#/components/schemas/PointLocation'
      required:
        - observerLocation
      x-tags:
        - observation

    ObservationElementList:
      title: ObservationElementList
      description: Paginated list of ObservationElements
      type: object
      x-package: observation
      allOf:
        - $ref: '#/components/schemas/PaginatedListMeta'
        - type: object
          properties:
            data:
              type: array
              description: List of ObservationElements
              items:
                $ref: '#/components/schemas/ObservationElement'

    ObservationElement:
      title: ObservationElement
      description: A specific collection of observation details intended to be used for one specific observation instance.
      type: object
      x-package: observation
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            method:
              $ref: '#/components/schemas/ObservationTypeEnum'
            observer:
              type: string
              description: The individual person making the observation recorded in this observation element.
            type:
              $ref: '#/components/schemas/CredentialTypeEnum'
            observedCredentialId:
              type: string
              description: Specific identifier to the referenced observed credential.
            observationStartTime:
              type: string
              description: The initial date and time of the observation.
              format: date-time
            observationEndTime:
              type: string
              description: The ending date and time of the observation, when it was continuous since `observationStartTime`.
              format: date-time
            description:
              $ref: '#/components/schemas/MultilingualString'
            creationDateTime:
              type: string
              description: The date and time stamp for the creation of the observation element.
              format: date-time
            location:
              $ref: '#/components/schemas/Location'
            images:
              type: array
              description: still or moving images observation evidence or a reference to such observation evidence
              items:
                $ref: '#/components/schemas/Image'
            elementIds:
              $ref: '#/components/schemas/VersionedReference'
            vehicleAncillaryIdentification:
              $ref: '#/components/schemas/VehicleAncillaryIdentification'
            observerOrganisation:
              $ref: '#/components/schemas/VersionedReference'
          required:
            - method
            - observationStartTime
            - creationDateTime
            - location
            - observerOrganisation

    ObservationSet:
      title: ObservationSet
      description: Details of the collection of a set of related recorded observations.
      type: object
      x-package: observation
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            creationDateTime:
              type: string
              description: The date and time of the creation of the observation set.
              format: date-time
            creator:
              $ref: '#/components/schemas/VersionedReference'
            observationElements:
              type: array
              description: List of individual observations in the set.
              items:
                $ref: '#/components/schemas/ObservationElement'
          required:
            - creationDateTime
            - creator

    # ===== Observation - Enums ===== #

    ObservationTypeEnum:
      title: ObservationTypeEnum
      description: |-
        A list of the supported observation types.
        * `anpr`: Automatic vehicle license plate recognition
        * `chalk`: Chalk-mark observation or similar
        * `rfTransponder`: Rf transponder radio frequency transponder device, for toll tag or similar radio based devices
        * `scanner`: Handheld or fixed scanning device (optical)
        * `visual`: Visual (human) observation
      type: string
      x-package: observation.enums
      enum:
        - anpr
        - chalk
        - rfTransponder
        - scanner
        - visual



    # ===== Occupancy =====

    DemandSpaceType:
      title: DemandSpaceType
      description: Identifies when a space was occupied and for how long.
      type: object
      x-package: occupancy
      properties:
        detectionUpdateTime:
          type: string
          description: Time of update, from detector.
          format: date-time
        occupancyEstimatedStartTime:
          type: string
          description: The estimated time a space is expected to be occupied.
          format: date-time
        occupancyEstimatedEndTime:
          type: string
          description: The estimated time a space is expected to be vacated.
          format: date-time
        occupancyStartTime:
          type: string
          description: The actual time space is occupied
          format: date-time
        occupancyEndTime:
          type: string
          description: The actual time space is vacated.
          format: date-time
        spaceId:
          $ref: '#/components/schemas/Reference'
        occupancyLevel:
          $ref: '#/components/schemas/OccupancyLevel'
      required:
        - detectionUpdateTime

    DemandTable:
      title: DemandTable
      description: Table structure which defines the parameters of reporting actual usage of parking in a Hierarchy Element
      type: object
      x-package: occupancy
      properties:
        frequency:
          $ref: '#/components/schemas/Duration'
        timestamp:
          type: string
          description: Timestamp when the demand table data was compiled.
          format: date-time
        demandType:
          type: array
          description: Occupancy for area
          items:
            $ref: '#/components/schemas/DemandType'
        demandSpaceType:
          type: array
          description: Occupancy for single spaces
          items:
            $ref: '#/components/schemas/DemandSpaceType'

    DemandType:
      title: DemandType
      description: This table is dedicated to reporting on actual occupancy in an area.
      type: object
      x-package: occupancy
      properties:
        count:
          type: integer
          description: Number of occupied spaces.
          minimum: 0
        occupancyCalculation:
          $ref: '#/components/schemas/CalculationTypeEnum'
        percentage:
          type: number
          description: Percent of spaces occupied.
          format: float
          minimum: 0
          maximum: 100
        recordDateTime:
          type: string
          description: When data in the record was compiled.
          format: date-time
      required:
        - recordDateTime

    OccupancyLevel:
      title: OccupancyLevel
      description: Defines an occupancy level as specified by the data supplier.
      type: object
      x-package: occupancy
      properties:
        occupancyIndicator:
          $ref: '#/components/schemas/ReferencedCodeListEntry'
      required:
        - occupancyIndicator

    Supply:
      title: Supply
      description: |-
        A class defining concepts relating the parameters of the supply of parking. 
        This is the total number of spaces usable for parking or other mobility operations. 
        It can be defined as demarcated spaces or non-demarcated.
      type: object
      x-package: occupancy
      properties:
        supplyViewType:
          $ref: '#/components/schemas/SupplyViewTypeEnum'
        supplyQuantity:
          type: integer
          description: Indicates the numeric value of available parking or other space uses.
        supplyValidityStart:
          type: string
          description: Valid start date/time for the supply
          format: date-time
        supplyValidityEnd:
          type: string
          description: Valid end date/time for the supply
          format: date-time
      required:
        - supplyQuantity
        - supplyViewType

    # ===== Occupancy - Enums ===== #

    CalculationTypeEnum:
      title: CalculationTypeEnum
      description: |-
        A list of the supported calculation types for demand.
        * `counted`: Physical determination if a space is occupied
        * `derived`: Space occupancy is estimated by using related data such as active payments or sold permits.
        * `expected`: Future prediction of occupancy levels.
        * `verified`: Defines an occupancy report that is considered a verified report.
      type: string
      x-package: occupancy.enums
      enum:
        - counted
        - derived
        - expected
        - verified

    SupplyViewTypeEnum:
      title: SupplyViewTypeEnum
      description: |-
        Define if space quantity is demarcated or estimated.
        * `spaceView`: Each space is physically marked and identifiable.
        * `vehicleView`:  The vehicle capacity in an area is estimated based on calculating a capacity (i.e. curb length divided by a length of vehicle). The
        distributing party decides on the appropriate length of vehicle to use.
      type: string
      x-package: occupancy.enums
      enum:
        - spaceView
        - vehicleView



    # ===== Payment =====

    AmountInCurrency:
      title: AmountInCurrency
      description: |-
        A class supporting the definition of a unit of currency in a defined currency.
      type: object
      x-package: payment
      properties:
        currencyType:
          $ref: '#/components/schemas/CurrencyCode'
        currencyValue:
          type: number
          description: The amount of currency specified in the given currency code type.
          format: float
      required:
        - currencyType
        - currencyValue

    BrandsAcceptedCodeList:
      title: BrandsAcceptedCodeList
      description: |-
        Use this class to describe details of the brands that are accepted.
      type: object
      x-package: payment
      properties:
        brandsAcceptedList:
          $ref: '#/components/schemas/ReferencedCodeListEntry'
      required:
        - brandsAcceptedList

    BrandsAcceptedText:
      title: BrandsAcceptedText
      description: |-
        Use this class to describe details of the brands that are accepted.
      type: object
      x-package: payment
      properties:
        brandsAccepted:
          $ref: '#/components/schemas/MultilingualString'

    PaymentMethod:
      title: PaymentMethod
      description: Provides information on the means of payment available
      type: object
      x-package: payment
      properties:
        paymentMeans:
          type: array
          description: The means of payment available
          items:
            $ref: '#/components/schemas/MeansOfPaymentEnum'
        paymentMode:
          type: array
          description: Defines the timing of the parking or other mobility related payment
          items:
            $ref: '#/components/schemas/PaymentTimingEnum'
        brandsAcceptedCodeList:
          type: array
          description: List of accepted brands for payment cards (by code)
          items:
            $ref: '#/components/schemas/BrandsAcceptedCodeList'
        brandsAcceptedText:
          type: array
          description: List of accepted brands for payment cards (by name)
          items:
            $ref: '#/components/schemas/BrandsAcceptedText'

    Payment:
      title: Payment
      description: Lightweight record of payment for associated AssignedRight (temporary)
      type: object
      x-package: payment
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            dateCollected:
              type: string
              description: Date / time that the payment related to this financial transaction is recorded as being paid and collected.
              format: date-time
            startPeriodCovered:
              type: string
              description: Note field to describe the period a payment covers.
              format: date-time
            endPeriodCovered:
              type: string
              description: Note field to describe the period a payment covers.
              format: date-time
            idCode:
              type: string
              description: User defined field to identity additional details such as customer account number or G/L account number.
            serviceProvider:
              $ref: '#/components/schemas/VersionedReference'
            transactionID:
              type: string
              description: |-
                Identifier for the transaction (e.g. reservation number, credit card transaction reference) as agreed 
                upon by the two entities sharing data.
            paymentLines:
              type: array
              description: A data class that enables transaction details to be accumulated.
              items:
                $ref: '#/components/schemas/PaymentLine'
          required:
            - serviceProvider
            - paymentLines

    PaymentAssignment:
      title: PaymentAssignment
      description: Record of association of a payment to an AssignedRight.
      type: object
      x-package: payment
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            assignmentId:
              type: string
              description: Identifier for the association between AssignedRight and Payment.
            assignedFrom:
              $ref: '#/components/schemas/VersionedIdentity'
            assignedTo:
              $ref: '#/components/schemas/VersionedIdentity'
            payment:
              $ref: '#/components/schemas/Payment'
            assignedRights:
              type: array
              description: The matrix of AssignedRight ids that constitute the aggregated funds disbursement.
              items:
                $ref: '#/components/schemas/VersionedIdentity'
          required:
            - assignmentId
            - assignedFrom
            - assignedTo
            - payment
            - assignedRights

    PaymentLine:
      title: PaymentLine
      description: |-
        A data class that enables transaction details to be accumulated based on the type of payment (ie, base fee, taxes, surcharges, etc)
      type: object
      x-package: payment
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            value:
              $ref: '#/components/schemas/AmountInCurrency'
            idCode:
              type: string
              description: Unique cost code identifier, potentially agreed bi-laterally between data supplier and data receiver.
            identifierId:
              type: string
              description: Identifier for the transaction (e.g. reservation number, credit card transaction reference).
            paymentType:
              $ref: '#/components/schemas/PaymentTypeEnum'
          required:
            - value
            - paymentType

    # ===== Payment - Enums ===== #

    MeansOfPaymentEnum:
      title: MeansOfPaymentEnum
      description: |-
        Means of payment
        * `cashBillsOnly`: Cash payment using bills only.
        * `cashCoinsAndBills`: Cash payment using bills and/or coins only.
        * `cashCoinsOnly`: Cash payment with coins only.
        * `mobileAccount`: Payment method using an app or other functions typically via a smartphone, to a linked bank or card account.
        * `paymentCreditCard`: Payment by electronic payment credit card which is a small plastic card issued by a bank, building society, or  other financial institution (ISO/IEC 7813 and other related standards), allowing the holder to purchase goods or services on credit.
        * `paymentDebitCard`: Payment by electronic payment debit card which is a small plastic card (ISO/IEC 7813 and other related standards), allowing the holder to transfer money electronically from their bank account when making a purchase.
        * `paymentValueCard`: Payment by electronic payment debit card which is a small plastic card (ISO/IEC 7813 and other related standards)  with a monetary value stored on the card itself, not that may not be linked to an external account maintained by a financial institution.
        * `prepay`: Advanced payment for parking right.
        * `tollTag`: Toll tag (RFID) or similar, with associated account.
        * `unknown`: Unknown.
      type: string
      x-package: payment.enums
      enum:
        - cashBillsOnly
        - cashCoinsAndBills
        - cashCoinsOnly
        - mobileAccount
        - paymentCreditCard
        - paymentDebitCard
        - paymentValueCard
        - prepay
        - tollTag
        - unknown

    PaymentBrandsEnum:
      title: PaymentBrandsEnum
      description: |-
        * `americanExpress`: American express
        * `applePay`: Apple pay
        * `cirrus`: Cirrus
        * `dinersClub`: Diners club
        * `discoverCard`: Discover card
        * `giroCard`: Giro card
        * `maestro`: Maestro
        * `masterCard`: Master card
        * `other`: Other
        * `visa`: Visa
        * `vpay`: Vpay
      type: string
      x-package: payment.enums
      enum:
        - americanExpress
        - applePay
        - cirrus
        - dinersClub
        - discoverCard
        - giroCard
        - maestro
        - masterCard
        - other
        - visa
        - vpay

    PaymentTimingEnum:
      title: PaymentTimingEnum
      description: |-
        Details of when payment is required.
        * `other`: Other.
        * `payAfterExit`: Payment on account
        * `payAndExit`: Pay directly at the exit with a payment card or other means of payment (usually, this payment card must have been used when entering as well).
        * `payOnEntry`: Pay at start of the parking session (e.g. for pay and display)
        * `payPriorToExit`: Pay at machine on foot prior to returning to vehicle and use payment ticket to exit.
        * `prepay`: Pay before entry
      type: string
      x-package: payment.enums
      enum:
        - other
        - payAfterExit
        - payAndExit
        - payOnEntry
        - payPriorToExit
        - prepay

    PaymentTypeEnum:
      title: PaymentTypeEnum
      description: |-
        Indicates the nature of the payment made against an AssignedRight.
        * `payment`: Indicates financial payment made
        * `validation`: Indicates financial value offset through use of validation coupon or similar
      type: string
      x-package: payment.enums
      enum:
        - payment
        - validation


    # ===== Quote =====

    FinancialQuote:
      title: FinancialQuote
      description: Class containing information on financial value of a Quote
      type: object
      x-package: quote
      properties:
        serviceProvider:
          $ref: '#/components/schemas/VersionedReference'
        taxIncluded:
          type: boolean
          description: 'Whether tax included in monetary value, if yes (TRUE), if not (FALSE).'
        transactionId:
          type: string
          description: 'Identifier for the transaction (e.g. reservation number, credit card transaction reference) as agreed upon by the two entities sharing data.'
        value:
          $ref: '#/components/schemas/AmountInCurrency'
      required:
        - taxIncluded
        - value

    Identifiers:
      title: Identifiers
      description: Class containing information referencing one rateTable and one related rightSpecification
      type: object
      x-package: quote
      properties:
        rateTableId:
          $ref: '#/components/schemas/VersionedReference'
        rightSpecificationId:
          $ref: '#/components/schemas/VersionedReference'
      required:
        - rateTableId
        - rightSpecificationId

    Option:
      title: Option
      description: Class providing one option to a quote request
      type: object
      x-package: quote
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            elementId:
              $ref: '#/components/schemas/VersionedReference'
            exact:
              type: boolean
              description: indicates the supplied Option fully covers the time period requested
            quoteExpiration:
              $ref: '#/components/schemas/QuoteExpiration'
            identifiers:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/Identifiers'
            financialQuote:
              $ref: '#/components/schemas/FinancialQuote'
          required:
            - quoteExpiration
            - financialQuote

    QuoteExpiration:
      title: QuoteExpiration
      description: Class defining conditions indicating the end of the validity of a Quote
      type: object
      x-package: quote
      properties:
        expiresDateTime:
          type: string
          description: 'Defines a specific date/time that the Option and thus the FinancialQuote is valid'
          format: date-time
        firstComeFirstServed:
          type: boolean
          description: |-
            A Boolean value shows that the availability of an Option and thus FinancialQuote are available to 
            the requester on a first come first served basis, with no assurance that the advertised RightSpecification 
            will be available based on actual demand
      required:
        - firstComeFirstServed

    QuoteRequestAndResponseList:
      title: QuoteRequestAndResponseList
      description: List of QuoteRequest and QuoteResponse
      type: object
      x-package: quote
      allOf:
        - $ref: '#/components/schemas/PaginatedListMeta'
        - type: object
          properties:
            data:
              type: array
              description: List of QuoteRequest and QuoteResponse
              items:
                $ref: '#/components/schemas/QuoteRequestAndResponse'

    QuoteRequestAndResponse:
      title: QuoteRequest
      description: QuoteRequest and QuoteResponse objects
      type: object
      x-package: quote
      discriminator:
        propertyName: metaType
        mapping:
          QuoteRightRequest: '#/components/schemas/QuoteRightRequest'
          QuoteSessionExtensionRequest: '#/components/schemas/QuoteSessionExtensionRequest'
          QuoteRightResponse: '#/components/schemas/QuoteRightResponse'
          QuoteSessionExtensionResponse: '#/components/schemas/QuoteSessionExtensionResponse'
      properties:
        metaType:
          type: string
          enum:
            - QuoteRightRequest
            - QuoteSessionExtensionRequest
            - QuoteRightResponse
            - QuoteSessionExtensionResponse

    QuoteRequest:
      title: QuoteRequest
      description: QuoteRequest objects
      type: object
      x-package: quote
      discriminator:
        propertyName: metaType
        mapping:
          QuoteRightRequest: '#/components/schemas/QuoteRightRequest'
          QuoteSessionExtensionRequest: '#/components/schemas/QuoteSessionExtensionRequest'
      properties:
        metaType:
          type: string
          enum:
            - QuoteRightRequest
            - QuoteSessionExtensionRequest

    QuoteResponseList:
      title: QuoteResponseList
      description: List of QuoteResponses
      type: object
      x-package: quote
      allOf:
        - $ref: '#/components/schemas/PaginatedListMeta'
        - type: object
          properties:
            data:
              type: array
              description: List of QuoteResponses
              items:
                $ref: '#/components/schemas/QuoteResponse'

    QuoteResponse:
      title: QuoteResponse
      description: QuoteResponse objects
      type: object
      x-package: quote
      discriminator:
        propertyName: metaType
        mapping:
          QuoteRightResponse: '#/components/schemas/QuoteRightResponse'
          QuoteSessionExtensionResponse: '#/components/schemas/QuoteSessionExtensionResponse'
      properties:
        metaType:
          type: string
          enum:
            - QuoteRightResponse
            - QuoteSessionExtensionResponse

    QuoteRightRequest:
      title: QuoteRightRequest
      description: class containing data elements required to request a quote for a new transaction
      type: object
      x-package: quote
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            eligibility:
              $ref: '#/components/schemas/Eligibility'
            referencedRightSpecifications:
              type: array
              items:
                $ref: '#/components/schemas/ReferencedRightSpecification'
            periodStart:
              type: string
              description: requested date/time for the start of a proposed new transaction
              format: date-time
            periodEnd:
              type: string
              description: requested date/time for the end of a proposed new transaction
              format: date-time
            requestTime:
              type: string
              format: date-time
              description: date/time at which the request for a quote was made
            timePeriods:
              type: array
              description: requested duration for the proposed new transaction
              items:
                $ref: '#/components/schemas/Duration'
          required:
            - periodStart
            - requestTime

    QuoteRightResponse:
      title: QuoteRightResponse
      description: Class containing data to support response to request for quote for a new transaction
      type: object
      x-package: quote
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            start:
              type: string
              description: date/time for the start of the proposed new transaction
              format: date-time
            end:
              type: string
              description: date/time for the end of the proposed new transaction
              format: date-time
            requestTime:
              type: string
              description: date/time at which the request for a quote was recorded/registered by the supplier
              format: date-time
            reason:
              $ref: '#/components/schemas/ResponseReasonEnum'
            quoteRequestId:
              $ref: '#/components/schemas/VersionedReference'
            responseTime:
              description: date/time at which the response is made by the supplier
              format: date-time
              type: string
            options:
              type: array
              items:
                $ref: '#/components/schemas/Option'
          required:
            - start
            - end
            - requestTime
            - quoteRequestId
            - responseTime

    QuoteSessionExtensionRequest:
      title: QuoteSessionExtensionRequest
      description: class containing detail required to initiate a request for a quote to extend an existing session
      type: object
      x-package: quote
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            requestedEndTime:
              type: string
              description: proposed date/time at which the proposed extended Session would end
              format: date-time
            requestTime:
              type: string
              description: reference date/time at which the request for a quote for a session extension is made
              format: date-time
            sessionId:
              $ref: '#/components/schemas/VersionedReference'
            suppliedCredential:
              $ref: '#/components/schemas/VersionedReference'
          required:
            - requestedEndTime
            - requestTime
            - sessionId
            - suppliedCredential

    QuoteSessionExtensionResponse:
      title: QuoteSessionExtensionResponse
      description: |-
        Class containing data to support response to request for quote to extend an existing Session
      type: object
      x-package: quote
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            requestSessionExtensionId:
              $ref: '#/components/schemas/VersionedReference'
            sessionId:
              $ref: '#/components/schemas/VersionedReference'
            requestTime:
              type: string
              format: date-time
              description: date/time at which the request for a quote was recorded/registered by the supplier
            responseTime:
              type: string
              format: date-time
              description: date/time at which the response is made by the supplier
            revisedEndTime:
              type: string
              format: date-time
              description: Date/time of the revised session end time
            reason:
              $ref: '#/components/schemas/QuoteRightResponseExtensionReasonEnum'
          required:
            - requestSessionExtensionId
            - sessionId
            - requestTime
            - responseTime
            - revisedEndTime

    ReferencedRightSpecification:
      title: ReferencedRightSpecification
      description: Class to support reference to a RightSpecification
      type: object
      x-package: quote
      properties:
        elementId:
          $ref: '#/components/schemas/VersionedReference'
        rightSpecificationId:
          $ref: '#/components/schemas/VersionedReference'
      required:
        - rightSpecificationId

    ReferenceQuoteExtension:
      title: ReferenceQuoteExtension
      description: Class providing a versioned reference to a quote for a session extension.
      type: object
      x-package: quote
      properties:
        quoteResponseId:
          $ref: '#/components/schemas/VersionedReference'
        optionId:
          $ref: '#/components/schemas/VersionedReference'

    ReferenceQuoteNew:
      title: ReferenceQuoteNew
      description: Class providing a versioned reference to a new quote.
      type: object
      x-package: quote
      properties:
        quoteResponseId:
          $ref: '#/components/schemas/VersionedReference'
        optionId:
          $ref: '#/components/schemas/VersionedReference'

    ReferenceToQuote:
      title: ReferenceToQuote
      description: Class defining a reference to a specific Quote.
      type: object
      x-package: quote
      oneOf:
        - $ref: '#/components/schemas/ReferenceQuoteExtension'
        - $ref: '#/components/schemas/ReferenceQuoteNew'

    # ===== Quote - Enums ===== #

    QuoteRightResponseExtensionReasonEnum:
      title: QuoteRightResponseExtensionReasonEnum
      description: |-
        A list of supported reasons if a requested session extension request is not provided
        * `existingSessionNotFound`: Error – the existing session referenced is not found
        * `incorrectCredentialsSupplied`: Error – credential details supplied are incorrect
        * `noExtensionPossible`: Error – the requested extension is not possible
      type: string
      x-package: quote.enums
      enum:
        - existingSessionNotFound
        - incorrectCredentialsSupplied
        - noExtensionPossible



    # ===== Rate =====

    RateLine:
      title: RateLine
      description: |-
        A specific rate element of a rate line collection within a specific rate table.
        `incrementPeriod` is the time period for incrementing the rate line charge. 
        If set to the same as the duration of the period between the `durationStart` and `durationEnd` the increment 
        will occur once per period, i.e. a flat rate time-based tier charge rate.
      type: object
      x-package: rate
      properties:
        description:
          type: string
          description: Free-text description associated with this rate line.
        durationStart:
          type: string
          description: |-
            If used, indicates the start time for the applicability of the specific rate line, 
            generally with respect to the start of the parking or other mobility session, 
            e.g. the start of a time-based tier charge rate.
        durationEnd:
          type: string
          description: |-
            If used, indicates the end time for the applicability of the specific rate line, 
            generally with respect to the end of the parking or other mobility session, 
            e.g. the end of a time-based tier charge rate.
        incrementPeriod:
          $ref: '#/components/schemas/Duration'
        rateLineType:
          $ref: '#/components/schemas/RateLineTypeEnum'
        sequence:
          type: integer
          description: The position of this rate line within a RateLine collection
          minimum: 1
        value:
          type: number
          description: the value of the fee to be charged in respect of this rate line
          format: float
        usageCondition:
          $ref: '#/components/schemas/RateUsageConditionsTypeEnum'
        rateLineTax:
          $ref: '#/components/schemas/RateLineTax'
        minValue:
          type: number
          description: The minimum monetary amount to be applied in conjunction with use of this rate line collection.
          format: float
        maxValue:
          type: number
          description: The maximum monetary amount to be applied in conjunction with use of this rate line collection.
          format: float
      required:
        - rateLineType
        - sequence
        - value

    RateLineCollection:
      title: RateLineCollection
      description: |-
        A group of rate line elements that logically group together within one rate table, 
        e.g. such as the rate lines for the different tiers of a time-based tier rate table.
      type: object
      x-package: rate
      discriminator:
        propertyName: rateLineCollectionType
        mapping:
          RateLineCollectionAbsoluteTimes: '#/components/schemas/RateLineCollectionAbsoluteTimes'
          RateLineCollectionRelativeTimes: '#/components/schemas/RateLineCollectionRelativeTimes'
      properties:
        rateLineCollectionType:
          type: string
          enum:
            - RateLineCollectionAbsoluteTimes
            - RateLineCollectionRelativeTimes
        applicableCurrency:
          $ref: '#/components/schemas/CurrencyCode'
        collectionSequence:
          type: integer
          description: An indicator giving the place in sequence of this rate line collection.
          minimum: 1
        minTime:
          $ref: '#/components/schemas/Duration'
        maxTime:
          $ref: '#/components/schemas/Duration'
        minValueCollection:
          type: number
          description: |-
            FIXME: The minimum monetary amount to be applied in conjunction with use of this rate line collection.
          format: float
        maxValueCollection:
          type: number
          description: |-
            FIXME: The maximum monetary amount to be applied in conjunction with use of this rate line collection.
          format: float
        relativeTimes:
          type: boolean
          description: |-
            [TRUE] Indicates whether times relative to the start of an event are used as the basis for rate calculation. 
            [FALSE] indicates that parking rate calculation definitions are done with respect to the parking sessions
            and defined local or UTC times.
        resetTime:
          type: string
          description: Time that rate resets
        taxIncluded:
          type: boolean
          description: |-
            [TRUE] Indication that tax to be applied is included within the total rate associated with this rate line collection. 
            [FALSE] Indicates that the tax is added additionally to the total.
        taxRate:
          type: number
          description: The percentage rate of tax to be applied.
          format: float
          minimum: 0
          maximum: 100
        taxValue:
          type: number
          description: The monetary amount of tax to be applied.
          format: float
        # Moved to RateLineCollectionAbsoluteTimes
        #validStart:
        #  type: string
        #  description: The start time for the validity of this rate line collection.
        #  format: date-time
        #validEnd:
        #  type: string
        #  description: The end time for the validity of this rate line collection.
        #  format: date-time
        rateLines:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/RateLine'
      required:
        - rateLineCollectionType
        - applicableCurrency
        - collectionSequence
        - minTime
        - maxTime
        - relativeTimes
        - resetTime
        - taxIncluded
        #- validStart
        - rateLines

    RateLineCollectionAbsoluteTimes:
      title: RateLineCollectionAbsoluteTimes
      description: |-
        A class supporting the specification of times for defining rate applicability that are related to a 
        defined `validStart`.
      type: object
      x-package: rate
      allOf:
        - $ref: '#/components/schemas/RateLineCollection'
        - type: object
          properties:
            validStart:
              type: string
              description: The start time for the validity of this rate line collection
              format: date-time
            validEnd:
              type: string
              description: The end time for the validity of this rate line collection
              format: date-time
          required:
            - validStart

    RateLineCollectionRelativeTimes:
      title: RateLineCollectionAbsoluteTimes
      description: |-
        A class supporting the specification of times for defining rate applicability that are relative to 
        a defined `referenceTimeStart` of an event.
      type: object
      x-package: rate
      allOf:
        - $ref: '#/components/schemas/RateLineCollection'
        - type: object
          properties:
            referenceTimeStart:
              type: string
              description: Event-related reference start time
              format: date-time
            referenceTimeEnd:
              type: string
              description: Event-related reference end time
              format: date-time
          required:
            - referenceTimeStart

    RateLineTax:
      title: RateLineTax
      description: Class containing details of tax to be applied to a RateLine.
      type: object
      x-package: rate
      properties:
        labelForDisplay:
          $ref: '#/components/schemas/MultilingualString'
        taxIncluded:
          type: boolean
          description: |-
            [TRUE] Indication that tax to be applied is included within the total rate associated with this rate line. 
            [FALSE] indicates that the tax is added additionally to the total.
        taxRate:
          type: number
          description: The percentage rate of tax to be applied.
          format: float
          maximum: 100
          minimum: 0
        taxValue:
          type: number
          description: The monetary amount of tax to be applied.
          format: float
        trigger:
          $ref: '#/components/schemas/MultilingualString'
      required:
        - taxIncluded

    RateTableList:
      title: RateTableList
      description: Paginated list of RateTable
      type: object
      x-package: right
      allOf:
        - $ref: '#/components/schemas/PaginatedListMeta'
        - type: object
          properties:
            data:
              type: array
              description: List of RateTables
              items:
                $ref: '#/components/schemas/RateTable'

    RateTable:
      title: RateTable
      description: |-
        A specific set of rate charges relating to one or more locations and optionally one set of eligibility criteria.
        rateTableId refers to the internal identifier for the rate table provided by the data supplier, 
        and not the resource's unique identifier itself
      type: object
      x-package: rate
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            rateTableName:
              $ref: '#/components/schemas/MultilingualString'
            validityStart:
              type: string
              description: Valid start date/time of rate table. This is when the rate table and pricing becomes active.
              format: date-time
            validityEnd:
              type: string
              description:  Expiration of rate table in date/time. This is when the rate table and pricing expires and is no longer used.
              format: date-time
            validation:
              type: boolean
              description: |-
                Are validations accepted when using this rate table ? 
                [TRUE] = validations can be applied to transactions using this rate table.
                [FALSE] = validations cannot be applied to transactions using this rate table.
            rateType:
              $ref: '#/components/schemas/RateTypeEnum'
            rateTableID:
              $ref: '#/components/schemas/MultilingualString'
            activeTimes:
              type: array
              minItems: 1
              description: Periods when the rate table is to be applied.
              items:
                $ref: '#/components/schemas/Duration'
            availability:
              $ref: '#/components/schemas/RateAvailabilityTypeEnum'
            rateResponsibleParty:
              $ref: '#/components/schemas/VersionedReference'
            rateSupersedeLink:
              type: string
              description: |-
                Identify the rate table that this rate table supersedes. 
                Temporarily supersedes the identified rate table. 
                Use the Rate expiration times to define duration.
            rateLineCollections:
              type: array
              description: List of line collection
              minItems: 1
              items:
                $ref: '#/components/schemas/RateLineCollection'
            additionalInformation:
              $ref: '#/components/schemas/Url'
          required:
            - rateTableName
            - validityStart
            - activeTimes
            - availability
            - rateLineCollections

    Surcharge:
      title: Surcharge
      description: Free-text description of the condition that leads to a surcharge being applied
      type: object
      x-package: rate
      properties:
        rate:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: the percentage rate surcharge to be applied
        refund:
          $ref: '#/components/schemas/RefundTypeEnum'
        surchargeType:
          $ref: '#/components/schemas/SurchargeTypeEnum'
        trigger:
          $ref: '#/components/schemas/MultilingualString'
        value:
          type: number
          description: the monetary amount of the surcharge
          format: float
      required:
        - refund
        - surchargeType

    # ===== Rate - Enums ===== #

    RateAvailabilityTypeEnum:
      title: RateAvailabilityTypeEnum
      description: |-
        * `private`: where parking access limited to known and authorized individuals.
        * `public`: Open to the public. 
        * `restricted`: Open to the public but need a direct purpose or permission to use from owner (e.g. doctor's surgery, storefront)"
      type: string
      x-package: rate.enums
      enum:
        - private
        - public
        - restricted

    RateLineTypeEnum:
      type: string
      description: |-
        A list of rate line types.
        * `flatRate`: A rate applied to the rate line which is not time/duration dependent. i.e. a single fixed payment.
        * `flatRateTier`: A flat rate charge rate associated with a specific time-based tier. This is a special case of an incrementing rate.
        * `incrementingRate`: A charge rate that increases by a defined amount in a defined time.
      title: RateLineTypeEnum
      x-package: rate.enums
      enum:
        - flatRate
        - flatRateTier
        - incrementingRate

    RateTypeEnum:
      title: RateTypeEnum
      description: |-
        * `contract`: Rate provided to contract holders only.
        * `daily`: Rate provided on a daily rate, per calendar day.
        * `event`: Rate provided in combination with a specific event.
        * `hourly`: Rate provided on an hourly basis.
      type: string
      x-package: rate.enums
      enum:
        - contract
        - daily
        - event
        - hourly

    RateUsageConditionsTypeEnum:
      title: RateUsageConditionsTypeEnum
      description: |
        A list of supported rate usage condition types.
        * `fixedDuration`: Fixed duration - check Rate Usage Duration Limitation field
        * `fixedNumber`: check Rate Usage Count Limitation field
        * `once`: Permit can be used once
        * `unlimited`: Unlimited usage.
      type: string
      x-package: rate.enums
      enum:
        - fixedDuration
        - fixedNumber
        - once
        - unlimited

    RefundTypeEnum:
      title: RefundTypeEnum
      description: |-
        A list of available refund categories.
        * `surchargeFullyRefundable`: The surcharge amount is fully refundable, when termination conditions are met.
        * `surchargeNonRefundable`: The surcharge amount is nonrefundable, when termination conditions are met.
        * `surchargePartiallyRefundable`: The surcharge amount is partially but not fully refundable, when termination conditions are met.
      type: string
      x-package: rate.enums
      enum:
        - surchargeFullyRefundable
        - surchargeNonRefundable
        - surchargePartiallyRefundable

    SurchargeTypeEnum:
      title: SurchargeTypeEnum
      description: |-
        Reason for surcharge:
        * `reservation`
        * `mobilePayment`
        * `deposit`
        * `membershipFee`
      type: string
      x-package: rate.enums
      enum:
        - reservation
        - mobilePayment
        - deposit
        - membershipFee



    # ===== Right =====

    AssignedRight:
      title: AssignedRight
      description: |-
        AssignedRight indicates the granting of a specific RightSpecification to a specific RightHolder, 
        and indicates one instance of a planned use of the Right.
      type: object
      x-package: right
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            rightHolder:
              $ref: '#/components/schemas/RightHolder'
            rightSpecification:
              $ref: '#/components/schemas/VersionedReference'
            expiry:
              type: string
              description: The date/time when the specific AssignedRight expires, and is not longer available for use.
              format: date-time
            issuanceTime:
              type: string
              description: The date/time of the issuing of a specific AssignedRight.
              format: date-time
            assignedRightIssuer:
              $ref: '#/components/schemas/Reference'
            instancesAvailable:
              type: integer
              description: The total number of instances under a specified RightSpecification that are available for use.
            instancesUsed:
              type: integer
              description: The total number of instances under a specified RightSpecification that have been used.
            minutesUsed:
              type: number
              description: |-
                Number of decimal minutes under a specified Assigned Right that have been used.
              format: float
            minutesAvailable:
              type: number
              description: |-
                Number of decimal minutes under a specified Assigned Right that are remaining for use.
              format: float
            remainingValue:
              $ref: '#/components/schemas/AmountInCurrency'
            totalInstances:
              type: integer
              description: The total number of instances under a specified Assigned Right that have been issued.
            totalMinutes:
              type: number
              description: Number of minutes under a specified Assigned Right that have been issued. Decimal minutes
              format: float
            totalRightValue:
              $ref: '#/components/schemas/AmountInCurrency'
            issueMethod:
              $ref: '#/components/schemas/IssueMethodEnum'
            plannedUses:
              type: array
              description: Planned future uses of this `AssignedRight`
              items:
                $ref: '#/components/schemas/PlannedUse'
            payments:
              type: array
              description: Payments made for this AssignedRight
              items:
                $ref: '#/components/schemas/Payment'
            monetaryValue:
              $ref: '#/components/schemas/MonetaryValue'
          required:
            - rightHolder
            - rightSpecification

    AssignedRightList:
      title: AssignedRightList
      description: Paginated list of AssignedRights
      type: object
      x-package: right
      allOf:
        - $ref: '#/components/schemas/PaginatedListMeta'
        - type: object
          properties:
            data:
              type: array
              description: List of AssignedRights
              items:
                $ref: '#/components/schemas/AssignedRight'

    Credential:
      title: Credential
      description: Information relating to a form of credential that are applicable for a specific RightSpecification.
      type: object
      x-package: right
      discriminator:
        propertyName: credentialType
        mapping:
          CredentialAssigned: '#/components/schemas/CredentialAssigned'
      properties:
        credentialType:
          type: string
          enum:
            - CredentialAssigned
        type:
          $ref: '#/components/schemas/CredentialTypeEnum'
      required:
        - credentialType
        - type

    CredentialAssigned:
      title: CredentialAssigned
      description: Information concerning a specific credential that is used for verification for one AssignedRight. Specialisation of a general credential.
      type: object
      x-package: right
      allOf:
        - $ref: '#/components/schemas/Credential'
        - type: object
          properties:
            identifier:
              $ref: '#/components/schemas/Reference'
            issuer:
              $ref: '#/components/schemas/MultilingualString'
          required:
            - identifier
            - issuer

    CustomerCredential:
      title: CustomerCredential
      description: |-
        Details of a credential identifying an individual or organisation as a
        customer user.
      type: object
      x-package: right
      allOf:
        - $ref: '#/components/schemas/CredentialAssigned'

    HolderCredential:
      title: HolderCredential
      description: |-
        Details of a generic credential held by a holder. A holder can be a
        vehicle or a specific individual or entity allowed to transfer credential
        to various vehicles.
      type: object
      x-package: right
      oneOf:
        - $ref: '#/components/schemas/VehicleCredential'
        - $ref: '#/components/schemas/CustomerCredential'
        - $ref: '#/components/schemas/OtherCredential'

    MonetaryValue:
      title: MonetaryValue
      description: |-
        Lightweight record of the monetary financial value of the associated AssignedRight (temporary). 
        Service provider is entity responsible for selling/collecting fees associated to the AR.
      type: object
      x-package: right
      properties:
        taxIncluded:
          type: boolean
          description: Whether tax included in monetary value, if yes (TRUE), if not (FALSE).
        serviceProvider:
          $ref: '#/components/schemas/VersionedReference'
        value:
          $ref: '#/components/schemas/AmountInCurrency'
      required:
        - taxIncluded
        - serviceProvider
        - value

    OtherCredential:
      title: OtherCredential
      description: |-
        Details of a credential for identification, not for use in connection
        with a specific vehicle or customer.
      type: object
      x-package: right
      allOf:
        - $ref: '#/components/schemas/CredentialAssigned'

    PlannedUse:
      title: PlannedUse
      description: A specific future instance when an `AssignedRight` is to be used/initiated.
      type: object
      x-package: right
      properties:
        startTime:
          type: string
          description: Date/time instance when a `PlannedUse` is considered to start, and be available for use.
          format: date-time
        endTime:
          type: string
          description: Date/time instance when a `PlannedUse` is considered to end, and no longer be available for use.
          format: date-time
        expiryTime:
          type: string
          description: Date/time instance when a `PlannedUse` expires, and is no longer available for use.
          format: date-time
        cancelTime:
          type: string
          description: Date/time instance when a specific `Planned Use` has been cancelled by the right holder.
          format: date-time
        issuanceTime:
          type: string
          description: Date/time at which a specific `PlannedUse` instance was issued.
          format: date-time
        issueMethod:
          $ref: '#/components/schemas/IssueMethodEnum'
        issuer:
          $ref: '#/components/schemas/VersionedReference'
        credentialsAssigned:
          type: array
          description: Credentials that might be used.
          minItems: 1
          items:
            $ref: '#/components/schemas/CredentialAssigned'
      required:
        - startTime

    RateDiscount:
      title: RateDiscount
      description: Class defining discount rates to be applied to a RateTable
      type: object
      x-package: right
      properties:
        fixedValue:
          $ref: '#/components/schemas/AmountInCurrency'
        discountRate:
          type: number
          description: Proportionate discount (-) or surcharge (+) to be applied to all values in the referenced RateTable.
          minimum: 0
          maximum: 100
          format: float

    RateEligibility:
      title: RateEligibility
      description: Defines the combination of Eligibility requirements with RateTables and associates this combination to a RightSpecification.
      type: object
      x-package: right
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            priority:
              type: integer
              description: |-
                An integer value, starting at 1, indicating the order in which multiple relevant
                RateTables shall be considered, with 1
                being the highest priority.
              minimum: 1
            combinable:
              type: boolean
              description: |-
                Boolean attribute that indicates (TRUE) if all `RateTables` associated to a `RightSpecification` with 
                a common `Eligibility` can be combined to establish a lowest cost tariff or (FALSE) they cannot be combined.
            eligibility:
              $ref: '#/components/schemas/Eligibility'
            rateTable:
              $ref: '#/components/schemas/VersionedReference'
            rateDiscount:
              $ref: '#/components/schemas/RateDiscount'
          required:
            - eligibility

    RelativeValidity:
      title: RelativeValidity
      description: |-
        A specific calendar can be defined to represent the number of `AssignedRights` available for distribution in 
        a specific recurring time period via `RelativeValidity`.
      type: object
      x-package: right
      properties:
        period:
          $ref: '#/components/schemas/Period'

    RightHolder:
      title: RightHolder
      description: Information concerning a specific holder of a granted right, corresponding to a defined RightSpecification.
      type: object
      x-package: right
      properties:
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/HolderCredential'

    RightPool:
      title: RightPool
      type: object
      x-package: right
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            assignedRightsIssuer:
              $ref: '#/components/schemas/VersionedReference'
            availableAssignedRights:
              type: integer
              description: |-
                The number of Assigned Rights that have been issued by the Rights creator to a specific Rights Issuer 
                that are still available to be assigned.
            distributedAssignedRights:
              type: integer
              description: The number of Assigned Rights that have been issued by the Rights creator to a specific Rights Issuer.
            qtyRelation:
              type: integer
              description: An integer defining the number of actions or parking included in a `RightSpecification`.
            relativeValidity:
              $ref: '#/components/schemas/RelativeValidity'
            validity:
              $ref: '#/components/schemas/Validity'
          required:
            - assignedRightsIssuer
            - availableAssignedRights
            - distributedAssignedRights

    RightSpecificationList:
      title: RightSpecificationList
      description: Paginated list of RightSpecification
      type: object
      x-package: right
      allOf:
        - $ref: '#/components/schemas/PaginatedListMeta'
        - type: object
          properties:
            data:
              type: array
              description: List of RightSpecifications
              items:
                $ref: '#/components/schemas/RightSpecification'

    RightSpecification:
      title: RightSpecification
      description: 'A Right Specification explicitly defines what the owner/manager of a Place is granting specific users or vehicles the ability to do (e.g. park, delivery, pick up).'
      type: object
      x-package: right
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            description:
              $ref: '#/components/schemas/MultilingualString'
            expiry:
              type: string
              description: Date/time showing the timestamp for when a RightSpecification ceases to be valid.
              format: date-time
            financialReference:
              type: string
              description: Creator defined free-text reference to financial transactions associated to the specific Right Specification.
            issuer:
              $ref: '#/components/schemas/VersionedReference'
            transferable:
              type: boolean
            transferableConditions:
              type: boolean
            type:
              $ref: '#/components/schemas/RightTypeEnum'
            hierarchyElements:
              type: array
              description: Versioned references to `Places` in the hierarchy where this `RightSpecification` is available.
              minItems: 1
              items:
                $ref: '#/components/schemas/VersionedReference'
            credentials:
              type: array
              description: The allowed credential types for this `RightSpecification`
              items:
                $ref: '#/components/schemas/Credential'
            rateEligibility:
              type: array
              description: |-
                Defines the combination of `Eligibility` requirements with `RateTables` and associates this combination to a `RightSpecification`. 
                RateEligibility enables a `RightSpecification` to have association to multiple `RateTable(s)` for a
                specific `Eligibility` ( or set of `Qualifications`). 
                `RateEligibility` also defines if `RateTables` are `Combinable`. 
                This is a Yes / No (Boolean) definition. 
                Either all `RateTables` associated to a `RightSpecification` with a common `Eligibility` can be combined or they cannot.
              items:
                $ref: '#/components/schemas/RateEligibility'
            rightPools:
              type: array
              description: Shares the number of AssignedRights that are available for use, are currently in use, or intended for use within a specific RightSpecification in specific date/time periods by a specific AssignedRightIssuer'
              items:
                $ref: '#/components/schemas/RightPool'
            validity:
              $ref: '#/components/schemas/Validity'
          required:
            - issuer
            - transferable
            - hierarchyElements

    VehicleCredential:
      title: VehicleCredential
      description: Details of a credential identifying a specific vehicle.
      type: object
      x-package: right
      allOf:
        - $ref: '#/components/schemas/CredentialAssigned'

    # ===== Right - Enums ===== #

    IssueMethodEnum:
      title: IssueMethodEnum
      description: |-
        A list of the supported methods for issuing credentials.
        * `electronic`: electronically issued, traceable
        * `permit`: physical identifier, typically visibly mounted within vehicle
        * `ticket`: typically single use, paper based
      type: string
      x-package: right.enums
      enum:
        - electronic
        - ticket
        - permit

    RightTypeEnum:
      title: RightTypeEnum
      description: |-
        Defines the type of RightSpecification
        * `accessPermission`: intended grant access permission
        * `loadingUnloading`: intended granting permissions to load and unload vehicles.
        * `oneTimeUseParking`: intended for one time or limited parking usage
        * `permitParking`: intended for multi-use parking usage
        * `setdownPickup`: intended for passenger setdown and pickup
        * `waiting`: intended to grant permission for an accompanied vehicle to wait
      type: string
      x-package: right.enums
      enum:
        - accessPermission
        - loadingUnloading
        - oneTimeUseParking
        - permitParking
        - setdownPickup
        - waiting



    # ===== Session =====

    FinancialTransaction:
      title: FinancialTransaction
      description: |-
        Financial transaction data will be expanded upon in future releases of the APDS specification. 
        To allow basic sharing of financial data immediately, certain financial data is associated to the Segment. 
        Each Segment has its own financial data defined. An entity is able to sum the financial data of each Segment to determine total Session financial data.

        Minimum financial data to include in a Segment includes:

        * Total value of Segment based on expected value to be received by Place owner or operator (ie amount of calculated Rate Table based on Session times).
        * Entity name of the service provider that is responsible for selling/collecting fees associated to the Segment.
        * Tax included in value - Yes/No (Boolean).
        * Country currency.

        Optional data to include in Segment

        * Date Segment fees are collected by service provider.
        * Transaction ID (reservation #, credit card transaction #, etc) as agreed upon by
        the two entities sharing data.

        The financial data collected under Release 2.1 of the APDS specification is the value of a transaction based on 
        a defined RateTable that is associated to a Segment via the AssignedRight. 
        The transaction value shared in the Segment is the amount of the transaction that is expected by the owner or operator of the Place.
      type: object
      x-package: session
      properties:
        dateCollected:
          type: string
          description: |-
            The date / time that the payment related to this financial transaction is recorded as being paid and collected.
          format: date-time
        rateLineId:
          $ref: '#/components/schemas/VersionedReference'
        segmentValue:
          type: number
          format: double
          description: |-
            The total monetary value associated with this financial transaction, based on expected value to be received 
            by PLACE owner or operator (i.e. amount of calculated rate table based on segment times).
        serviceProvider:
          $ref: '#/components/schemas/MultilingualString'
        taxIncluded:
          type: boolean
          description: |-
            Whether tax included in monetary value, if yes (TRUE), if not (FALSE).
        transactionId:
          type: string
          description: |-
            Identifier for the transaction (e.g. reservation number, credit card transaction reference) as agreed 
            upon by the two entities sharing data.
      required:
        - segmentValue
        - serviceProvider
        - taxIncluded

    Segment:
      title: Segment
      description: |-
        Segments enable a single Session to capture and report changes in Rate and AssignedRight during a Session.
        A Segment can only have one AssignedRight and Rate associated to it and is :
        * Is associated to a Session.
        * Is associated to an AssignedRight.
        * Is associated to a specific Rate via the AssignedRight.
        * Has a start and end time.
        * Has a credential via the AssignedRight.
        * Is associated to basic financial data.
        * Has version control on the AssignedRight (i.e. a segment starts with one AssignedRight and then is updated to a new AssignedRight at the end of the Segment, replacing the original).
        * Has a Place reference or Space ID.
      type: object
      x-package: session
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            actualStart:
              type: string
              format: date-time
            actualEnd:
              type: string
              format: date-time
            assignedRight:
              # Reference to an AssignedRight which might be created on the fly
              $ref: '#/components/schemas/VersionedReference'
            spaceId:
              $ref: '#/components/schemas/Reference'
            validationType:
              type: array
              description: The form of validation (the nature of credential) that is used in conjunction with the specific segment.
              minItems: 1
              items:
                $ref: '#/components/schemas/CredentialTypeEnum'
            validationId:
              type: string
              description: Specific validation identification associated to the segment.
            notes:
              $ref: '#/components/schemas/MultilingualString'
            credentialId:
              $ref: '#/components/schemas/Reference'
          required:
            - actualStart
            - assignedRight
            - validationType

    SessionList:
      title: SessionList
      description: Paginated list of Sessions
      type: object
      x-package: session
      allOf:
        - $ref: '#/components/schemas/PaginatedListMeta'
        - type: object
          properties:
            data:
              type: array
              description: List of Sessions
              items:
                $ref: '#/components/schemas/Session'

    Session:
      title: Session
      description: |-
        A Session captures the **actual** use of an `AssignedRight` and includes start time, end time, credential, 
        and other relevant data related to an operational transaction. A Session is not used for future activities.

        A `Session` is broken into one or multiple `Segments`.

        `Segments` enable a single `Session` to capture and report changes in `Rate` and `AssignedRight` during a `Session`.
      type: object
      x-package: session
      allOf:
        - $ref: '#/components/schemas/VersionedIdentity'
        - type: object
          properties:
            actualStart:
              type: string
              format: date-time
              description: The date/time of the start of the session.
            actualEnd:
              type: string
              format: date-time
              description: The date/time of the end of the session.
            initiator:
              $ref: '#/components/schemas/VersionedReference'
            identifiedCredentials:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/HolderCredential'
            segments:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/Segment'
            hierarchyElement:
              $ref: '#/components/schemas/VersionedReference'
            identifiedVehicle:
              $ref: '#/components/schemas/VehicleAncillaryIdentification'
          required:
            - actualStart
            - initiator
            - identifiedCredentials
            - segments



    # ===== Times =====

    AccessAndEgress:
      title: AccessAndEgress
      description: |-
        Time periods specified for access to or from a parking facility.
      type: object
      x-package: time
      discriminator:
        propertyName: metaType
        mapping:
          AccessAndEgressPeriods: '#/components/schemas/AccessAndEgressPeriods'
          AccessAndEgressValidity: '#/components/schemas/AccessAndEgressValidity'
      properties:
        metaType:
          type: string
          enum:
            - AccessAndEgressPeriods
            - AccessAndEgressValidity
        exitPossibleAtAnyTime:
          type: boolean
          description: 'If true, specifies that the specified access is available for exit at all times.'
        entranceOpenTimeArea:
          type: array
          description: Entrance open time area
          items:
            $ref: '#/components/schemas/EntranceOpenTime'
        exitOpenTimeArea:
          type: array
          description: Exit open time area
          items:
            $ref: '#/components/schemas/ExitOpenTime'

    AccessAndEgressPeriods:
      title: AccessAndEgressPeriods
      description: |-
        Supporting model. `AccessAndEgress` variant with `Periods`
      type: object
      x-package: time
      allOf:
        - $ref: '#/components/schemas/AccessAndEgress'
        - type: object
          properties:
            periods:
              type: array
              minItems: 1
              description: List of periods.
              items:
                $ref: '#/components/schemas/Period'

    AccessAndEgressValidity:
      title: AccessAndEgressValidity
      description: |-
        Supporting model. `AccessAndEgress` variant with `Validity`
      type: object
      x-package: time
      allOf:
        - $ref: '#/components/schemas/AccessAndEgress'
        - type: object
          properties:
            validity:
              $ref: '#/components/schemas/Validity'

    DayWeekMonth:
      title: DayWeekMonth
      description: |-
        Specification of periods defined by the intersection of days, weeks and months.
      type: object
      x-package: time
      discriminator:
        propertyName: metaType
        mapping:
          DayInMonth: '#/components/schemas/DayInMonth'
          WeekInMonth: '#/components/schemas/WeekInMonth'
      properties:
        metaType:
          type: string
          enum:
            - DayInMonth
            - WeekInMonth
        applicableDay:
          type: array
          uniqueItems: true
          maxItems: 7
          description: |-
            Applicable day of the week. 
            "All days of the week" is expressed by non-inclusion of this attribute.
          items:
            $ref: '#/components/schemas/DayEnum'
        applicableMonth:
          type: array
          description: |-
            Applicable month of the year. 
            "All months of the year" is expressed by non-inclusion of this attribute.
          uniqueItems: true
          maxItems: 12
          items:
            $ref: '#/components/schemas/MonthEnum'
        applicableWeek:
          type: array
          description: |-
            Applicable week of the month (1 to 5). 
            "All  weeks of the month" is expressed by non-inclusion of this attribute.
          uniqueItems: true
          maxItems: 5
          items:
            $ref: '#/components/schemas/WeekOfMonthEnum'

    DayInMonth:
      title: DayInMonth
      description: |-
        Indicates the instance of a specific day of the week within a month.
        When using this class, at least `applicableDay` must be specified
      type: object
      x-package: time
      allOf:
        - $ref: '#/components/schemas/DayWeekMonth'
        - type: object
          properties:
            dayInMonth:
              $ref: '#/components/schemas/InstanceOfDayInMonthEnum'
          required:
            - dayInMonth

    WeekInMonth:
      title: WeekInMonth
      description: |-
        Provides information concerning an identifiable calendar week in a calendar month.
        In accordance with ISO8601 calendar weeks start on a Monday.
      type: object
      x-package: time
      allOf:
        - $ref: '#/components/schemas/DayWeekMonth'
        - type: object
          properties:
            weekInMonth:
              $ref: '#/components/schemas/CalendarWeekInMonthEnum'
          required:
            - weekInMonth

    FuzzyTimePeriod:
      title: FuzzyTimePeriod
      description: Specifies the time period with non-precise characteristics.
      type: object
      x-package: time
      properties:
        beginOrDuration:
          $ref: '#/components/schemas/FuzzyTimeTypeEnum'
        endOrDuration:
          $ref: '#/components/schemas/FuzzyTimeTypeEnum'
      required:
        - beginOrDuration
        - endOrDuration

    SpecialDay:
      title: SpecialDay
      description: |-
        Specification of a special type of day, possibly also a public holiday. Can be country or region specific.
      type: object
      x-package: time
      discriminator:
        propertyName: metaType
        mapping:
          SpecialDay: '#/components/schemas/SpecialDay'
          PublicHoliday: '#/components/schemas/PublicHoliday'
      properties:
        metaType:
          type: string
          enum:
            - SpecialDay
            - PublicHoliday
        intersectWithApplicableDays:
          type: boolean
          description: |-
            When [TRUE], the period is the intersection of applicable days and this special day. 
            When [FALSE], the period is the union of applicable days and this special day.
        specialDayType:
          $ref: '#/components/schemas/SpecialDayTypeEnum'
      required:
        - intersectWithApplicableDays
        - specialDayType

    PublicHoliday:
      title: PublicHoliday
      description: Specification of a specific public holiday in case `specialDayType` is set to `publicHoliday`.
      type: object
      x-package: time
      allOf:
        - $ref: '#/components/schemas/SpecialDay'
        - type: object
          properties:
            publicHolidayName:
              $ref: '#/components/schemas/MultilingualString'
          required:
            - publicHolidayName

    Period:
      title: Period
      description: |-
        A continuous time period or a set of discontinuous time periods defined by the intersection of a set of criteria 
        all within an overall delimiting interval.
      type: object
      x-package: time
      properties:
        periodName:
          $ref: '#/components/schemas/MultilingualString'
        startOfPeriod:
          type: string
          description: Start of the period.
          format: date-time
        endOfPeriod:
          type: string
          description: End of the period.
          format: date-time
        recurringDayWeekMonthPeriod:
          type: array
          description: |-
            A recurring period defined in terms of days of the week, weeks of the month and months of the year.
          items:
            $ref: '#/components/schemas/DayWeekMonth'
        recurringSpecialDay:
          type: array
          description: A recurring period in terms of special days.
          items:
            $ref: '#/components/schemas/SpecialDay'
        recurringTimePeriodOfDay:
          type: array
          description: 'A recurring period of a day'
          items:
            $ref: '#/components/schemas/TimePeriodOfDay'

    OverallPeriod:
      title: OverallPeriod
      description: |-
        A continuous or discontinuous period of validity defined by overall bounding start and end times and the 
        possible intersection of valid periods (potentially recurring) with the complement of exception periods (also potentially recurring).
      type: object
      x-package: time
      properties:
        overallStartTime:
          type: string
          description: Start of bounding period of validity defined by date and time.
          format: date-time
        overallEndTime:
          type: string
          description: End of bounding period of validity defined by date and time.
          format: date-time
        validPeriods:
          type: array
          description: |-
            A single time period, a recurring time `Period` period or a set of different recurring time
            periods during which validity is true.
          items:
            $ref: '#/components/schemas/Period'
        exceptionPeriods:
          type: array
          description: |-
            A single time period, a recurring time Period period or a set of different recurring time
            periods during which validity is false.
          items:
            $ref: '#/components/schemas/Period'
      required:
        - overallStartTime

    Validity:
      title: Validity
      description: |-
        Specification of validity, either explicitly or by a validity time period specification which may be discontinuous.
      type: object
      x-package: time
      properties:
        validityStatus:
          $ref: '#/components/schemas/ValidityStatusEnum'
        validityTimeSpecification:
          $ref: '#/components/schemas/OverallPeriod'
      required:
        - validityTimeSpecification

    PeriodsOrValidity:
      title: PeriodsOrValidity
      description: |-
        Describes the mutually exclusive use of one Validity or one or more Periods
      type: object
      x-package: time
      discriminator:
        propertyName: metaType
        mapping:
          EntranceOpenTime: '#/components/schemas/EntranceOpenTime'
          ExitOpenTime: '#/components/schemas/ExitOpenTime'
          OperatingTime: '#/components/schemas/OperatingTime'
      properties:
        metaType:
          type: string
          enum:
            - EntranceOpenTime
            - ExitOpenTime
            - OperatingTime
        periods:
          type : array
          minItems: 1
          items:
            $ref: '#/components/schemas/Period'
        validity:
          $ref: '#/components/schemas/Validity'

    EntranceOpenTime:
      title: EntranceOpenTime
      description: Specification of periods of times when parking entrance(s) are open for vehicle movements.
      type: object
      x-package: time
      allOf:
        - $ref: '#/components/schemas/PeriodsOrValidity'

    ExitOpenTime:
      title: ExitOpenTime
      description: Specification of periods of times when parking exit(s) are open for vehicle movements.
      type: object
      x-package: time
      allOf:
        - $ref: '#/components/schemas/PeriodsOrValidity'

    OperatingTime:
      title: OperatingTime
      description: |-
        The times of operation of a parking facility - this is the time that the facility operates, not times of accessibility.
      type: object
      x-package: time
      allOf:
        - $ref: '#/components/schemas/PeriodsOrValidity'

    RelativeOffsets:
      title: RelativeOffsets
      description: |-
        Relative offsets definition used in a time-based constrained
      type: object
      x-package: time
      properties:
        earliestStartRelative:
          $ref: '#/components/schemas/Duration'
        earliestEndRelative:
          $ref: '#/components/schemas/Duration'
        latestStartRelative:
          $ref: '#/components/schemas/Duration'
        latestEndRelative:
          $ref: '#/components/schemas/Duration'

    RelativeTimes:
      title: RelativeTimes
      description: Relative times definition used in a time-based constrained
      type: object
      x-package: time
      properties:
        unit:
          $ref: '#/components/schemas/UnitOfTimeEnum'
        earliestStartRelative:
          $ref: '#/components/schemas/TimeUnitRelativeEnum'
        earliestEndRelative:
          $ref: '#/components/schemas/TimeUnitRelativeEnum'
        latestStartRelative:
          $ref: '#/components/schemas/TimeUnitRelativeEnum'
        latestEndRelative:
          $ref: '#/components/schemas/TimeUnitRelativeEnum'

    Times:
      title: Times
      description: |-
        Defines forms of time period for specific purposes. 
        There are four distinct time domain concepts: 
        * Hours of operation (times at which the facility may be used)
        * Access and egress (times it is possible to enter and leave the facility)
        * Entrance open time
        * Exit open time
      type: object
      x-package: time
      properties:
        available24hours:
          type: boolean
          description: If [TRUE], the identified parking hierarchy entities is available 24 hours per day.
        openAllYear:
          type: boolean
          description: If [TRUE], the identified parking hierarchy entities is available every day each year.
        openingTimesNotSpecified:
          type: boolean
          description: If [TRUE], the time periods are not specified.
        openingTimesUnknown:
          type: boolean
          description: If [TRUE], the time periods are not known.
        accessAndEgress:
          type: array
          items:
            $ref: '#/components/schemas/AccessAndEgress'
        operatingTime:
          $ref: '#/components/schemas/OperatingTime'
      required:
        - available24hours
        - openAllYear
        - openingTimesNotSpecified
        - openingTimesUnknown

    TimesOfDay:
      title: TimesOfDay
      description: Definition of times used in a time-based constrained.
      type: object
      x-package: time
      properties:
        earliestStart:
          $ref: '#/components/schemas/Time'
        earliestEnd:
          $ref: '#/components/schemas/Time'
        latestStart:
          $ref: '#/components/schemas/Time'
        latestEnd:
          $ref: '#/components/schemas/Time'

    TimePeriodOfDay:
      title: TimePeriodOfDay
      description: Specification of a continuous period of time within a 24 hour period.
      type: object
      x-package: time
      properties:
        startTimeOfPeriod:
          type: string
          description: Start of time period.
          format: time
        endTimeOfPeriod:
          type: string
          description: End time of period.
          format: time
      required:
        - startTimeOfPeriod
        - endTimeOfPeriod

    # ===== Times - Enums ===== #

    CalendarWeekInMonthEnum:
      title: CalendarWeekInMonthEnum
      description: |-
        Defines permissible enumerations of identification of calendar weeks within a month
        * `firstWeek`: First week First calendar week of the month - in accordance with ISO8601. This is the first week, that starts on Monday, and contains the first day of the month.
        * `secondWeek`: Second week Second calendar week of the month. Calendars weeks commence on a Monday. The second week immediately follows the first week of the month.
        * `thirdWeek`: Third week Third calendar week of the month. Calendars weeks commence on a Monday. The third week immediately follows the second week of the month.
        * `fourthWeek`: Fourth week Fourth calendar week of the month. Calendars weeks commence on a Monday. The fourth week immediately follows the third week of the month.
        * `fifthWeek`: Fifth week Fifth calendar week of the month. Calendars weeks commence on a Monday. The fifth week immediately follows the fourth week of the month.
        * `sixthWeek`: Sixth week Sixth calendar week of the month. Calendars weeks commence on a Monday. The sixth week immediately follows the fifth week of the month. **NOTE**: this may be the same week as the first calendar week of the following month.
      type: string
      x-package: time.enums
      enum:
        - firstWeek
        - secondWeek
        - thirdWeek
        - fourthWeek
        - fifthWeek
        - sixthWeek

    DayEnum:
      title: DayEnum
      description: |-
        Defines permissible enumerations of identification of days within a week
        * `friday`: Friday
        * `monday`: Monday
        * `saturday`: Saturday
        * `sunday`: Sunday
        * `thursday`: Thursday
        * `tuesday`: Tuesday
        * `wednesday`: Wednesday
      type: string
      x-package: time.enums
      enum:
        - friday
        - monday
        - saturday
        - sunday
        - thursday
        - tuesday
        - wednesday

    FuzzyTimeTypeEnum:
      title: FuzzyTimeTypeEnum
      description: |-
        Specifies the time period with non-precise characteristics
        * `autumn`: Beginning of autumn/fall (Source: ISO 20524-1)
        * `dawn`: Starts at dawn (Source: ISO 20524-1)
        * `day`: Start of day (Source: ISO 20524-1)
        * `drySeason`: Beginning of dry season (Source: ISO 20524-1)
        * `dusk`: Starts at dusk (Source: ISO 20524-1)
        * `external`: Starting period controlled by external device (Source: ISO 20524-1)
        * `highTide`: Beginning of high tide (Source: ISO 20524-1)
        * `highWater`: Beginning of high water (Source: ISO 20524-1)
        * `holiday`: Starts at any holiday (Source: ISO 20524-1)
        * `lowTide`: Beginning of low tide (Source: ISO 20524-1)
        * `lowWater`: Beginning of low water (Source: ISO 20524-1)
        * `night`: Start of night (Source: ISO 20524-1)
        * `offpeakHours`: Start of off-peak hours (Source: ISO 20524-1)
        * `peakHours`: Start of peak hours, peak hours include rush hour and activity/scheduled event based times. These would vary by location and by season (Source: ISO 20524-1)
        * `school`: Starts at any school period (date and hour) (Source: ISO 20524-1)
        * `spring`: Beginning of spring (Source: ISO 20524-1)
        * `summer`: Beginning of summer (Source: ISO 20524-1)
        * `wetSeason`: Beginning of wet season (Source: ISO 20524-1)
        * `winter`: Beginning of winter (Source: ISO 20524-1)
      type: string
      x-package: time.enums
      enum:
        - autumn
        - dawn
        - day
        - drySeason
        - dusk
        - external
        - highTide
        - highWater
        - holiday
        - lowTide
        - lowWater
        - night
        - offpeakHours
        - peakHours
        - school
        - spring
        - summer
        - wetSeason
        - winter

    InstanceOfDayInMonthEnum:
      title: InstanceOfDayInMonthEnum
      description: |-
        Defines permissible enumerations of the instance of a specific day (e.g. Monday, Tuesday) within a calendar month
        * `firstInstance`: First instance of a specific day (e.g. Monday, Tuesday) within a calendar month
        * `secondInstance`: Second instance of a specific day (e.g. Monday, Tuesday) within a calendar month
        * `thirdInstance`: Third instance of a specific day (e.g. Monday, Tuesday) within a calendar month
        * `fourthInstance`: Fourth instance of a specific day (e.g. Monday, Tuesday) within a calendar month 
        * `fifthInstance`: Fifth instance of a specific day (e.g. Monday, Tuesday) within a calendar month 
        * `sixthInstance`: Sixth instance of a specific day (e.g. Monday, Tuesday) within a calendar month
      type: string
      x-package: time.enums
      enum:
        - firstInstance
        - secondInstance
        - thirdInstance
        - fourthInstance
        - fifthInstance
        - sixthInstance

    MonthEnum:
      title: MonthEnum
      description: |-
        Defines permissible enumerations of identification of calendar months within a year
        * `january`: January
        * `february`: February
        * `march`: March
        * `april`: April
        * `may`: May
        * `june`: June
        * `july`: July
        * `august`: August
        * `september`: September
        * `october`: October
        * `november`: November
        * `december`: December
      type: string
      x-package: time.enums
      enum:
        - january
        - february
        - march
        - april
        - may
        - june
        - july
        - august
        - september
        - october
        - november
        - december

    SpecialDayTypeEnum:
      title: SpecialDayTypeEnum
      description: |-
        Collection of special types of days
        * `dayBeforePublicHoliday`: The day preceding a public holiday
        * `dayFollowingPublicHoliday`: A day following a public holiday
        * `inLieuOfPublicHoliday`: A holiday in lieu of a public holiday that falls on a weekend
        * `longWeekendDay`: A day between a public holiday and the weekend
        * `other`: Some other special day
        * `publicEventDay`: A day of a public event. You may use the publicEvent attribute to specify the corresponding event
        * `publicHoliday`: Public holiday A public holiday in general. You may use the PublicHoliday class to refer on a specific public holiday
        * `schoolDay`: A school day
        * `schoolHolidays`: A day within the school holidays
      type: string
      x-package: time.enums
      enum:
        - dayBeforePublicHoliday
        - dayFollowingPublicHoliday
        - inLieuOfPublicHoliday
        - longWeekendDay
        - other
        - publicEventDay
        - publicHoliday
        - schoolDay
        - schoolHolidays

    TimeUnitRelativeEnum:
      title: TimeUnitRelativeEnum
      description: |-
        A list of relativity operators for time units
        * `previous`
        * `current`
        * `next`
      type: string
      x-package: time.enums
      enum:
        - previous
        - current
        - next

    UnitOfTimeEnum:
      title: UnitOfTimeEnum
      description: |-
        A list of the supported units of measures of time
        * `year`
        * `month`
        * `week`
        * `day`
        * `hour`
        * `minute`
        * `second`
      type: string
      x-package: time.enums
      enum:
        - year
        - month
        - week
        - day
        - hour
        - minute
        - second

    ValidityStatusEnum:
      title: ValidityStatusEnum
      description: |-
        Values of validity status that can be assigned to a described event, action or item.
        * `active`: The described event, action or item is currently active regardless of the definition of the validity time specification.
        * `definedByValidityTimeSpec`: The validity status of the described event, action or item is in accordance with the definition of the validity time specification.
        * `planned`: The described event, action or item is currently planned regardless of the definition of the validity time specification.
        * `suspended`: The described event, action or item is currently suspended, that is inactive, regardless of the definition of the validity time specification.
      type: string
      x-package: time.enums
      enum:
        - active
        - definedByValidityTimeSpec
        - planned
        - suspended

    WeekOfMonthEnum:
      title: WeekOfMonthEnum
      description: |-
        Weeks of the month
        * `firstWeekOfMonth`: First week of the month
        * `secondWeekOfMonth`: Second week of the month
        * `thirdWeekOfMonth`: Third week of the month
        * `fourthWeekOfMonth`: Fourth week of the month
        * `fifthWeekOfMonth`: Fifth week of the month (at most only 3 days and non in February when not a leap year)
      type: string
      x-package: time.enums
      enum:
        - firstWeekOfMonth
        - secondWeekOfMonth
        - thirdWeekOfMonth
        - fourthWeekOfMonth
        - fifthWeekOfMonth

  parameters:

    # ===== Common =====#

    version:
      schema:
        type: integer
        minimum: 1
      in: query
      name: version
      description: |-
        Previous version number. 
        Useful when a reference to a resource version is found in another dataset, and that version is no longer the latest one. 
        Latest version is assumed when this parameter is not used.

    lat:
      schema:
        type: number
        format: float
      in: query
      name: latitude
      description: Location latitude to use as filter (mandatory if longitude or radius are defined)

    long:
      schema:
        type: number
        format: float
      in: query
      name: longitude
      description: Location longitude to use as filter (mandatory if longitude or radius are defined)

    radius:
      schema:
        type: integer
        minimum: 0
      in: query
      name: radius
      description: Number of metres to use as search filter from given latitude and longitude (mandatory if latitude or longitude are defined)

    mod:
      schema:
        type: integer
        minimum: 0
      in: query
      name: modified_since
      description: |-
        Reference timestamp to only display resources that have changed after that instant (represented as seconds, in UTC, since epoch).
        * If `expand` attributes are requested, then this timestamp will also apply to those objects modifications 
        * When this attribute is used, the result-set will also include a list of deleted resources IDs, so that the client can use this method to avoid storing stale data

    start_after:
      schema:
        type: integer
        minimum: 0
      in: query
      name: start_after
      description: Unix epoch instant in UTC, to filter results starting after the given instant

    end_after:
      schema:
        type: integer
        minimum: 0
      in: query
      name: end_after
      description: Unix epoch instant in UTC, to filter results ending after the given instant

    start_before:
      schema:
        type: integer
        minimum: 0
      in: query
      name: start_before
      description: Unix epoch instant in UTC, to filter results starting before the given instant

    end_before:
      schema:
        type: integer
        minimum: 0
      in: query
      name: end_before
      description: Unix epoch instant in UTC, to filter results ending before the given instant

    # ===== Types ===== #

    cred_type:
      schema:
        type: array
        items:
          $ref: '#/components/schemas/CredentialTypeEnum'
      name: credential_type
      in: query
      description: Type of credential
      style: form
      explode: false

    right_type:
      schema:
        type: array
        items:
          $ref: '#/components/schemas/RightTypeEnum'
      name: right_type
      in: query
      description: Comma-separated list of type of `RightSpecifications` associated with place hierarchy elements (all will be assumed if parameter is not used or left blank)
      style: form
      explode: false

    place_type:
      schema:
        type: array
        items:
          $ref: '#/components/schemas/HierarchyElementTypeEnum'
      name: type
      in: query
      description: Comma-separated list of type of `Place` hierarchy elements to consider (all will be assumed if parameter is not used or left blank)
      style: form
      explode: false

    structure_type:
      schema:
        type: array
        items:
          $ref: '#/components/schemas/StructureTypeEnum'
      name: structure_type
      in: query
      description: Comma-separated list of types of Structure in the hierarchy to consider (all will be assumed if parameter is not used or left blank)
      style: form
      explode: false

    structure_grade:
      schema:
        type: array
        items:
          $ref: '#/components/schemas/StructureGradeEnum'
      name: structure_grade
      in: query
      description: Comma-separated list of Structure grades in the hierarchy to consider (all will be assumed if parameter is not used or left blank)
      style: form
      explode: false

    quote_type:
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - QuoteRightRequest
            - QuoteRightResponse
            - QuoteSessionExtensionRequest
            - QuoteSessionExtensionResponse
      name: type
      in: query
      description: Comma-separated list of type of `Quote` type elements to consider (all will be assumed if parameter is not used or left blank)
      style: form
      explode: false

    # ===== List ===== #

    place_list:
      schema:
        type: array
        items:
          type: string
      description: Comma-separated list of unique identifiers for elements in the `Place` hierarchy
      name: place
      in: query
      explode: false
      style: form

    right_specs_list:
      schema:
        type: array
        items:
          type: string
      description: Comma-separated list of unique identifiers for `RightSpecifications`
      name: right_spec
      in: query
      explode: false
      style: form

    cred_id_list:
      schema:
        type: array
        items:
          type: string
      in: query
      name: credential_id
      description: Comma-separated list of unique identifiers for credentials in given classes
      style: form
      explode: false

    cred_class_list:
      schema:
        type: array
        items:
          type: string
      in: query
      name: credential_class
      description: Comma-separated list of specific class names for credentials (a more generic option is to use `credential_type`)
      style: form
      explode: false

    quote_filter:
      schema:
        type: string
        enum:
          - QuoteRightRequest
          - QuoteRightResponse
          - QuoteSessionExtensionRequest
          - QuoteSessionExtensionResponse
      name: type
      in: query
      description: Type of `Quote` type element to consider
      style: form
      explode: false

    # ===== Expands ===== #

    assigned_expand:
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - none
            - plannedUses
            - assignedRightIssuer
      description: Comma-separated list of optional object attributes associated to an `AssignedRight` that should be included in the result set
      name: expand
      in: query
      style: form
      explode: false

    specs_expand:
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - none
            - rateEligibility
            - validity
            - credentials
            - rightPools
      description: Comma-separated list of optional object attributes associated to an `RightSpecification` that should be included in the result set
      name: expand
      in: query
      style: form
      explode: false

    places_expand:
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - none
            - rightSpecifications
            - occupancy
            - areaLocation
            - pointLocation
            - contacts
            - operatingRestrictions
            - characteristics
            - paymentMethods
            - openingTimes
            - streetAddress
      description: Comma-separated list of optional object attributes associated to a `Place` hierarchy element that should be included in the result set
      name: expand
      in: query
      style: form
      explode: false

    rates_expand:
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - none
            - rateLineCollections
            - rateLineCollections.rateLines
      style: form
      explode: false
      description: Comma-separated list of optional object attributes associated to a `RateTable` that should be included in the result set
      name: expand
      in: query

    sessions_expand:
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - none
            - credentials
            - segments
            - segments.financialTransactions
            - segments.space
            - segments.assignedRight
            - vehicleAncillaryIdentification
      description: Comma-separated list of optional object attributes associated to an `Session` (or `Segment`) that should be included in the result set
      name: expand
      in: query
      style: form
      explode: false

    observations_expand:
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - none
            - images
            - hierarchyElement
            - vehicleAncillaryIdentification
      description: Comma-separated list of optional object attributes associated to an `Observation` that should be included in the result set
      name: expand
      in: query
      style: form
      explode: false

    quotes_expand:
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - none
            - options
      description: Comma-separated list of optional object attributes associated to a `QuoteRequest` or `QuoteResponse` that should be included in the result set
      name: expand
      in: query
      style: form
      explode: false
